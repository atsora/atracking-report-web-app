require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

// config - common for all apps
//require('config_pulsecomponent_default.js'); - not possible HERE !

// translation - common 
//require('translation_pulsecomponent_default.js'); - not possible HERE !

// For fast tests
require('x-clock/x-clock');

// check and login
require('x-checkcurrenttime/x-checkcurrenttime');
require('x-checkpath/x-checkpath');
require('x-checkversion/x-checkversion');
require('x-checkconfigupdate/x-checkconfigupdate');
require('x-checklogin/x-checklogin');
require('x-logindisplay/x-logindisplay');
require('x-checkserveraccess/x-checkserveraccess');

require('x-markdowntext/x-markdowntext');
require('x-message/x-message');
require('x-modificationmanager/x-modificationmanager'); // Is it useful ? -- RR 2023

require('x-machineselection/x-machineselection');
/* machineselection already includes :
require('x-grouparray/x-grouparray');
require('x-machinedisplay/x-machinedisplay');
require('x-freetext/x-freetext');
*/

// Displays
require('x-reportdatetime/x-reportdatetime');
require('x-datetimepicker/x-datetimepicker');
require('x-datepicker/x-datepicker');

},{"x-checkconfigupdate/x-checkconfigupdate":71,"x-checkcurrenttime/x-checkcurrenttime":72,"x-checklogin/x-checklogin":73,"x-checkpath/x-checkpath":74,"x-checkserveraccess/x-checkserveraccess":75,"x-checkversion/x-checkversion":76,"x-clock/x-clock":77,"x-datepicker/x-datepicker":78,"x-datetimepicker/x-datetimepicker":79,"x-logindisplay/x-logindisplay":82,"x-machineselection/x-machineselection":84,"x-markdowntext/x-markdowntext":85,"x-message/x-message":86,"x-modificationmanager/x-modificationmanager":87,"x-reportdatetime/x-reportdatetime":88}],2:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

'use strict';

/**
 * @module pulseComponent
 * @requires module:pulseConfig
 * @requires module:pulseService
 * @requires module:eventBus
 */
var pulseConfig = require('pulseConfig');
var pulseLogin = require('pulseLogin');
var pulseService = require('pulseService');
var pulseUtility = require('pulseUtility');
var state = require('state');
var eventBus = require('eventBus');

/**
 * Base class for any web component 
 */
class WebComponent { // extends HTMLElement if customElements.define is used directly
  /**
   * Constructor
   *
   * @param  {Element} element - DOM element 
   */
  constructor(element) {
    this.methods = {};
    this._element = element;
  }

  /**
   * Associated DOM element
   *
   * @return {Element} element
   */
  get element () {
    return this._element;
  }

  /**
   * Callback that is called  when the custom element is connected to the DOM document
   */
  connectedCallback () {
  }

  /**
   * Callback that is called when the custom element is disconnected from the DOM document
   * return true if DOM should be destroyed and will never come again
   */
  disconnectedCallback () {
    return true;
  }

  /**
   * attribute changed callback for x-tag or custom element
   *
   * @param {string} attr - Name of the attribute
   * @param {string} oldVal - Old attribute value
   * @param {string} newVal - New attribute value
   */
  attributeChangedCallback (attr, oldVal, newVal) {
  }
}

/**
 * This class represents a super-class of all Pulse components.
 * 
 * @extends module:pulseComponent~WebComponent
 */
class PulseComponent extends WebComponent {
  /**
   * Constructor
   *
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    self._connected = false;
    self._connectedOnce = false;
    return self;
  }

  /**
   * Is the associated custom element connected to the DOM document ?
   *
   * @return {boolean} connected
   */
  get connected () {
    return this._connected;
  }

  /**
   * Has the associated custom element been connected once to the DOM document ?
   *
   * @return {boolean} connectedOnce
   */
  get connectedOnce () {
    return this._connectedOnce;
  }

  /**
   * Callback that is called  when the custom element is connected to the DOM document
   */
  connectedCallback () {
    super.connectedCallback();
    this._connected = true;
    this._connectedOnce = true;
  }

  /**
   * Callback that is called when the custom element is disconnected from the DOM document
   * return true if DOM should be destroyed and will never come again
   */
  disconnectedCallback () {
    this._connected = false;
    return super.disconnectedCallback();
  }

  /**
   * attribute changed callback for x-tag or custom element
   *
   * @param {string} attr - Name of the attribute
   * @param {string} oldVal - Old attribute value
   * @param {string} newVal - New attribute value
   */
  attributeChangedCallback (attr, oldVal, newVal) {
    if (this._connectedOnce) {
      this.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
    }
  }

  /**
   * attribute changed callback for x-tag or custom element only when the component has already been connected once
   *
   * @param {string} attr - Name of the attribute
   * @param {string} oldVal - Old attribute value
   * @param {string} newVal - New attribute value
   */
  attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
  }

  /**
   * Get some information on the web component instance, including its id and class if they are defined
   *
   * @return {string} Infos on component instance
   */
  getInfo () {
    let str = 'undefined';
    if (this.element != null) {
      str = this.element.tagName;
      if (this.element.hasAttribute('id')) {
        str += `[id:${this.element.getAttribute('id')}]`;
      }
      if (this.element.hasAttribute('class')) {
        str += `[class:${this.element.getAttribute('class')}]`;
      }
    }
    else {
      str += ' this.element;'
      console.warn('component.getInfo: this.element is null. Should never happen. Excepted when removed');
    }
    return str;
  }

  /**
   * Add a css class
   *
   * @param {string} cssClass - Name of the CSS class
   */
  addClass (cssClass) {
    $(this.element).addClass(cssClass);
  }

  /**
   * Remove a css class
   *
   * @param {string} cssClass - Name of the CSS class
   */
  removeClass (cssClass) {
    $(this.element).removeClass(cssClass);
  }

  /**
   * Get translation
   *
   * @param {string} key - config Key (ex: 'tag.threshold')
   * @param {*} defaultValue - default value in case nothing in found in attribute or pulseConfig
   * @returns {*} Configuration or attribute value
   */
  getTranslation (key, defaultValue) {
    // TODO : Catch exception + log + return default
    let translation = PULSE_COMPONENT_TRANSLATION;
    if (!pulseUtility.isNotDefined(translation)) {
      let nameTag = '';
      if (!pulseUtility.isNotDefined(this.element)) {
        nameTag = this.element.tagName.toLowerCase();
        if (0 == nameTag.indexOf('x-')) {
          nameTag = nameTag.substring(2);
        }
      }
      if ((pulseUtility.isNotDefined(key)) || (key === '')) {
        translation = translation[nameTag];
      }
      else {
        let listOfKeys = key.split('.');
        //toFind = translation[nameTag][keyS];
        translation = translation[nameTag];
        if ((!pulseUtility.isNotDefined(translation)) && (translation !== '')) {
          for (let i = 0; i < listOfKeys.length; i++) {
            translation = translation[listOfKeys[i]];
            if ((pulseUtility.isNotDefined(translation)) || (translation === '')) {
              //debugger;
              break;
            }
          }
        }
        if (pulseUtility.isNotDefined(translation)) {
          // toFind = translation[keyS];
          translation = PULSE_COMPONENT_TRANSLATION;
          for (let i = 0; i < listOfKeys.length; i++) {
            translation = translation[listOfKeys[i]];
            if ((pulseUtility.isNotDefined(translation))
              || (translation === '')) {
              //debugger;
              break;
            }
          }
        }
      }
    }

    if (pulseUtility.isNotDefined(translation)) {
      // TODO alert if debug mode
      //debugger;
      return defaultValue;
    }
    else {
      return translation;
    }
  }

  /**
   * Get config or attribute (if any attribute overload config)
   *
   * @param {string} key - config Key (ex: 'tag.threshold')
   * @param {*} defaultValue - default value in case nothing in found in attribute or pulseConfig
   * @returns {*} Configuration or attribute value
   */
  getConfigOrAttribute (key, defaultValue) {
    let listOfKeys = key.split('.'); // Ex: 'ANY_tagName.realKey'

    if (listOfKeys.length < 1) {
      return defaultValue;
    }

    let lastKey = listOfKeys[listOfKeys.length - 1];

    if (!pulseUtility.isNotDefined(this.element)) { // To avoid erreur when deleted
      // 1- ATTRIBUTE : Get LAST key or ONLY 
      if (this.element.hasAttribute(lastKey)) {
        return this.element.getAttribute(lastKey);
      }

      // 2- CONFIG
      let elementShortName = this.element.tagName.toLowerCase();
      elementShortName = elementShortName.slice(2);
      // 1- Search for xtag.refreshingXXX.XXXrate (for example)
      let retVal = pulseConfig.getString(elementShortName + '.' + key, 'undefDefautValue');
      if ('undefDefautValue' != retVal)
        return retVal;

      if (listOfKeys.length >= 2 && listOfKeys[0] != elementShortName) {
        //let lastKey = listOfKeys[listOfKeys.length - 1];
        // 2- Search for xtag.XXXrate (for example)
        retVal = pulseConfig.getString(elementShortName + '.' + lastKey, 'undefDefautValue');
        if ('undefDefautValue' != retVal)
          return retVal;
      }
    }
    // 3-Search for refreshingXXX.XXXrate (for example)
    return pulseConfig.getString(key, defaultValue);
  }

  /**
   * Get config or attribute (if any attribute overload config)
   *
   * @param {string} key - config Key (ex: 'tag.threshold')
   * @param {*} defaultValue - default value in case nothing in found in attribute or pulseConfig
   * @returns {*} Configuration or attribute value
   */
  getConfigOrAttributeFreeType (key, defaultValue) {
    let listOfKeys = key.split('.'); // Ex: 'ANY_tagName.realKey'

    if (listOfKeys.length < 1) {
      return defaultValue;
    }

    let elementShortName = this.element.tagName.toLowerCase();
    elementShortName = elementShortName.slice(2);
    // 1- Search for xtag.refreshingXXX.XXXrate (for example)
    let retVal = pulseConfig.get(elementShortName + '.' + key);
    if (undefined != retVal)
      return retVal;

    if (listOfKeys.length >= 2 && listOfKeys[0] != elementShortName) {
      let lastKey = listOfKeys[listOfKeys.length - 1];
      // 2- Search for xtag.XXXrate (for example)
      retVal = pulseConfig.get(elementShortName + '.' + lastKey);
      if (undefined != retVal)
        return retVal;
    }

    // 3-Search for refreshingXXX.XXXrate (for example)
    return pulseConfig.get(key, defaultValue);
  }
}


/**
 * Pulse component that implements the state machine pattern
 *
 * @extends module:pulseComponent~PulseComponent
 */
class PulseStateComponent extends PulseComponent {
  /**
   * Constructor
   *
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    // By default the component will be removed from DOM only once AND die :
    self._fullDeleteWhenDisconnect = true;
    self._stateContext = null;
    self._stateKey = null;
    self._getInitializedState = function (context, key) {
      return null;
    }
    self._pendingPostAction = function () { }
    return self;
  }

  /**
   * Clear extra classes linked to states
   *
   */
  clearDynamicStateContent () {
    let classes = this.element.className;

    if (classes != undefined && classes != '') {
      let class_names = classes.split(' ');
      for (let i = 0; i < class_names.length; i++) {
        let tmp_class = class_names[i];
        if (0 == tmp_class.indexOf('pulse-component-')) {
          // -loading -not-applicable -warning -error 
          $(this.element).removeClass(tmp_class);
        }
        if (0 == tmp_class.indexOf('pulsecomponent-')) {
          // pulsecomponent-context-Initialized -ParamValidation -Loaded ... 
          // pulsecomponent-key-Loading -Validating -Error ...
          $(this.element).removeClass(tmp_class);
        }
      }
    }
  }

  /**
   * To be overridden if necessary
   * 
   * @returns {boolean} is the component visible ?
   */
  get isVisible () {
    if ($(this.element).hasClass('pulse-nodisplay')) { // 'x-check...'
      return true;
    }
    if (!this._connected) {
      return false;
    }

    if ($(this.element).is(':visible')) {
      return true;
    }

    // If x-tag is in foreignObject in svg => define as visible !
    if ($(this.element).hasClass('pulse-added-in-svg')) {
      return true;
    }

    // The following code is a little bit tricky because on Chrome:
    // - $(this.element).is(':visible') only works on block elements, else false is always returned
    // - the x-tag element is always inline
    let display = this.element.currentStyle
      ? this.element.currentStyle.display // IE
      : window.getComputedStyle(this.element, null).display;
    switch (display) {
      case 'block':
        return false;
      default:
        break;
    }
    // - Because the x-tag element is always inline on Chrome,
    //   visit all the children and try to find among them a block element
    let blockElementFound = false;
    for (let child of this.element.children) {
      let childDisplay = child.currentStyle
        ? child.currentStyle.display // IE
        : window.getComputedStyle(child, null).display;
      switch (childDisplay) {
        case 'block':
          blockElementFound = true;
          if ($(child).is(':visible')) {
            return true;
          }
          else {
            break;
          }
        default:
          break;
      }
    }
    if (blockElementFound) {
      console.log('isVisible: fallback, all the block element children are not visible, return false');
      return false;
    }
    else {
      console.log('isVisible: fallback, no block element in children, return true');
      return true;
    }
  }

  /**
   * Callback that is called  when the custom element is connected to the DOM document
   */
  connectedCallback () {
    super.connectedCallback();
  }

  /**
   * Callback that is called when the custom element is disconnected from the DOM document
   * return true if DOM should be destroyed and will never come again
   */
  disconnectedCallback () {
    return super.disconnectedCallback();
  }

  /**
   * Method to use when the component can be remove / re- append to DOM
   * (for example in setupmachine)
   */
  disableDeleteWhenDisconnect () {
    this._fullDeleteWhenDisconnect = false;
  }

  /**
   * Method to use when disableDeleteWhenDisconnect have been called
   * to restore delete (for example in setuplist for children)
   */
  restoreDeleteWhenDisconnect () {
    this._fullDeleteWhenDisconnect = true;
  }

  /**
   * @returns {!string} current state context
   */
  get stateContext () {
    if (null == this._stateContext) {
      debugger; // eslint-disable-line no-debugger
      throw 'No defined state context';
    }
    return this._stateContext;
  }

  /**
   * @returns {!string} Current state key
   */
  get stateKey () {
    if (null == this._stateKey) {
      debugger; // eslint-disable-line no-debugger
      throw 'No defined state key';
    }
    return this._stateKey;
  }

  /** 
   * Define the states
   * 
   * @param {!string} context - Context
   * @param {!string} key - Key
   * @returns {!State} Created states
   *
   * @function defineState
   */

  /**
   * Define the start context
   *
   * @returns {!string} Start context
   *
   * @function startContext
   */

  /**
   * Define for each context the start key
   * 
   * @param {!string} context - Context
   * @returns {string} Start key
   * 
   * @function getStartKey
   */

  /**
   * Define which context should be considered once a context is completed
   * 
   * @param {!string} context - Context
   * @returns {string} Next context
   * 
   * @function getNextContext
   */

  /**
   * Action callback
   * 
   * @callback actionCallback
   */

  /**
  * Method to execute when you enter a context
  * 
  * @param {!string} context - Context
  * @returns {actionCallback}
  */
  enterContext (context) {
    return (function () { });
  }

  /**
   * Method to execute when you exit a context
   * 
   * @param {!string} context - Context
   * @returns {actionCallback}
   */
  exitContext (context) {
    return (function () { });
  }

  /**
   * Has a state been already initialized to this component ?
   * 
   * @returns {boolean} 
   */
  get isStarted () {
    return (null != this._stateContext) && (null != this._stateKey);
  }

  /**
   * Get a state (initialize it if necessary)
   * 
   * @param {!string} context - context 
   * @param {!string} key - key
   * @returns {State} state
   */
  getState (context, key) {
    let initializedState = this._getInitializedState(context, key);
    if (null != initializedState) {
      return initializedState;
    }
    else { // null == initializedState
      let state = this.defineState(context, key);
      let previousGetInitializedState = this._getInitializedState;
      let newGetInitializedState = function (c, k) {
        if ((c == context) && (k == key)) {
          return state;
        }
        else {
          return previousGetInitializedState(c, k);
        }
      };
      this._getInitializedState = newGetInitializedState;
      return state;
    }
  }

  /**
   * @returns {!State} current state
   */
  get state () {
    return this.getState(this.stateContext, this.stateKey);
  }

  /** 
   * Switch to state method, where the context and the key cannot be null
   * 
   * @param {!string} c - State context
   * @param {!string} k - State key
   * @param {!actionCallback} preAction - Pre-action
   * @param {!actionCallback} postAction - Post-action
  */
  _switchToState (c, k, preAction, postAction) {
    if ((null == this._stateContext) && (null == this._stateKey)) {
      let enterContext = this.enterContext(c);
      enterContext();
      this._stateContext = c;
      this._stateKey = k;
      preAction.bind(this)();
      let newState = this.getState(c, k);
      newState.enter(null, null);
      this._pendingPostAction = postAction.bind(this);
    }
    else if ((null == this._stateContext) || (null == this._stateKey)) {
      console.error('Only one context/key defined');
      debugger; // eslint-disable-line no-debugger
      throw 'Only one context/key defined';
    }
    else if ((this.stateContext == c) && (this.stateKey == k)) {
      this._pendingPostAction.bind(this)();
      this._pendingPostAction = function () { }
      preAction.bind(this)();
      let state = this.getState(c, k);
      state.stay();
      this._pendingPostAction = postAction.bind(this);
    }
    else {
      this.state.exit(c, k);
      let oldContext = this.stateContext;
      let oldKey = this.stateKey;
      this._pendingPostAction.bind(this)();
      this._pendingPostAction = function () { }
      if (oldContext != c) {
        let exitContext = this.exitContext(oldContext);
        exitContext();
        let enterContext = this.enterContext(c);
        enterContext();
      }
      this._stateContext = c;
      this._stateKey = k;
      preAction.bind(this)();
      let newState = this.getState(c, k);
      newState.enter(oldContext, oldKey);
      this._pendingPostAction = postAction.bind(this);
    }
  }

  /** Remain in the same context, but switch to the state with the specified key
   * 
   * @param {!string} k - New state key
   * @param {!actionCallback} preAction - Pre-action
   * @param {!actionCallback} postAction - Post-action
   */
  _switchToKey (k, preAction, postAction) {
    if (null == this._stateContext) {
      this._switchToState(this.startContext, k, preAction, postAction);
    }
    else {
      this._switchToState(this.stateContext, k, preAction, postAction);
    }
  }

  /**
   * Switch to a next state
   *
   * @param {?string} context - Context of the new state or null/undefined
   * @param {?string} key - Key of the new state or null/undefined
   * @param {?actionCallback} preActionParam - Pre-action
   * @param {?actionCallback} postActionParam - Post-action
   */
  switchToState (context, key, preActionParam, postActionParam) {
    let preAction;
    if (null == preActionParam) {
      preAction = function () { }
    }
    else {
      preAction = preActionParam;
    }
    let postAction;
    if (null == postActionParam) {
      postAction = function () { }
    }
    else {
      postAction = postActionParam;
    }
    if ((null == context) && (null == key)) {
      console.error('switchToState called with no context and no key');
      debugger; // eslint-disable-line no-debugger
      throw 'switchToState with no context/key';
    }
    else if (null == key) { // && (null != context)
      let k = this.getStartKey(context);
      this._switchToState(context, k, preAction, postAction);
    }
    else if (null == context) { // && (null != key)
      this._switchToKey(key, preAction, postAction);
    }
    else { // (null != context) && (null != key)
      this._switchToState(context, key, preAction, postAction);
    }
  }

  /**
   * Switch to the specified context
   * 
   * @param {!string} context - New context to switch to
   * @param {?actionCallback} preActionParam - Pre-action
   * @param {?actionCallback} postActionParam - Post-action
   */
  switchToContext (context, preActionParam, postActionParam) {
    this.switchToState(context, null, preActionParam, postActionParam);
  }

  /**
   * Switch to the state of the specified key while remaining in the same context
   * 
   * @param {!string} key - New state key
   * @param {?actionCallback} preActionParam - Pre-action
   * @param {?actionCallback} postActionParam - Post-action
   */
  switchToKey (key, preActionParam, postActionParam) {
    this.switchToState(null, key, preActionParam, postActionParam);
  }

  /**
   * Consider the current context is completed, switch to the next one
   * 
   * @param {?actionCallback} preActionParam - Pre-action
   * @param {?actionCallback} postActionParam - Post-action
   */
  switchToNextContext (preActionParam, postActionParam) {
    let nextContext;
    if (null == this._stateContext) {
      nextContext = this.startContext;
    }
    else {
      nextContext = this.getNextContext(this.stateContext);
    }
    this.switchToContext(nextContext, preActionParam, postActionParam);
  }
}


/**
 * Abstract pulse component with an initialization phase
 *
 * Available contexts: Initialization, Reset, Initialized
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> Initialized:Standard
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Reset flow: Initialized:Standard -> Reset:Initializing -> Initialized:Standard
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - Initialized:Standard - {@link module:state~StaticState}
 * - *:Error - {@link module:state~ErrorState}
 * 
 * @extends module:pulseComponent~PulseStateComponent
 * 
* @graph Initialized_ContextFlow
@g 
@g      Initialized component: context flow
@g 
@g         +----------------+     +-------------+
@g     ==> | Initialization | ==> | Initialized |
@g         +----------------+     +-------------+
@g                                  ^
@g                                  H
@g                                  H
@g         +----------------+       H
@g     ..> |     Reset      | ======#
@g         +----------------+
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
 */
class PulseInitializedComponent extends PulseStateComponent {
  /**
   * Constructor
   * 
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);

    self._errorMessage = '';
    return self;
  }

  /**
   * @override
   */
  get startContext () {
    return 'Initialization';
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @return {!string} key
   */
  getStartKey (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'Initializing';
      case 'Initialized':
        return 'Standard';
    }
  }

  /**
   * @override
   */
  getNextContext (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'Initialized';
      case 'Initialized':
        console.log(`No next context for ${context}`);
        debugger; // eslint-disable-line no-debugger
        throw 'No next context';
    }
  }

  defineState (context, key) {
    switch (context) {
      case 'BeforeDestructionState':
        return new state.BeforeDestructionState(context, key, this);
      case 'Initialized':
        return new state.StaticState(context, key, this);
      default: {
        switch (key) {
          case 'Initializing':
            switch (context) {
              case 'Initialization':
                return new state.InitialState(context, key, this);
              case 'Reset':
                return new state.ResetState(context, key, this);
              default:
                console.error(`State not defined for context=${context} and key=${key}`);
                debugger; // eslint-disable-line no-debugger
                throw 'State not defined';
            }
          case 'Error':
            return new state.ErrorState(context, key, this);
          default:
            console.error(`State not defined for context=${context} and key=${key}`);
            debugger; // eslint-disable-line no-debugger
            throw 'State not defined';
        }
      }
    }
  }

  /**
   * Method to override by the inherited class
   *
   * @override
   */
  initialize () { // To override
    if (new.target === PulseSingleRequestComponent) throw TypeError('initialize of abstract class PulseInitializedComponent');
  }

  /**
   * Clear anything that was done during intialization, so that initialize can be called once again.
   * Remove all the dispatchers and listeners.
   * Please note that no state switch is done here
   */
  clearInitialization () {
    // Remove all the listeners 
    eventBus.EventBus.removeEventListenerByScope(this);
  }

  /**
   * Check if the component is initialized, meaning its state is defined and not 'initial' or 'init_error' - means initialize () has been called.
   *
   * @return {boolean} The component is initialized
   */
  isInitialized () {
    return this.isStarted && (this.stateContext != 'Initialization') && (this.stateContext != 'Reset');
  }

  /**
   * @override
   */
  connectedCallback () {
    super.connectedCallback();
    if (!this.isStarted) {
      this.start();
    }
  }

  /**
   * Callback that is called when the custom element is disconnected from the DOM document
   * return true if DOM should be destroyed and will never come again
   */
  disconnectedCallback () {
    if (this.isStarted) {
      let disableDeleteElements = $(this.element).hasClass('disableDeleteWhenDisconnect');
      //if (disableDeleteElements.length == 0) {
      if (!disableDeleteElements) {
        if (this._fullDeleteWhenDisconnect) {
          // BUG ON Chrome
          // could be if (!navigator.userAgent.includes('Chrome')) { // Bug on Chrome - remove
          if (this.isInitialized()) {
            this.clearInitialization(); // To reset listeners

            super.disconnectedCallback();

            this.switchToState('BeforeDestructionState', 'BeforeDestructionState');

            this._element = null; // remove reference to class to help garbage collector
            return true;
          }
        }
      }
    }
    super.disconnectedCallback();
    return false; // can come back in DOM (re-order list...)
  }

  /**
   * Add the class 'pulse-component-error' to the component.
   * Used by the error state
   */
  enterErrorState () {
    this.addClass('pulse-component-error');
  }

  /**
   * Remove the display message and remove the 'pulse-component-error' class from the component.
   * Used by the error state
   */
  exitErrorState () {
    this.removeClass('pulse-component-error');
  }

  /**
   * Reset the component itself. Set the next state at the end of the method
   */
  reset () {
    this.switchToNextContext();
  }

  /**
   * Error message that is set by the setError method
   * 
   * @return {string} error message
   */
  get errorMessage () {
    return this._errorMessage;
  }

  /**
  * Set an error on the component without displaying it
  * 
  * @param {string} message - Error message to set
  */
  setError (message) {
    this._errorMessage = message;
  }

  /**
   * Show the error that has been previously stored
   */
  showError () {
    this.displayError(this.errorMessage);
  }

  /**
   * Display the error message
   * To be overridden by the sub-class
   *
   * @param {string} message - Error message to display
   */
  displayError (message) { // To override
    if (new.target === PulseInitializedComponent) throw TypeError('displayError of abstract class PulseInitializedComponent');
  }

  /**
   * Stop displaying the error message
   * To be overridden by the sub-class
   */
  removeError () { // To override
    if (new.target === PulseInitializedComponent) throw TypeError('removeError of abstract class PulseInitializedComponent');
  }

  /**
   * (Re-)start loading the component.
   * Switch to state 'reset' or 'initial' or 'reload'
   * whether the component has already been initialized or not
   */
  start () {
    if (this.isInitialized()) { // including 'Stop' Context
      this.switchToContext('Reset');
    }
    else {
      this.switchToContext(this.startContext);
    }
  }

  /**
   * Default event callback in case a config is updated: (re-)start the component
   * 
   * @param {*} event 
   */
  onConfigChange (event) {
    // Default = do nothing
    // Example :
    //if ( event.target.config == 'myConfig')
    //  this.start();
  }
}

/**
 * Abstract pulse component for components that potentially run Ajax requests
 *
 * @extends module:pulseComponent~PulseInitializedComponent
 * 
* @graph Request_StateFlow
@g 
@g        Request (Load, Normal, Reload, NotAvailable...) context: state flow
@g 
@g 
@g           +---------------------------------------------------+
@g           |                                                   |
@g           |                                                   |
@g           |    +----------------------------------------------+-----------------+
@g           |    |                                              |                 |
@g           |    |                                              |                 |
@g           |    |    +-----------------------+                 |                 |
@g           v    v    |                       v                 |                 |
@g         +-------------+     +-------+     +-----------+     +----------------+  |
@g     ==> |             | --> |       | --> |           | --> | TransientError |  |
@g         |             |     |       |     |           |     +----------------+  |
@g         |             |     |       |     |           |       ^                 |
@g         |   Loading   | <-- | Delay | <-- | Temporary |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       | -+  |           | ------+-----------------+
@g         +-------------+     +-------+  |  +-----------+       |
@g           H                            |                      |
@g           H                            +----------------------+
@g           v
 */
class PulseRequestComponent extends PulseInitializedComponent {
  /**
   * Constructor
   * 
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    self.states = undefined; // Abstract
    self._timeout = undefined;
    self._defaultDelayRate = 10000; // 10s
    self._defaultTransientErrorDelay = 3 * 60 * 1000; // 3 minutes
    return self;
  }

  /**
   * Timeout for the ajax requests. Default is undefined.
   *
   * @return {number} Timeout in ms
   */
  get timeout () {
    return this._timeout;
  }
  /**
   * Set the timeout of the ajax requests
   *
   * @param {number} timeout - Timeout in ms
   */
  set timeout (timeout) {
    this._timeout = timeout;
  }

  /**
   * Delay in ms to wait in case of a delay error.
   * Default is 10s.
   *
   * @return {number} Delay rate in ms
   */
  get delayRate () {
    return this._defaultDelayRate;
  }

  /**
   * Delay in ms before switching to a transient error.
   * Default is 5 minutes.
   *
   * @return {number} Delay in ms
   */
  get transientErrorDelay () {
    return Number(this.getConfigOrAttribute('stopRefreshingRate.freezeMinutes', this._defaultTransientErrorDelay / 60 / 1000)) * 60 * 1000;
  }

  /**
   * Url to use by the Ajax request.
   * To be overridden
   *
   * @return {string} Url to use in the ajax request
   */
  get url () { // To override
    if (new.target === PulseRequestComponent) throw TypeError('url of abstract class PulseRequestComponent');
  }

  /**
   * Add the CSS class 'pulse-component-warning' in case the component enters a TransientErrorState
   */
  enterTransientErrorState () {
    this.addClass('pulse-component-warning');
  }

  /**
   * Remove the CSS class 'pulse-component-warning' and the error message in case the component exits a TransientErrorState
   */
  exitTransientErrorState () {
    this.removeClass('pulse-component-warning');
  }

  /**
   * Do nothing special in case of reload.
   * To be overridden if necessary.
   */
  beforeReload () {
    // Default: do nothing special
  }

  /**
   * Method that is called when the next context is loaded.
   * To be overridden
   *
   * @param {Object} data - Ajax request response
   */
  refresh (data) { // To override
    if (new.target === PulseRequestComponent) throw TypeError('refresh of abstract class PulseRequestComponent');
  }

  /**
   * Method that is called in case of Ajax request success.
   * 
   * @param {Object} data 
   */
  manageSuccess (data) {
    this.switchToNextContext(() => this.refresh(data));
  }

  /**
   * Method that is called in case the Ajax request returns an error.
   * The Status property of the returned answer is processed by the manageErrorStatus methods.
   *
   * @param {Object} data - Ajax error response
   */
  manageError (data) {
    if (typeof data === 'undefined') {
      console.error('manageError: data is undefined');
      this.switchToKey('Error', () => this.displayError('undefined error data'), () => this.removeError());
      return;
    }
    let status = data.Status;
    if (typeof status === 'undefined') {
      console.error('manageError: data.Status is undefined');
      this.switchToKey('Error', () => this.displayError('undefined error data status'), () => this.removeError());
      return;
    }

    // New error status
    if (this.manageErrorStatus(status, data.ErrorMessage)) {
      return;
    }

    console.error(`manageError: data status ${status} is unknown, message=${data.ErrorMessage}`);
    let errorMessage;
    if (typeof (status) != 'undefined') {
      errorMessage = `unknown status ${status}, ${data.ErrorMessage}`;
    }
    else {
      errorMessage = data.ErrorMessage;
    }
    this.switchToKey('Error', () => this.displayError(errorMessage, () => this.removeError()));
  }

  /**
   * Retry immediately the Ajax request.
   * 
   * @param {string} message - Error message
   */
  retryImmediately (message) {
    if (this.stateKey == 'TransientError') {
      this.switchToKey('TransientError', () => this.displayError(message), () => this.removeError());
    }
    else {
      this.switchToKey('Temporary', () => this.setError(message), () => this.setError(''));
    }
  }

  /**
   * Retry with a delay the Ajax request.
   * 
   * @param {string} message - Error message
   */
  retryWithDelay (message) {
    if (this.stateKey == 'TransientError') {
      this.switchToKey('TransientError', () => this.displayError(message), () => this.removeError());
    }
    else {
      this.switchToKey('Delay', () => this.setError(message), () => this.setError(''));
    }
  }

  /**
   * Default method to manage the new error status
   * To be overridden in case of a non-standard behavior of the component.
   *
   * @param {string} status - Error response status
   * @param {string} message - Error response message
   * @return {boolean} The status was processed
   */
  manageErrorStatus (status, message) {
    switch (status) {
      case 'AuthorizationError': {
        if (pulseLogin.tokenNeedRefresh()) {
          pulseLogin.refreshToken();

          // Delayed display : (should never happen excepted maybe in checklogin)
          this.retryWithDelay('Authentication Error. Please retry');
        }
        else {
          pulseConfig.setGlobal('loginError', 'Authentication Error. Please retry');
          // Clean all cookies linked to login
          pulseLogin.cleanLoginRole();

          // Goto page login with an error message to be displayed
          if (!pulseConfig.isLoginPage()) { // If not in page login
            pulseConfig.goToPageLogin();
            return true;
          }
        }
      } break;
      case 'MissingConfiguration': {
        // Send Message to display on top
        let messageInfo = {
          'id': 'WARNING_MISSING_INFO',
          'level': 'warning',
          'clickToClose': true,
          'time': 45, // seconds to display message
          'message': pulseConfig.pulseTranslate('missingconfiguration', 'Missing configuration')
            + ': ' + message + ' \r\n'
            + pulseConfig.pulseTranslate('contactsupport',
              'Please contact the support team'),
          'internalLAT': 'status:' + status + '. Full message: ' + message
            + '(' + this.element.tagName + ')'
        };
        eventBus.EventBus.dispatchToAll('showMessageSignal', messageInfo);

        this.switchToKey('Error', () => this.displayError(message), () => this.removeError());
        return true;
      }
      case 'WrongRequestParameter':
      case 'UnexpectedError': {
        // Send Message to display on top
        let messageInfo = {
          'id': 'ERROR_CALL_SUPPORT',
          'level': 'error', // or 'warning', ?
          'clickToClose': true,
          'time': 45, // seconds to display message
          'message': 'ERROR : ' + pulseConfig.pulseTranslate('contactsupport',
            'please contact the support team'),
          'internalLAT': 'status:' + status + '. Full message : ' + message
            + '(' + this.element.tagName + ')'
        };
        eventBus.EventBus.dispatchToAll('showMessageSignal', messageInfo);

        this.switchToKey('Error', () => this.displayError(message), () => this.removeError());
        return true;
      }
      case 'NotApplicable':
        this.manageNotApplicable();
        return true;
      case 'ProcessingDelay':
        this.retryWithDelay(message);
        return true;
      case 'TransientProcessError':
      case 'Stale':
        this.retryImmediately(message);
        return true;
      case 'DatabaseConnectionError': { // = database unavailable
        // Stop all refresh :
        let target = {
          //url: url,
          source: this.element.tagName,
          when: new Date()
        };
        eventBus.EventBus.dispatchToAll('databaseProbablyDisconnected', target);

        if (!this.element.tagName.toUpperCase().includes('X-CHECK') // if ((this.element.tagName != 'X-CHECKSERVERACCESS')
          && (this.element.tagName.toUpperCase() != 'X-MESSAGE')) {
          this.switchToKey('Error', () => this.displayError(message), () => this.removeError());
        }
        else {
          // DO NOT DO this !!! Next context is not available if context = stop
          //this.switchToNextContext(() => this.refresh());
          this.switchToContext('Normal'); // Do not use "start" because it could not exit loading state
        }
        return true;
      }
      case 'PulseMaintenance': { // = maintenance is started (server may be off soon)
        // Stop all refresh :
        let target = {
          //url: url,
          source: this.element.tagName,
          when: new Date()
        };

        eventBus.EventBus.dispatchToAll('pulseMaintenance', target);

        if (!this.element.tagName.toUpperCase().includes('X-CHECK') // if ((this.element.tagName != 'X-CHECKSERVERACCESS')
          && (this.element.tagName.toUpperCase() != 'X-MESSAGE')) {
          // With empty message
          this.switchToKey('Error', () => this.displayError(''), () => this.removeError());
        }
        else { // == Ignore ???
          // DO NOT DO this !!! Next context is not available if context = stop
          //this.switchToNextContext(() => this.refresh());
          //if (this.element.tagName == 'X-CHECKSERVERACCESS') {
            this.switchToContext('Normal'); // Else can stay in Loading context and never check again
          //}
        }
        return true;
      }
      default:
        return false;
    }
  }

  /**
   * Manage the case when the component data does not apply
   * Switch by default to the state 'NotApplicable' and add the class pulse-component-not-applicable
   */
  manageNotApplicable () {
    this.addClass('pulse-component-not-applicable');
    this.switchToContext('NotApplicable');
  }

  /**
   * Manage an Old NO_DATA error status.
   * By default, run the retryWithDelay method, but override this method in case one the following services is used:
   * GetListOfShiftSlotService, GetMachineStatusByIWP, GetShiftAround/After/Before, GetFieldLegendsForMachine,
   * GetMachinePerformanceDay(V2), GetModeColor, GetMachineStatus, GetReasonSlots(V3)
   * 
   * @param {string} message - Error message
   */
  manageOldNoData (message) {
    // Default: delay
    this.retryWithDelay(message);
    // But:
    // - GetListOfShiftSlotService: not applicable
    // - GetMachineStatusByIWP: not applicable
    // - GetShiftAround/After/Before: not applicable
    // - GetFieldLegendsForMachine: not applicable
    // - GetMachinePerformanceDay(V2): delay or permanent
    // - GetModeColor: delay or permanent
    // - GetMachineStatus: delay or permament
    // - GetReasonSlots(V3): delay or permanent
  }

  /**
   * Manage an Ajax failure.
   * Either retry with delay in case of a time out or switch to an 'error' state else
   *
   * @param {boolean} isTimeout - Time out
   * @param {number} xhrStatus - XMLHttpRequest.status of the Ajax request
   */
  manageFailure (isTimeout, xhrStatus) {
    if (isTimeout) {
      this.retryWithDelay('time out');
    }
    else {
      let message = pulseService.getAjaxErrorMessage(xhrStatus);
      if ((xhrStatus == '0') || (xhrStatus == '500') || (xhrStatus == '504')) {
        this.retryWithDelay(message);
      }
      else {
        this.switchToKey('Error', () => this.displayError(message), () => this.removeError());
      }
    }
  }

  /**
   * Method that is called when the 'loading' state is entered.
   * By default add the css class 'pulse-component-loading'.
   */
  startLoading () {
    this.addClass('pulse-component-loading');
  }

  /**
   * Method that is called when the 'loading' state is exited.
   * By default remove the css class 'pulse-component-loading'.
   */
  endLoading () {
    this.removeClass('pulse-component-loading');
  }

  /**
   * Default event callback in case server is off : STOP the component
   * 
   * @param {*} event 
   */
  onServerOffStopRefresh (event) {
    if (!this.element.tagName.toUpperCase().includes('X-CHECK')) {// if (this.element.tagName != 'X-CHECKSERVERACCESS') {
      //if (this.stateContext != 'Loaded') {
      this.displayError(''); // Empty to hide all texts
      this._serverIsOff = true;
      this.switchToContext('Stop');
      //}
    }
  }

  /**
   * Default event callback in case server is available: (re-)start the component
   * 
   * @param {*} event 
   */
  onServerAvailableChange (event) {
    // NOT NEEDED because of _serverIsOff 
    //if (!this.element.tagName.toUpperCase().includes('X-CHECK')) { // if (this.element.tagName != 'X-CHECKSERVERACCESS') {
    if (true == this._serverIsOff) {
      this._serverIsOff = false;
      this.start();
    }
    //}
  }

}

/**
 * Abstract class for Pulse components that run a single Ajax request during the loading phase
 *
 * Available contexts: Initialization, Reset, Load, Loaded, Reload, Stop, NotApplicable
 *
 * Available states: Initializing, Error, Loading, Standard, Temporary, Delay, TransientError, Error
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> Load:Loading -> Loaded:Standard
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Ajax transient error flow: Initialization:Initializing -> Load:Loading -> Load:Temporary -> ... -> Load:TransientError
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - Loaded:Standard - {@link module:state~StaticState}
 * - Stop:Standard - {@link module:state~StopState}
 * - Load:Loading - {@link module:state~LoadState}
 * - Reload:Loading - {@link module:state~ReloadState}
 * - *:Temporary - {@link module:state~TemporaryState}
 * - *:Delay - {@link module:state~DelayState}
 * - *:TransientError - {@link module:state~TransientErrorState}
 * - NotApplicable:Standard - {@link module:state~NotApplicableState}
 * - *:Error - {@link module:state~ErrorState}
 * 
 * @extends module:pulseComponent~PulseRequestComponent
 * 
* @graph SingleRequest_ContextFlow
@g 
@g             Single request component: context flow
@g 
@g                                +---------------+
@g                                | NotApplicable |
@g                                +---------------+
@g                                  ^
@g                                  |
@g                                  |
@g         +----------------+     +---------------+     +--------+
@g     ==> | Initialization | ==> |     Load      | ==> | Loaded |
@g         +----------------+     +---------------+     +--------+
@g                                  ^                     ^
@g                                  H                     H
@g                                  H                     H
@g         +----------------+       H                     H
@g     ..> |     Reset      | ======#                     H
@g         +----------------+                             H
@g         +----------------+     +---------------+       H
@g     ..> |      Stop      | --> |    Reload     | ======#
@g         +----------------+     +---------------+
@g                                  ^
@g                                  :
@g                                  :
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
* @graph Request_StateFlow
@g 
@g        Request (Load, Normal, Reload, NotAvailable...) context: state flow
@g 
@g 
@g           +---------------------------------------------------+
@g           |                                                   |
@g           |                                                   |
@g           |    +----------------------------------------------+-----------------+
@g           |    |                                              |                 |
@g           |    |                                              |                 |
@g           |    |    +-----------------------+                 |                 |
@g           v    v    |                       v                 |                 |
@g         +-------------+     +-------+     +-----------+     +----------------+  |
@g     ==> |             | --> |       | --> |           | --> | TransientError |  |
@g         |             |     |       |     |           |     +----------------+  |
@g         |             |     |       |     |           |       ^                 |
@g         |   Loading   | <-- | Delay | <-- | Temporary |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       | -+  |           | ------+-----------------+
@g         +-------------+     +-------+  |  +-----------+       |
@g           H                            |                      |
@g           H                            +----------------------+
@g           v
 */
class PulseSingleRequestComponent extends PulseRequestComponent {
  /**
   * Constructor
   *
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    return self;
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @return {!string} key
   */
  getStartKey (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'Initializing';
      case 'Load':
      case 'Reload':
        return 'Loading';
      case 'Loaded':
      case 'Stop':
      case 'NotApplicable':
        return 'Standard';
    }
  }

  /**
   * @override
   */
  getNextContext (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'Load';
      case 'Load':
      case 'Reload':
        return 'Loaded';
      case 'Loaded':
      case 'Stop':
      case 'NotApplicable':
        console.error(`No next context for ${context}`);
        debugger; // eslint-disable-line no-debugger
        throw 'No next context';
    }
  }

  defineState (context, key) {
    switch (context) {
      case 'BeforeDestructionState':
        return new state.BeforeDestructionState(context, key, this);
      case 'Loaded':
        return new state.StaticState(context, key, this);
      case 'Stop':
        return new state.StopState(context, key, this);
      case 'NotApplicable':
        return new state.NotApplicableState(context, key, this);
      default: {
        switch (key) {
          case 'Initializing':
            switch (context) {
              case 'Initialization':
                return new state.InitialState(context, key, this);
              case 'Reset':
                return new state.ResetState(context, key, this);
              default:
                console.error(`State not defined for context=${context} and key=${key}`);
                debugger; // eslint-disable-line no-debugger
                throw 'State not defined';
            }
          case 'Error':
            return new state.ErrorState(context, key, this);
          case 'Loading':
            switch (context) {
              case 'Load':
                return new state.LoadState(context, key, this);
              case 'Reload':
                return new state.ReloadState(context, key, this);
              default:
                console.error(`State not defined for context=${context} and key=${key}`);
                debugger; // eslint-disable-line no-debugger
                throw 'State not defined';
            }
          case 'Temporary':
            return new state.TemporaryState(c => 1000., context, key, this);
          case 'Delay':
            return new state.DelayState(c => c.delayRate, context, key, this);
          case 'TransientError':
            return new state.TransientErrorState(c => c.delayRate, context, key, this);
          default:
            console.error(`State not defined for context=${context} and key=${key}`);
            debugger; // eslint-disable-line no-debugger
            throw 'State not defined: ' + key;
        }
      }
    }
  }

  enterContext (context) {
    switch (context) {
      case 'Load':
      case 'Reload':
        this.startLoading();
        break;
      default:
        break;
    }
    return super.enterContext(context);
  }

  exitContext (context) {
    switch (context) {
      case 'Load':
      case 'Reload':
        this.endLoading();
        break;
      default:
        break;
    }
    return super.exitContext(context);
  }
}

/**
 * Abstract class for Pulse components that run an ajax request regularly, each time it needs to be refreshed
 *
 * Available contexts: Initialization, Reset, Load, Normal, Reload, Stop, NotAvailable, NotApplicable
 *
 * Available states: Initializing, Error, Loading, Standard, Temporary, Delay, TransientError, Error
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> Load:Loading -> Normal:Loading -> Normal:Loading -> ...
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Ajax transient error flow: Normal:Loading -> Normal:Temporary -> Normal:Temporary -> ... -> Normal:TransientError
 * Ajax delay error flow: Normal:Loading -> Normal:Delay -> Normal:Delay -> ... -> Normal:TransientError
 * Not available flow: Normal:Loading -> NotAvailable:Loading -> ... -> Normal:Loading
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - Stop:Standard - {@link module:state~StopState}
 * - Normal:Loading - {@link module:state~NormalRequestState}
 * - NotAvailable:Loading - {@link module:state~NotAvailableState}
 * - Load:Loading - {@link module:state~LoadState}
 * - Reload:Loading - {@link module:state~ReloadState}
 * - *:Temporary - {@link module:state~TemporaryState}
 * - *:Delay - {@link module:state~DelayState}
 * - *:TransientError - {@link module:state~TransientErrorState}
 * - NotApplicable:Standard - {@link module:state~NotApplicableState}
 * - *:Error - {@link module:state~ErrorState}
 * 
 * @extends module:pulseComponent~PulseRequestComponent
 * 
* @graph Refreshing_ContextFlow
@g 
@g                                   Refreshing component: context flow
@g 
@g 
@g                                       +--------------------------------------------------+
@g                                       |                                                  |
@g                                       |                                                  |
@g                                       |              #====#         +----------+         |
@g                                       |              v    H         v          |         v
@g              +----------------+     +--------+     +--------+     +--------------+     +---------------+
@g          ==> | Initialization | ==> |        | ==> |        | --> |              | --> | NotApplicable |
@g              +----------------+     |        |     |        |     |              |     +---------------+
@g                                     |        |     |        |     |              |
@g                                     |  Load  |     | Normal | <== | NotAvailable |
@g                                     |        |     |        |     |              |
@g              +----------------+     |        |     |        |     |              |
@g          ..> |     Reset      | ==> |        |     |        |     |              |
@g              +----------------+     +--------+     +--------+     +--------------+
@g                                       |              ^              ^
@g   +-----------------------------------+              H              |
@g   |                                                  H              |
@g   |          +----------------+     +--------+       H              |
@g   |      ..> |      Stop      | --> | Reload | ======#              |
@g   |          +----------------+     +--------+                      |
@g   |                                   ^                             |
@g   |                                   :                             |
@g   |                                   :                             |
@g   |                                                                 |
@g   |                                                                 |
@g   |                                                                 |
@g   |                                                                 |
@g   +-----------------------------------------------------------------+
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
* @graph Request_StateFlow
@g 
@g        Request (Load, Normal, Reload, NotAvailable...) context: state flow
@g 
@g 
@g           +---------------------------------------------------+
@g           |                                                   |
@g           |                                                   |
@g           |    +----------------------------------------------+-----------------+
@g           |    |                                              |                 |
@g           |    |                                              |                 |
@g           |    |    +-----------------------+                 |                 |
@g           v    v    |                       v                 |                 |
@g         +-------------+     +-------+     +-----------+     +----------------+  |
@g     ==> |             | --> |       | --> |           | --> | TransientError |  |
@g         |             |     |       |     |           |     +----------------+  |
@g         |             |     |       |     |           |       ^                 |
@g         |   Loading   | <-- | Delay | <-- | Temporary |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       | -+  |           | ------+-----------------+
@g         +-------------+     +-------+  |  +-----------+       |
@g           H                            |                      |
@g           H                            +----------------------+
@g           v
 */
class PulseRefreshingComponent extends PulseRequestComponent {
  /**
   * Constructor
   * 
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    self._refreshRate = undefined;
    return self;
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @return {!string} key
   */
  getStartKey (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'Initializing';
      case 'Load':
      case 'Reload':
      case 'Normal':
      case 'NotAvailable':
        return 'Loading';
      case 'Stop':
      case 'NotApplicable':
        return 'Standard';
    }
  }

  /**
   * @override
   */
  getNextContext (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'Load';
      case 'Load':
      case 'Reload':
      case 'Normal':
      case 'NotAvailable':
        return 'Normal';
      case 'Stop':
      case 'NotApplicable':
        console.error(`No next context for ${context}`);
        debugger; // eslint-disable-line no-debugger
        throw 'No next context';
    }
  }

  defineState (context, key) {
    switch (context) {
      case 'BeforeDestructionState':
        return new state.BeforeDestructionState(context, key, this);
      case 'Stop':
        return new state.StopState(context, key, this);
      case 'NotApplicable':
        return new state.NotApplicableState(context, key, this);
      default: {
        switch (key) {
          case 'Initializing':
            switch (context) {
              case 'Initialization':
                return new state.InitialState(context, key, this);
              case 'Reset':
                return new state.ResetState(context, key, this);
              default:
                console.error(`State not defined for context=${context} and key=${key}`);
                debugger; // eslint-disable-line no-debugger
                throw 'State not defined';
            }
          case 'Error':
            return new state.ErrorState(context, key, this);
          case 'Loading':
            switch (context) {
              case 'Load':
                return new state.LoadState(context, key, this);
              case 'Reload':
                return new state.ReloadState(context, key, this);
              case 'Normal':
                return new state.NormalRequestState(c => c.refreshRate, context, key, this);
              case 'NotAvailable':
                return new state.NotAvailableState(c => c.refreshRate, context, key, this);
              default:
                console.error(`State not defined for context=${context} and key=${key}`);
                debugger; // eslint-disable-line no-debugger
                throw 'State not defined';
            }
          case 'Temporary':
            return new state.TemporaryState(c => 1000., context, key, this);
          case 'Delay':
            return new state.DelayState(c => c.delayRate, context, key, this);
          case 'TransientError':
            return new state.TransientErrorState(c => c.delayRate, context, key, this);
          default:
            console.error(`State not defined for context=${context} and key=${key}`);
            debugger; // eslint-disable-line no-debugger
            throw 'State not defined';
        }
      }
    }
  }

  enterContext (context) {
    switch (context) {
      case 'Load':
      case 'Reload':
        this.startLoading();
        break;
      default:
        break;
    }
    return super.enterContext(context);
  }

  exitContext (context) {
    switch (context) {
      case 'Load':
      case 'Reload':
        this.endLoading();
        break;
      default:
        break;
    }
    return super.exitContext(context);
  }

  /**
   * Refresh rate in ms
   *
   * @return {number} Refresh rate in ms
   */
  get refreshRate () {
    return this._refreshRate;
  }
  /**
   * Set the refresh rate
   *
   * @param {number} refreshRate - Refresh rate in ms
   */
  set refreshRate (refreshRate) {
    this._refreshRate = refreshRate;
  }

}

/**
 * Abstract pulse component with an initialization phase and a parameter validation phase
 *
 * Available contexts: Initialization, ParamValidation, Reset, Initialized
 * Available states: Initializing, Validating, Error, Standard
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> ParamValidation:Validating -> Initialized:Standard
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Reset flow: Initialized:Standard -> Reset:Initializing -> ParamValidation:Validating -> Initialized:Standard
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - ParamValidation:Validating - {@link module:state~ParamValidationTimeoutState}
 * - Initialized:Standard - {@link module:state~StaticState}
 * - *:Error - {@link module:state~ErrorState}
 * 
 * @extends module:pulseComponent~PulseInitializedComponent
 * 
* @graph ParamInitialized_ContextFlow
@g 
@g                  Initialized component: context flow
@g 
@g         +----------------+     +-----------------+     +-------------+
@g     ==> | Initialization | ==> | ParamValidation | ==> | Initialized |
@g         +----------------+     +-----------------+     +-------------+
@g                                  ^
@g                                  H
@g                                  H
@g         +----------------+       H
@g     ..> |     Reset      | ======#
@g         +----------------+
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
* @graph ParamValidation_StateFlow
@g 
@g  ParamValidation context: state flow
@g 
@g             +------------+
@g         ==> | Validating | ==>
@g             +------------+
@g               |
@g               |
@g               v
@g             +------------+
@g             |   Error    |
@g             +------------+
 */
class PulseParamInitializedComponent extends PulseInitializedComponent {
  /**
   * Constructor
   *
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    return self;
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @return {!string} key
   */
  getStartKey (context) {
    switch (context) {
      case 'ParamValidation':
        return 'Validating';
      default:
        return super.getStartKey(context);
    }
  }

  /**
   * @override
   */
  getNextContext (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'ParamValidation';
      case 'ParamValidation':
        return 'Initialized';
      default:
        return super.getNextContext(context);
    }
  }

  defineState (context, key) {
    switch (context) {
      case 'BeforeDestructionState':
        return new state.BeforeDestructionState(context, key, this);
      case 'ParamValidation':
        switch (key) {
          case 'Validating':
            return new state.ParamValidationTimeoutState(c => 30000., context, key, this); // timeout = 30s
          case 'Error':
            return new state.ErrorState(context, key, this);
          default:
            console.error(`State not defined for context=${context} and key=${key}`);
            debugger; // eslint-disable-line no-debugger
            throw 'State not defined';
        }
      default:
        return super.defineState(context, key);
    }
  }

  enterContext (context) {
    if ((context == 'ParamValidation') && this.startLoading) {
      this.startLoading();
    }
    return super.enterContext(context);
  }

  exitContext (context) {
    if ((context == 'ParamValidation') && this.endLoading) {
      this.endLoading();
    }
    return super.exitContext(context);
  }
}

/**
 * Abstract class for Pulse components with a (event) parameter validation phase
 * that run a single Ajax request during the loading phase
 *
 * Available contexts: Initialization, ParamValidation, Reset, Load, Loaded, Reload, Stop, NotApplicable
 *
 * Available states: Initializing, Error, Validating, Loading, Standard, Temporary, Delay, TransientError, Error
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> ParamValidation:Validating -> Load:Loading -> Loaded:Standard
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Ajax transient error flow: Initialization:Initializing -> Load:Loading -> Load:Temporary -> ... -> Load:TransientError
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - ParamValidation:Validating - {@link module:state~ParamValidationTimeoutState}
 * - Loaded:Standard - {@link module:state~StaticState}
 * - Stop:Standard - {@link module:state~StopState}
 * - Load:Loading - {@link module:state~LoadState}
 * - Reload:Loading - {@link module:state~ReloadState}
 * - *:Temporary - {@link module:state~TemporaryState}
 * - *:Delay - {@link module:state~DelayState}
 * - *:TransientError - {@link module:state~TransientErrorState}
 * - NotApplicable:Standard - {@link module:state~NotApplicableState}
 * - *:Error - {@link module:state~ErrorState}
 * 
 * @extends module:pulseComponent~PulseSingleRequestComponent
 * 
* @graph ParamSingleRequest_ContextFlow
@g 
@g        Single request and param autoPath single request component: context flow
@g 
@g         +----------------+     +-----------------+     +---------------+     +--------+
@g     ==> | Initialization | ==> | ParamValidation | ==> |     Load      | ==> | Loaded |
@g         +----------------+     +-----------------+     +---------------+     +--------+
@g                                  ^                       |                     ^
@g                                  H                       |                     H
@g                                  H                       v                     H
@g         +----------------+       H                     +---------------+       H
@g     ..> |     Reset      | ======#                     | NotApplicable |       H
@g         +----------------+                             +---------------+       H
@g         +----------------+     +-----------------+                             H
@g     ..> |      Stop      | --> |     Reload      | ============================#
@g         +----------------+     +-----------------+
@g                                  ^
@g                                  :
@g                                  :
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
* @graph ParamValidation_StateFlow
@g 
@g  ParamValidation context: state flow
@g 
@g             +------------+
@g         ==> | Validating | ==>
@g             +------------+
@g               |
@g               |
@g               v
@g             +------------+
@g             |   Error    |
@g             +------------+
* @graph Request_StateFlow
@g 
@g        Request (Load, Normal, Reload, NotAvailable...) context: state flow
@g 
@g 
@g           +---------------------------------------------------+
@g           |                                                   |
@g           |                                                   |
@g           |    +----------------------------------------------+-----------------+
@g           |    |                                              |                 |
@g           |    |                                              |                 |
@g           |    |    +-----------------------+                 |                 |
@g           v    v    |                       v                 |                 |
@g         +-------------+     +-------+     +-----------+     +----------------+  |
@g     ==> |             | --> |       | --> |           | --> | TransientError |  |
@g         |             |     |       |     |           |     +----------------+  |
@g         |             |     |       |     |           |       ^                 |
@g         |   Loading   | <-- | Delay | <-- | Temporary |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       | -+  |           | ------+-----------------+
@g         +-------------+     +-------+  |  +-----------+       |
@g           H                            |                      |
@g           H                            +----------------------+
@g           v
 */
class PulseParamSingleRequestComponent extends PulseSingleRequestComponent {
  /**
   * Constructor
   *
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    return self;
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @return {!string} key
   */
  getStartKey (context) {
    switch (context) {
      case 'ParamValidation':
        return 'Validating';
      default:
        return super.getStartKey(context);
    }
  }

  /**
   * @override
   */
  getNextContext (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'ParamValidation';
      case 'ParamValidation':
        return 'Load';
      default:
        return super.getNextContext(context);
    }
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @param {!string} key - Key
   * @returns {!State} Created states
   */
  defineState (context, key) {
    switch (context) {
      case 'ParamValidation':
        switch (key) {
          case 'Validating':
            return new state.ParamValidationTimeoutState(c => 30000., context, key, this); // timeout = 30s
          case 'Error':
            return new state.ErrorState(context, key, this);
          default:
            console.error(`State not defined for context=${context} and key=${key}`);
            debugger; // eslint-disable-line no-debugger
            throw 'State not defined';
        }
      default:
        return super.defineState(context, key);
    }
  }

  enterContext (context) {
    if (context == 'ParamValidation') {
      this.startLoading();
    }
    return super.enterContext(context);
  }

  exitContext (context) {
    if ((context == 'ParamValidation') && this.endLoading) {
      this.endLoading();
    }
    return super.exitContext(context);
  }
}

/**
 * Abstract class for Pulse components with a (event) parameter validation phase + Path validation is automatic
 * that run a single Ajax request during the loading phase
 *
 * Available contexts: Initialization, ParamValidation, Reset, Load, Loaded, Reload, Stop, NotApplicable
 *
 * Available states: Initializing, Error, Validating, Loading, Standard, Temporary, Delay, TransientError, Error
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> ParamValidation:Validating -> Load:Loading -> Loaded:Standard
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Ajax transient error flow: Initialization:Initializing -> Load:Loading -> Load:Temporary -> ... -> Load:TransientError
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - ParamValidation:Validating - {@link module:state~ParamValidationTimeoutState}
 * - Loaded:Standard - {@link module:state~StaticState}
 * - Stop:Standard - {@link module:state~StopState}
 * - Load:Loading - {@link module:state~LoadState}
 * - Reload:Loading - {@link module:state~ReloadState}
 * - *:Temporary - {@link module:state~TemporaryState}
 * - *:Delay - {@link module:state~DelayState}
 * - *:TransientError - {@link module:state~TransientErrorState}
 * - NotApplicable:Standard - {@link module:state~NotApplicableState}
 * - *:Error - {@link module:state~ErrorState}
 * 
 * @extends module:pulseComponent~PulseParamSingleRequestComponent
 * 
* @graph ParamSingleRequest_ContextFlow
@g 
@g        Single request and param autoPath single request component: context flow
@g 
@g         +----------------+     +-----------------+     +---------------+     +--------+
@g     ==> | Initialization | ==> | ParamValidation | ==> |     Load      | ==> | Loaded |
@g         +----------------+     +-----------------+     +---------------+     +--------+
@g                                  ^                       |                     ^
@g                                  H                       |                     H
@g                                  H                       v                     H
@g         +----------------+       H                     +---------------+       H
@g     ..> |     Reset      | ======#                     | NotApplicable |       H
@g         +----------------+                             +---------------+       H
@g         +----------------+     +-----------------+                             H
@g     ..> |      Stop      | --> |     Reload      | ============================#
@g         +----------------+     +-----------------+
@g                                  ^
@g                                  :
@g                                  :
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
* @graph ParamValidation_StateFlow
@g 
@g  ParamValidation context: state flow
@g 
@g             +------------+
@g         ==> | Validating | ==>
@g             +------------+
@g               |
@g               |
@g               v
@g             +------------+
@g             |   Error    |
@g             +------------+
* @graph Request_StateFlow
@g 
@g        Request (Load, Normal, Reload, NotAvailable...) context: state flow
@g 
@g 
@g           +---------------------------------------------------+
@g           |                                                   |
@g           |                                                   |
@g           |    +----------------------------------------------+-----------------+
@g           |    |                                              |                 |
@g           |    |                                              |                 |
@g           |    |    +-----------------------+                 |                 |
@g           v    v    |                       v                 |                 |
@g         +-------------+     +-------+     +-----------+     +----------------+  |
@g     ==> |             | --> |       | --> |           | --> | TransientError |  |
@g         |             |     |       |     |           |     +----------------+  |
@g         |             |     |       |     |           |       ^                 |
@g         |   Loading   | <-- | Delay | <-- | Temporary |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       | -+  |           | ------+-----------------+
@g         +-------------+     +-------+  |  +-----------+       |
@g           H                            |                      |
@g           H                            +----------------------+
@g           v
 */
class PulseParamAutoPathSingleRequestComponent extends PulseParamSingleRequestComponent {
  /**
   * Constructor
   * 
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    self._path = '';
    return self;
  }

  /**
   * Associated path
   * 
   * @returns {!string} path
   */
  get path () {
    return this._path;
  }

  /**
   * Update the path from the configuration or the attribute
   * 
   * @returns {boolean} the path is defined (not empty and not null)
   */
  updatePathFromConfigOrAttribute () {
    this._path = this.getConfigOrAttribute('path', '');
    return (typeof (this.path) != 'undefined') && ('' != this.path);
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @param {!string} key - Key
   * @returns {!State} Created states
   */
  defineState (context, key) {
    switch (context) {
      case 'ParamValidation':
        switch (key) {
          case 'Validating':
            return new state.ParamAndPathValidationTimeoutState(c => 30000., context, key, this); // timeout = 30s
          default:
            return super.defineState(context, key);
        }
      case 'Initialization':
        switch (key) {
          case 'Initializing':
            return new state.AutoPathInitialState(context, key, this);
          default:
            return super.defineState(context, key);
        }
      default:
        return super.defineState(context, key);
    }
  }

  /**
   * Short Url (with the path) to use in the Ajax request.
   * To be overridden
   *
   * @return {string} Url to use in the ajax request
   */
  getShortUrl () { // To override
    if (new.target === PulseParamAutoPathSingleRequestComponent)
      throw TypeError('url of abstract class PulseParamAutoPathSingleRequestComponent');
  }

  /**
   * Url to use by the Ajax request.
   *
   * @return {!string} Url to use in the ajax request
   */
  get url () {
    console.assert((typeof (this.path) != 'undefined') && ('' != this.path));
    if ((typeof (this.path) == 'undefined') || ('' == this.path)) { // This should not happen: the path should be not empty after the param validation context
      console.error('empty path');
      debugger; // eslint-disable-line no-debugger
      throw 'empty path';
    }
    return this.path + this.getShortUrl();
  }

  /**
   * Default event callback in case a path is updated: (re-)start the component
   * (to go through the param validation state again)
   * 
   * @param {*} event 
   */
  onPathChange (event) {
    this.start();
  }

}

/**
 * Abstract class for Pulse components with a (event) parameter validation phase
 * that run an ajax request regularly, each time it needs to be refreshed
 *
 * Available contexts: Initialization, ParamValidation, Reset, Load, Normal, Reload, Stop, NotAvailable, 
 *
 * Available states: Initializing, Error, Validating, Loading, Standard, Temporary, Delay, TransientError, Error
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> ParamValidation:Validating -> Load:Loading -> Normal:Loading -> Normal:Loading -> ...
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Ajax transient error flow: Normal:Loading -> Normal:Temporary -> Normal:Temporary -> ... -> Normal:TransientError
 * Ajax delay error flow: Normal:Loading -> Normal:Delay -> Normal:Delay -> ... -> Normal:TransientError
 * Not available flow: Normal:Loading -> NotAvailable:Loading -> ... -> Normal:Loading
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - ParamValidation:Validating - {@link module:state~ParamValidationTimeoutState}
 * - Stop:Standard - {@link module:state~StopState}
 * - Normal:Loading - {@link module:state~NormalRequestState}
 * - NotAvailable:Loading - {@link module:state~NotAvailableState}
 * - Load:Loading - {@link module:state~LoadState}
 * - Reload:Loading - {@link module:state~ReloadState}
 * - *:Temporary - {@link module:state~TemporaryState}
 * - *:Delay - {@link module:state~DelayState}
 * - *:TransientError - {@link module:state~TransientErrorState}
 * - NotApplicable:Standard - {@link module:state~NotApplicableState}
 * - *:Error - {@link module:state~ErrorState}
 *
 * @extends module:pulseComponent~PulseRefreshingComponent
 * 
* @graph ParamRefreshing_ContextFlow
@g 
@g                             Refreshing and param autoPath refreshing component: context flow
@g 
@g 
@g                                                          +------------------------------------------------+
@g                                                          |                                                |
@g                                                          |                                                |
@g                                                          |            #====#         +----------+         |
@g                                                          |            v    H         v          |         v
@g         +----------------+     +-----------------+     +------+     +--------+     +--------------+     +---------------+
@g     ==> | Initialization | ==> | ParamValidation | ==> | Load | ==> |        | --> |              | --> | NotApplicable |
@g         +----------------+     +-----------------+     +------+     |        |     |              |     +---------------+
@g                                  ^                       |          |        |     |              |
@g                                  H                       |          | Normal | <== | NotAvailable |
@g                                  H                       |          |        |     |              |
@g         +----------------+       H                       |          |        |     |              |
@g     ..> |     Reset      | ======#                       |          |        |     |              |
@g         +----------------+                               |          +--------+     +--------------+
@g                                                          |            ^              ^
@g                                                          |            H              |
@g                                                          |            H              |
@g         +----------------+     +-----------------+       |            H              |
@g     ..> |      Stop      | --> |     Reload      | ======+============#              |
@g         +----------------+     +-----------------+       |                           |
@g                                  ^                       |                           |
@g                                  :                       +---------------------------+
@g                                  :
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
* @graph ParamValidation_StateFlow
@g 
@g  ParamValidation context: state flow
@g 
@g             +------------+
@g         ==> | Validating | ==>
@g             +------------+
@g               |
@g               |
@g               v
@g             +------------+
@g             |   Error    |
@g             +------------+
* @graph Request_StateFlow
@g 
@g        Request (Load, Normal, Reload, NotAvailable...) context: state flow
@g 
@g 
@g           +---------------------------------------------------+
@g           |                                                   |
@g           |                                                   |
@g           |    +----------------------------------------------+-----------------+
@g           |    |                                              |                 |
@g           |    |                                              |                 |
@g           |    |    +-----------------------+                 |                 |
@g           v    v    |                       v                 |                 |
@g         +-------------+     +-------+     +-----------+     +----------------+  |
@g     ==> |             | --> |       | --> |           | --> | TransientError |  |
@g         |             |     |       |     |           |     +----------------+  |
@g         |             |     |       |     |           |       ^                 |
@g         |   Loading   | <-- | Delay | <-- | Temporary |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       | -+  |           | ------+-----------------+
@g         +-------------+     +-------+  |  +-----------+       |
@g           H                            |                      |
@g           H                            +----------------------+
@g           v
 */
class PulseParamRefreshingComponent extends PulseRefreshingComponent {
  /**
   * Constructor
   *
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    return self;
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @return {!string} key
   */
  getStartKey (context) {
    switch (context) {
      case 'ParamValidation':
        return 'Validating';
      default:
        return super.getStartKey(context);
    }
  }

  /**
   * @override
   */
  getNextContext (context) {
    switch (context) {
      case 'Initialization':
      case 'Reset':
        return 'ParamValidation';
      case 'ParamValidation':
        return 'Load';
      default:
        return super.getNextContext(context);
    }
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @param {!string} key - Key
   * @returns {!State} Created states
   */
  defineState (context, key) {
    switch (context) {
      case 'ParamValidation':
        switch (key) {
          case 'Validating':
            return new state.ParamValidationTimeoutState(c => 30000., context, key, this); // timeout = 30s
          case 'Error':
            return new state.ErrorState(context, key, this);
          default:
            console.error(`State not defined for context=${context} and key=${key}`);
            debugger; // eslint-disable-line no-debugger
            throw 'State not defined';
        }
      default:
        return super.defineState(context, key);
    }
  }

  /**
   * @override
   */
  enterContext (context) {
    if (context == 'ParamValidation') {
      this.startLoading();
    }
    return super.enterContext(context);
  }

  exitContext (context) {
    if ((context == 'ParamValidation') && this.endLoading) {
      this.endLoading();
    }
    return super.exitContext(context);
  }
}


/**
 * Abstract class for Pulse components with a (event) parameter validation phase + Path validation is automatic
 * that run an ajax request regularly, each time it needs to be refreshed
 *
 * Available contexts: Initialization, ParamValidation, Reset, Load, Normal, Reload, Stop, NotAvailable, NotApplicable
 *
 * Available states: Initializing, Error, Validating, Loading, Standard, Temporary, Delay, TransientError, Error
 *
 * Some state flows:
 * Default flow: Initialization:Initializing -> ParamValidation:Validating -> Load:Loading -> Normal:Loading -> Normal:Loading -> ...
 * Initialization error flow: Initialization:Initializing -> Initialization:Error
 * Ajax transient error flow: Normal:Loading -> Normal:Temporary -> Normal:Temporary -> ... -> Normal:TransientError
 * Ajax delay error flow: Normal:Loading -> Normal:Delay -> Normal:Delay -> ... -> Normal:TransientError
 * Not available flow: Normal:Loading -> NotAvailable:Loading -> ... -> Normal:Loading
 *
 * State implementations:
 * - Initialization:Initializing - {@link module:state~InitialState}
 * - Reset:Initializing - {@link module:state~ResetState}
 * - ParamValidation:Validating - {@link module:state~ParamValidationTimeoutState}
 * - Stop:Standard - {@link module:state~StopState}
 * - Normal:Loading - {@link module:state~NormalRequestState}
 * - NotAvailable:Loading - {@link module:state~NotAvailableState}
 * - Load:Loading - {@link module:state~LoadState}
 * - Reload:Loading - {@link module:state~ReloadState}
 * - *:Temporary - {@link module:state~TemporaryState}
 * - *:Delay - {@link module:state~DelayState}
 * - *:TransientError - {@link module:state~TransientErrorState}
 * - NotApplicable:Standard - {@link module:state~NotApplicableState}
 * - *:Error - {@link module:state~ErrorState}
 *
 * @extends module:pulseComponent~PulseRefreshingComponent
 * 
* @graph ParamRefreshing_ContextFlow
@g 
@g                             Refreshing and param autoPath refreshing component: context flow
@g 
@g 
@g                                                          +------------------------------------------------+
@g                                                          |                                                |
@g                                                          |                                                |
@g                                                          |            #====#         +----------+         |
@g                                                          |            v    H         v          |         v
@g         +----------------+     +-----------------+     +------+     +--------+     +--------------+     +---------------+
@g     ==> | Initialization | ==> | ParamValidation | ==> | Load | ==> |        | --> |              | --> | NotApplicable |
@g         +----------------+     +-----------------+     +------+     |        |     |              |     +---------------+
@g                                  ^                       |          |        |     |              |
@g                                  H                       |          | Normal | <== | NotAvailable |
@g                                  H                       |          |        |     |              |
@g         +----------------+       H                       |          |        |     |              |
@g     ..> |     Reset      | ======#                       |          |        |     |              |
@g         +----------------+                               |          +--------+     +--------------+
@g                                                          |            ^              ^
@g                                                          |            H              |
@g                                                          |            H              |
@g         +----------------+     +-----------------+       |            H              |
@g     ..> |      Stop      | --> |     Reload      | ======+============#              |
@g         +----------------+     +-----------------+       |                           |
@g                                  ^                       |                           |
@g                                  :                       +---------------------------+
@g                                  :
* @graph Initialization_StateFlow
@g 
@g  Initialization context: state flow
@g 
@g           +--------------+
@g       ==> | Initializing | ==>
@g           +--------------+
@g             |
@g             |
@g             v
@g           +--------------+
@g           |    Error     |
@g           +--------------+
* @graph ParamValidation_StateFlow
@g 
@g  ParamValidation context: state flow
@g 
@g             +------------+
@g         ==> | Validating | ==>
@g             +------------+
@g               |
@g               |
@g               v
@g             +------------+
@g             |   Error    |
@g             +------------+
* @graph Request_StateFlow
@g 
@g        Request (Load, Normal, Reload, NotAvailable...) context: state flow
@g 
@g 
@g           +---------------------------------------------------+
@g           |                                                   |
@g           |                                                   |
@g           |    +----------------------------------------------+-----------------+
@g           |    |                                              |                 |
@g           |    |                                              |                 |
@g           |    |    +-----------------------+                 |                 |
@g           v    v    |                       v                 |                 |
@g         +-------------+     +-------+     +-----------+     +----------------+  |
@g     ==> |             | --> |       | --> |           | --> | TransientError |  |
@g         |             |     |       |     |           |     +----------------+  |
@g         |             |     |       |     |           |       ^                 |
@g         |   Loading   | <-- | Delay | <-- | Temporary |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       |     |           |       |                 |
@g         |             |     |       | -+  |           | ------+-----------------+
@g         +-------------+     +-------+  |  +-----------+       |
@g           H                            |                      |
@g           H                            +----------------------+
@g           v
 */
class PulseParamAutoPathRefreshingComponent extends PulseParamRefreshingComponent {
  /**
   * Constructor
   * 
   * @param  {...any} args 
   */
  constructor(...args) {
    const self = super(...args);
    self._path = '';
    return self;
  }

  /**
   * Associated path
   * 
   * @returns {!string} path
   */
  get path () {
    return this._path;
  }

  /**
   * Update the path from the configuration or the attribute
   * 
   * @returns {boolean} the path is defined (not empty and not null)
   */
  updatePathFromConfigOrAttribute () {
    this._path = this.getConfigOrAttribute('path', '');
    return (typeof (this.path) != 'undefined') && ('' != this.path);
  }

  /**
   * @override
   * 
   * @param {!string} context - Context
   * @param {!string} key - Key
   * @returns {!State} Created states
   */
  defineState (context, key) {
    switch (context) {
      case 'ParamValidation':
        switch (key) {
          case 'Validating':
            return new state.ParamAndPathValidationTimeoutState(c => 30000., context, key, this); // timeout = 30s
          default:
            return super.defineState(context, key);
        }
      case 'Initialization':
        switch (key) {
          case 'Initializing':
            return new state.AutoPathInitialState(context, key, this);
          default:
            return super.defineState(context, key);
        }
      default:
        return super.defineState(context, key);
    }
  }

  /**
   * Url to use by the Ajax request.
   * To be overridden
   *
   * @return {string} Url to use in the ajax request
   */
  getShortUrl () { // To override
    if (new.target === PulseParamAutoPathRefreshingComponent)
      throw TypeError('url of abstract class PulseParamAutoPathRefreshingComponent');
  }

  /**
   * Url to use by the Ajax request.
   *
   * @return {string} Url to use in the ajax request
   */
  get url () {
    console.assert((typeof (this.path) != 'undefined') && ('' != this.path));
    if ((typeof (this.path) == 'undefined') || ('' == this.path)) { // This should not happen: the path should be not empty after the param validation context
      console.error('empty path');
      debugger; // eslint-disable-line no-debugger
      throw 'empty path';
    }
    return this.path + this.getShortUrl();
  }

  /**
   * Default event callback in case a path is updated: (re-)start the component
   * (to go through the param validation state again)
   * 
   * @param {*} event 
   */
  onPathChange (event) {
    this.start();
  }
}

exports.PulseComponent = PulseComponent;
exports.PulseInitializedComponent = PulseInitializedComponent;
exports.PulseSingleRequestComponent = PulseSingleRequestComponent;
exports.PulseRefreshingComponent = PulseRefreshingComponent;
exports.PulseParamInitializedComponent = PulseParamInitializedComponent;
exports.PulseParamSingleRequestComponent = PulseParamSingleRequestComponent;
exports.PulseParamAutoPathSingleRequestComponent = PulseParamAutoPathSingleRequestComponent;
exports.PulseParamRefreshingComponent = PulseParamRefreshingComponent;
exports.PulseParamAutoPathRefreshingComponent = PulseParamAutoPathRefreshingComponent;

/**
 * Register a custom element
 *
 * @param {string} tagName - Element tag name
 * @param {class} componentClass - Sub-class of PulseComponent to use
 * @param {?string[]} attributes - [Optional] Observed attributes
 */
exports.registerElement = function (tagName, componentClass, attributes) {
  let attrs = (typeof attributes !== 'undefined') ? attributes : [];

  class C extends HTMLElement {
    constructor(...args) {
      const self = super();
      self._webComponent = new componentClass(self);
      let componentMethods = self._webComponent.methods;
      for (let methodKey in componentMethods) {
        if (componentMethods.hasOwnProperty(methodKey)) {
          this[methodKey] = componentMethods[methodKey].bind(self._webComponent);
        }
      }
      return self;
    }

    /**
     * Associated web component
     *
     * @return {Element} associated web component
     */
    get webComponent () {
      return this._webComponent;
    }

    connectedCallback () {
      this._webComponent.connectedCallback();
    }

    disconnectedCallback () {
      if (this._webComponent != null) {
        if (this._webComponent.disconnectedCallback()) {
          // switch to context destroy
          this._webComponent = null; // remove reference to help gargabe collector
        }
      }
    }

    attributeChangedCallback (attr, oldVal, newVal) {
      if (this._webComponent != null) {
        if (typeof this._webComponent.attributeChangedCallback === 'function') {
          this._webComponent.attributeChangedCallback(attr, oldVal, newVal);
        }
      }
    }

    static get observedAttributes () {
      return attrs;
    }
  }
  //  Note: there is a polyfill for browsers that don't support customElements.define from w3c
  customElements.define(tagName, C);
}

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseLogin":"pulseLogin","pulseService":"pulseService","pulseUtility":"pulseUtility","state":3}],3:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module state
 * @requires module:pulseService
 */
var pulseService = require('pulseService'); // for runAjax only -> to remove ?
var pulseConfig = require('pulseConfig'); // Verify useLogin
var eventBus = require('eventBus'); // to create path listener
var pulseLogin = require('pulseLogin');

/**
 * Base class for the states that are used by a PulseStateComponent to implement the state machine pattern
 *
 * @see module:pulseComponent~PulseStateComponent
 */
class State {
  /**
   * Constructor
   * 
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Associated Pulse state component
   */
  constructor(context, key, component) {
    if (new.target === State) throw TypeError('new of abstract class State');
    this._context = context;
    this._key = key;
    this._component = component;
    this._previousStateContext = undefined;
    this._previousStateKey = undefined;
  }

  /**
   * Associated context
   * 
   * @returns {string}
   */
  get context () {
    return this._context;
  }

  /**
   * Associated key 
   * 
   * @returns {string}
   */
  get key () {
    return this._key;
  }

  /**
   * Associated pulse state component
   *
   * @return {PulseStateComponent}
   */
  get component () {
    return this._component;
  }

  /**
   * Previous state context, before this state is active (after enter() is called)
   *
   * @return {string} previous state context
   */
  get previousStateContext () {
    return this._previousStateContext;
  }

  /**
 * Previous state key, before this state is active (after enter() is called)
 *
 * @return {string} previous state key
 */
  get previousStateKey () {
    return this._previousStateKey;
  }

  /**
   * Function that is called when the component enters this state
   *
   * @param {string} previousStateContext - Previous state context
   * @param {string} previousStateKey - Previous state key
   */
  enter (previousStateContext, previousStateKey) {
    this._previousStateContext = previousStateContext;
    this._previousStateKey = previousStateKey;
    this.component.addClass('pulsecomponent-context-' + this.context);
    this.component.addClass('pulsecomponent-key-' + this.key);
  }

  /**
   * Function that is called when the component exists this state
   * 
   * @param {string} nextStateContext - Next state context
   * @param {string} nextStateKey - Next state key
   */
  exit (nextStateContext, nextStateKey) {
    this.component.removeClass('pulsecomponent-context-' + this.context);
    this.component.removeClass('pulsecomponent-key-' + this.key);
  }

  /**
   * Function that is called when the component stays in this state
   */
  stay () {
  }
}

/**
 * Class for the LAST state before destruction used by all PulseStateComponent
 */
class BeforeDestructionState extends State {
  /**
   * Constructor
   * 
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Associated Pulse state component
   */
  constructor(context, key, component) {
    super(context, key, component);
    this._component = null; // No reference
  }

  enter (previousStateContext, previousStateKey) {
    this._previousStateContext = previousStateContext;
    this._previousStateKey = previousStateKey;
    // Do nothing more = no call to super
  }

  /**
   * Function that is called when the component exists this state
   * 
   * @param {string} nextStateContext - Next state context
   * @param {string} nextStateKey - Next state key
   */
  exit (nextStateContext, nextStateKey) {
    // Do nothing = no call to super
  }
}

/**
 * Initial state. The next state is either the next context or the Error state
 * 
 * When this state is entered:
 * - if {@link module:pulseComponent~PulseInitializedComponent#isInitialized} returns true, {@link module:pulseComponent~PulseInitializedComponent#clearInitialization} is called first.
 * - then {@link module:pulseComponent~PulseInitializedComponent#initialize} is called.
 *
 * @extends module:state~State
 */
class InitialState extends State {
  /**
   * Switch to the next context or to the Error  state
   * 
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    this.component.clearDynamicStateContent(); // To clear state classes in case of clone

    super.enter(previousStateContext, previousStateKey);
    if (this.component.isInitialized()) {
      this.component.clearInitialization();
    }

    this.component.initialize();

    // Prepare listener to check config change - After initialize
    eventBus.EventBus.addGlobalEventListener(this.component,
      'configChangeEvent',
      this.component.onConfigChange.bind(this.component));
  }
}

/**
 * Initial state for auto path components. (create listener)
 * The next state is either the next context or the Error state
 * 
 * When this state is entered:
 * - if {@link module:pulseComponent~PulseInitializedComponent#isInitialized} returns true, {@link module:pulseComponent~PulseInitializedComponent#clearInitialization} is called first.
 * - then {@link module:pulseComponent~PulseInitializedComponent#initialize} is called.
 *
 * @extends module:state~State
 */
class AutoPathInitialState extends State { // +/- idem Initial State
  /**
   * Switch to the next context or to the Error  state
   * 
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    this.component.clearDynamicStateContent(); // To clear state classes in case of clone

    super.enter(previousStateContext, previousStateKey);
    if (this.component.isInitialized()) {
      this.component.clearInitialization();
    }

    this.component.initialize();

    // Listener to check server access == AFTER initialize
    eventBus.EventBus.addGlobalEventListener(this.component,
      'serverProbablyOffStopRefresh',
      this.component.onServerOffStopRefresh.bind(this.component));
    eventBus.EventBus.addGlobalEventListener(this.component,
      'serverProbablyAvailable',
      this.component.onServerAvailableChange.bind(this.component));

    // Prepare listener to check path change
    eventBus.EventBus.addGlobalEventListener(this.component,
      'pathChangeEvent',
      this.component.onPathChange.bind(this.component));

    // Prepare listener to check config change
    eventBus.EventBus.addGlobalEventListener(this.component,
      'configChangeEvent',
      this.component.onConfigChange.bind(this.component));
  }
}

/**
 * Reset state. State when the pulse component must be reset.
 * The next state is either the next context or the Error state
 * 
 * When this state is entered {@link module:pulseComponent~PulseInitializedComponent#reset} is called.
 * 
 * @extends module:state~State
 */
class ResetState extends State {
  /**
   * Switch to the next context or to the Error state
   * 
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    super.enter(previousStateContext, previousStateKey);
    this.component.reset();
  }
}

/**
 * Static state.
 * It does not switch automatically to any other state
 *
 * @extends module:state~State
 */
class StaticState extends State {
}

/**
 * No action state.
 * The next state is directly the state that is given in the argument of the constructor. Nothing else special is done.
 *
 * @extends module:state~State
 */
class NoActionState extends State { // eslint-disable-line no-unused-vars
  /**
   * Constructor
   * 
   * @param {?string} nextContext - Context of the next state
   * @param {?string} nextKey - Key of the next state
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Pulse state component
   */
  constructor(nextContext, nextKey, context, key, component) {
    super(context, key, component);
    this._nextContext = nextContext;
    this._nextKey = nextKey;
  }

  /**
   * Switch to the state that was given to the argument of the constructor
   *
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    super.enter(previousStateContext, previousStateKey);
    if ((null == this._nextContext) && (null == this._nextKey)) {
      this.component.switchToNextContext();
    }
    else {
      this.component.switchToState(this._nextContext, this._nextKey);
    }
  }
}

/**
 * Callback that returns a number of ms to wait
 * 
 * @callback delayCallback
 * @param {PulseStateComponent} component - Pulse state component
 * @return {number} delay in ms
 */

/**
 * Wait state.
 * Switch to the next state after a specified time
 *
 * @extends module:state~State
 */
class WaitState extends State {
  /**
   * Constructor
   * 
   * @param {?string} nextContext - Context of the next state
   * @param {?string} nextKey - Key of the next state
   * @param {?actionCallback} preAction - Pre-action
   * @param {?actionCallback} postAction - Post-action
   * @param {delayCallback} delayCallback - Callback to get the delay before switching to the specified next state
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Pulse state component
   */
  constructor(nextContext, nextKey, preAction, postAction, delayCallback, context, key, component) {
    super(context, key, component);
    this._nextContext = nextContext;
    this._nextKey = nextKey;
    this._preAction = preAction;
    this._postAction = postAction;
    this.delayCallback = delayCallback; // in ms
    this._active = false;
    this._timeoutId = null;
  }

  /**
   * Is the state still active ?
   * (exit has not been called yet)
   *
   * @return {boolean} The state is active
   */
  get active () {
    return this._active;
  }

  /**
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    super.enter(previousStateContext, previousStateKey);
    this._active = true;
    this._clearTimeout();
    let delay = this.delayCallback(this.component);
    this._timeoutId = setTimeout(this._switch.bind(this), delay);
  }

  /**
   * @override
   */
  exit (nextStateContext, nextStateKey) {
    super.exit(nextStateContext, nextStateKey);
    this._active = false;
    this._clearTimeout();
  }

  /**
   * @override
   */
  stay () {
    super.stay();
    this._active = true;
    this._clearTimeout();
    let delay = this.delayCallback(this.component);
    this._timeoutId = setTimeout(this._switch.bind(this), delay);
  }

  _clearTimeout () {
    if (null != this._timeoutId) {
      window.clearTimeout(this._timeoutId);
      this._timeoutId = null;
    }
  }

  /**
   * Once the time is completed, switch to the next state
   */
  _switch () {
    if (this.active) {
      if ((null == this._nextContext) && (null == this._nextKey)) {
        this.component.switchToNextContext(this._preAction, this._postAction);
      }
      else {
        this.component.switchToState(this._nextContext, this._nextKey, this._preAction, this._postAction);
      }
    }
  }
}

/**
 * (Event) Parameter validation state with a timeout.
 * The event/live parameters are checked by the ValidateParameters methods of the web component.
 * 
 * In case they are ok, switch to the next context.
 * 
 * After some time, if the parameters could not be validated,
 * the web component is automatically switched to an error state
 * 
 * If the web component does not contain any ValidateParameters method, switch to the next context at once.
 *
 * When this state is entered {@link module:pulseComponent~PulseParamInitializedComponent#validateParameters} is called.
 * 
 * @extends module:state~WaitState
 */
class ParamValidationTimeoutState extends WaitState { // eslint-disable-line no-unused-vars
  /**
   * Constructor
   * 
   * @param {delayCallback} delayCallback - Callback to get the delay before switching to the error state
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Pulse state component
   */
  constructor(delayCallback, context, key, component) {
    super(null, 'Error', () => this.component.showError(), () => this.component.removeError(), delayCallback, context, key, component);
  }

  /**
   * If validateParameters is a method of the component, run it.
   * Else switch to the next context.
   * 
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    super.enter(previousStateContext, previousStateKey);
    this._validate();
  }

  /**
   * @override
   */
  exit (nextStateContext, nextStateKey) {
    super.exit(nextStateContext, nextStateKey);
  }

  /**
   * @override
   */
  stay () {
    super.stay();
    this._validate();
  }

  _validate () {
    if (this.component.updatePathFromConfigOrAttribute) { // Here this is optional, to make it mandatory use state ParamAndPathValidationTimeoutState
      if (!this.component.updatePathFromConfigOrAttribute()) {
        console.log('waiting attribute path');
        this.component.setError('Waiting for path');
        return;
      }
    }
    if (this.component.validateParameters) {
      this.component.validateParameters();
    }
    else {
      console.warn(`${this.component.getInfo ? this.component.getInfo() : ''}: validateParameters is not defined, it should probably inherit from base component with no parameter validation instead`);
      this.component.switchToNextContext();
    }
  }
}

/**
 * (Event) Parameter validation state with a timeout + wait for url path
 * The event/live parameters are checked by the ValidateParameters methods of the web component.
 * 
 * In case they are ok, switch to the next context.
 * 
 * After some time, if the parameters could not be validated,
 * the web component is automatically switched to an error state
 * 
 * If the web component does not contain any ValidateParameters method, switch to the next context at once.
 *
 * When this state is entered {@link module:pulseComponent~PulseParamInitializedComponent#validateParameters} is called.
 * 
 * @extends module:state~ParamValidationTimeoutState
 */
class ParamAndPathValidationTimeoutState extends ParamValidationTimeoutState {
  /**
   * Constructor
   * 
   * @param {delayCallback} delayCallback - Callback to get the delay before switching to the error state
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Pulse state component
   */
  constructor(delayCallback, context, key, component) {
    super(delayCallback, context, key, component);
  }

  _validate () {
    // Check the path is valid
    if (this.component.updatePathFromConfigOrAttribute) {
      if (!this.component.updatePathFromConfigOrAttribute()) {
        console.log('waiting attribute path');
        this.component.setError('Waiting for path');
        return;
      }
    }
    else { // !this.component.updatePathFromConfigOrAttribute
      console.error('missing method updatePathFromConfigOrAttribute in component');
      debugger; // eslint-disable-line no-debugger
      throw 'missing method updatePathFromConfigOrAttribute';
    }
    if (this.component.validateParameters) {
      this.component.validateParameters();
    }
    else {
      console.warn(`${this.component.getInfo ? this.component.getInfo() : ''}: validateParameters is not defined, it should probably inherit from base component with no parameter validation instead`);
      this.component.switchToNextContext();
    }
  }
}

/**
 * Request state
 * 
 * After a specified delay, an Ajax method is called to refresh the component.
 * The URL used by the Ajax request () is the property url of the pulse component.
 *
 * @extends module:state~State
 */
class RequestState extends State {
  /**
   * Constructor
   * 
   * @param {delayCallback} delayCallback - Callback to get the initial delay before the Ajax method is called
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Pulse state component
   */
  constructor(delayCallback, context, key, component) {
    if (new.target === RequestState) throw TypeError('new of abstract class RequestState');
    super(context, key, component);
    this.delayCallback = delayCallback; // in ms
    this._token = 0;
    this._active = false;
    this._timeoutId = null;
  }

  /**
   * Token that is incremented each time the enter or stay method is called
   *
   * @return {number}
   */
  get token () {
    return this._token;
  }
  /**
   * Increment the token
   * @see token
   */
  incrementToken () {
    this._token += 1;
  }

  /**
   * Is the state still active ?
   * (exit has not been called yet)
   *
   * @return {boolean} The state is active
   */
  get active () {
    return this._active;
  }

  /**
   * Url to use by the Ajax request.
   * Default is url of the component.
   * It can be overridden by the reload_url of the component.
   *
   * @return {string} Url to use in the ajax request
   */
  get url () {
    return this.component.url;
  }

  /**
   * After an initial delay, returned by the delay callback, initiate the Ajax request
   *
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    super.enter(previousStateContext, previousStateKey);
    this.incrementToken();
    this._active = true;
    this._clearTimeout();
    let delay = this.delayCallback(this.component);
    this._timeoutId = setTimeout(this._runGetData.bind(this), delay, this.token);
  }

  /**
   * @override
   */
  exit (nextStateContext, nextStateKey) {
    super.exit(nextStateContext, nextStateKey);
    this._active = false;
    this._clearTimeout();
  }

  /**
   * After an initial delay, returned by the delay callback, initiate the Ajax request
   *
   * @override
   */
  stay () {
    super.stay();
    this.incrementToken();
    this._active = true;
    this._clearTimeout();
    let delay = this.delayCallback(this.component);
    this._timeoutId = setTimeout(this._runGetData.bind(this), delay, this.token);
  }

  _clearTimeout () {
    if (null != this._timeoutId) {
      window.clearTimeout(this._timeoutId);
      this._timeoutId = null;
    }
  }

  /**
   * Once the time is completed and the component is visible, run the ajax request
   *
   * @param {number} requestToken - Token number to be returned by the ajax request
   */
  _runAjaxWhenIsVisible (requestToken) {
    // Normal behavior
    if (this.active && this._checkToken(requestToken)) {
      if (this.component.isVisible) {
        let useLogin = pulseConfig.getBool('useLogin', false);
        if (useLogin) {
          pulseLogin.refreshTokenIfNeeded();
        }

        if (this.component.postData) { // savereason for example of use
          let jsondata = this.component.postData();
          pulseService.postAjax(this.token, this.url, jsondata, this.component.timeout, this._success.bind(this), this._error.bind(this), this._fail.bind(this));
        }
        else { // Normal behavior
          pulseService.runAjax(this.token, this.url, this.component.timeout, this._success.bind(this), this._error.bind(this), this._fail.bind(this));
        }
      }
      else { // Not visible: postpone it when it is visible again
        this._clearTimeout();
        this._timeoutId = setTimeout(this._runGetData.bind(this), 200, this.token);
      }
    }
  }

  /**
   * Once the time is completed and the component is visible, get data
   * (running ajax request or component._runAlternateGetData if defined)
   *
   * @param {number} requestToken - Token number to be returned by the ajax request
   */
  _runGetData (requestToken) {
    // Special behavior to get data without using url (ex : periodmanager, periodtoolbar)
    if (typeof (this.component._runAlternateGetData) != 'undefined') {
      if (this.component._runAlternateGetData()) {
        return;
      }
    }
    // Normal behavior
    this._runAjaxWhenIsVisible(requestToken);
  }

  /**
   * Callback that is run once the Ajax request is successful.
   * The refresh method of the Pulse component is run if the token matches.
   *
   * @param {number} ajaxToken - Token that is associated to the ajax request
   * @param {Object} data - Data returned by the ajax request
   */
  _success (ajaxToken, data) {
    if (this.active && this._checkToken(ajaxToken)) {
      this.component.manageSuccess(data);
    }
    else {
      console.warn('Success but token changed, ignore it');
    }
  }

  /**
   * Callback that is run if the ajax request returns an error data.
   * The manageError method of the Pulse component is run if the token matches.
   *
   * @param {number} ajaxToken - Token that is associated to the ajax request
   * @param {Object} data - Error data that is returned by the ajax request
   */
  _error (ajaxToken, data) {
    if (this.active && this._checkToken(ajaxToken)) {
      this.component.manageError(data);
      // Stop all refresh :  databaseProbablyDisconnected -> done in manageErrorStatus
    }
    else {
      console.warn('Error but token changed, ignore it');
    }
  }

  /**
   * Callback that is run if the ajax request fails.
   * The manageFailure method of the Pulse component is run if the token matches.
   *
   * @param {number} ajaxToken - Token that is associated to the ajax request
   * @param {string} url - URL used in the ajax request
   * @param {boolean} isTimeout - The ajax request ended in time out
   * @param {number} xhrStatus - XMLHttpRequest.status of the Ajax request
   */
  _fail (ajaxToken, url, isTimeout, xhrStatus) {
    if (this.active && this._checkToken(ajaxToken)) {
      this.component.manageFailure(isTimeout, xhrStatus);
      // Stop all refresh :
      let target = {
        url: url,
        source: this.component.element.tagName,
        when: new Date()
      };

      // NO Filter == Always !
      //if (!this.component.element.tagName.toUpperCase().includes('X-CHECK') ) { // != 'X-CHECKSERVERACCESS') {
      eventBus.EventBus.dispatchToAll('serverProbablyDisconnected', target);
      //}
    }
    else {
      console.warn('Failure but token changed, ignore it');
    }
  }

  /**
   * Check the token is still valid
   *
   * @param {number} ajaxToken - Token
   * @return {boolean} The token is still valid
   */
  _checkToken (ajaxToken) {
    return ajaxToken === this.token;
  }
}

/**
 * Load state. The initial ajax request was sent, but no normal data has been loaded yet.
 * The ajax request is sent right now.
 *
 * @extends module:state~RequestState
 */
class LoadState extends RequestState {
  /**
   * @override
   *
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Pulse state component
   */
  constructor(context, key, component) {
    super(c => 0., context, key, component); // TODO: adapt the refresh rate in case it remains in the loading state
  }
}

/**
 * Normal refreshing state.S
 * 
 * @extends module:state~RequestState
 */
class NormalRequestState extends RequestState {
}

/**
 * Reload state. The component is in a state when the data must be reloaded right now.
 * The default delay is 0ms here.
 *
 * @extends module:state~RequestState
 */
class ReloadState extends RequestState {
  /**
   * @override
   *
   * @param {string} context - State context
   * @param {string} key - State key
   * @param {PulseStateComponent} component - Pulse state component
   */
  constructor(context, key, component) {
    super(c => 0., context, key, component); // TODO: adapt the refresh rate in case it remains in reload state
  }

  /**
   * The beforeReload method of the Pulse component is first run if defined
   *
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    if (this.component.beforeReload) {
      this.component.beforeReload();
    }
    super.enter(previousStateContext, previousStateKey);
  }
}

/**
 * Not available state. The data is not available right now (it may be in the future)
 *
 * @extends module:state~RequestState
 */
class NotAvailableState extends RequestState {
}

/**
 * Temporary error state. A temporary error happened.
 *
 * @extends module:state~RequestState
 */
class TemporaryState extends RequestState {
  /**
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    this._enter_date_time = new Date();
    super.enter(previousStateContext, previousStateKey);
  }

  /**
   * @override
   */
  exit (nextStateContext, nextStateKey) {
    this._enter_date_time = undefined;
    super.exit(nextStateContext, nextStateKey);
  }

  stay () {
    console.assert(typeof (this._enter_date_time) != 'undefined');
    let age = new Date() - this._enter_date_time;
    if (this.component.transientErrorDelay < age) {
      this.component.switchToKey('TransientError', this.component.showError, this.component.removeError);
    }
    else {
      super.stay();
    }
  }
}

/**
 * Delay error state. A temporary error that can remain active potentially a long time happened.
 *
 * @extends module:state~RequestState
 */
class DelayState extends RequestState {
  /**
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    this._enter_date_time = new Date();
    super.enter(previousStateContext, previousStateKey);
  }

  /**
   * @override
   */
  exit (nextStateContext, nextStateKey) {
    this._enter_date_time = undefined;
    super.exit(nextStateContext, nextStateKey);
  }

  stay () {
    console.assert(typeof (this._enter_date_time) != 'undefined');
    let age = new Date() - this._enter_date_time;
    if (this.component.transientErrorDelay < age) {
      this.component.switchToKey('TransientError', this.component.showError, this.component.removeError);
    }
    else {
      super.stay();
    }
  }
}

/**
 * Transient error state. State to use when many temporary or delay states already occurred.
 * Then the pulse component can be switch to a warning state.
 *
 * @extends module:state~RequestState
 */
class TransientErrorState extends RequestState {
  /**
   * If defined, the enterTransientErrorState method of the Pulse component is run
   *
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    super.enter(previousStateContext, previousStateKey);
    if (this.component.enterTransientErrorState) {
      this.component.enterTransientErrorState();
    }
  }

  /**
   * If defined, the exitTransientErrorState method of the Pulse component is run
   *
   * @override
   */
  exit (nextStateContext, nextStateKey) {
    if (this.component.exitTransientErrorState) {
      this.component.exitTransientErrorState();
    }
    super.exit(nextStateContext, nextStateKey);
  }
}

/**
 * Error state.
 *
 * @extends module:state~State
 */
class ErrorState extends State {
  /**
   * If defined, the enterErrorState method of the Pulse component is run
   *
   * @override
   */
  enter (previousStateContext, previousStateKey) {
    super.enter(previousStateContext, previousStateKey);
    if (this.component.enterErrorState) {
      this.component.enterErrorState();
    }
  }

  /**
   * If defined, the exitErrorState method of the Pulse component is run
   *
   * @override
   */
  exit (nextStateContext, nextStateKey) {
    if (this.component.exitErrorState) {
      this.component.exitErrorState();
    }
    super.exit(nextStateContext, nextStateKey);
  }
}

/**
 * Not applicable state. 
 *
 * @extends module:state~State
 */
class NotApplicableState extends State {
}

/**
 * Stop state. State to use when a component should stop refresh. 
 * For example, when web services are not available.
 *
 * @extends module:state~State
 */
class StopState extends State {
}


exports.State = State;
exports.BeforeDestructionState = BeforeDestructionState;
exports.InitialState = InitialState;
exports.AutoPathInitialState = AutoPathInitialState;
exports.ParamAndPathValidationTimeoutState = ParamAndPathValidationTimeoutState;
exports.ResetState = ResetState;
exports.StaticState = StaticState;
exports.NoActionState = NoActionState;
exports.WaitState = WaitState;
exports.ParamValidationTimeoutState = ParamValidationTimeoutState;
exports.RequestState = RequestState;
exports.LoadState = LoadState;
exports.NormalRequestState = NormalRequestState;
exports.ReloadState = ReloadState;
exports.NotAvailableState = NotAvailableState;
exports.TemporaryState = TemporaryState;
exports.DelayState = DelayState;
exports.TransientErrorState = TransientErrorState;
exports.ErrorState = ErrorState;
exports.NotApplicableState = NotApplicableState;
exports.StopState = StopState;

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseLogin":"pulseLogin","pulseService":"pulseService"}],4:[function(require,module,exports){
module.exports={"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\"","QUOT":"\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}

},{}],5:[function(require,module,exports){
'use strict';


////////////////////////////////////////////////////////////////////////////////
// Helpers

// Merge objects
//
function assign(obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);

  sources.forEach(function (source) {
    if (!source) { return; }

    Object.keys(source).forEach(function (key) {
      obj[key] = source[key];
    });
  });

  return obj;
}

function _class(obj) { return Object.prototype.toString.call(obj); }
function isString(obj) { return _class(obj) === '[object String]'; }
function isObject(obj) { return _class(obj) === '[object Object]'; }
function isRegExp(obj) { return _class(obj) === '[object RegExp]'; }
function isFunction(obj) { return _class(obj) === '[object Function]'; }


function escapeRE(str) { return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&'); }

////////////////////////////////////////////////////////////////////////////////


var defaultOptions = {
  fuzzyLink: true,
  fuzzyEmail: true,
  fuzzyIP: false
};


function isOptionsObj(obj) {
  return Object.keys(obj || {}).reduce(function (acc, k) {
    return acc || defaultOptions.hasOwnProperty(k);
  }, false);
}


var defaultSchemas = {
  'http:': {
    validate: function (text, pos, self) {
      var tail = text.slice(pos);

      if (!self.re.http) {
        // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.http =  new RegExp(
          '^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'
        );
      }
      if (self.re.http.test(tail)) {
        return tail.match(self.re.http)[0].length;
      }
      return 0;
    }
  },
  'https:':  'http:',
  'ftp:':    'http:',
  '//':      {
    validate: function (text, pos, self) {
      var tail = text.slice(pos);

      if (!self.re.no_http) {
      // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.no_http =  new RegExp(
          '^' +
          self.re.src_auth +
          // Don't allow single-level domains, because of false positives like '//test'
          // with code comments
          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' +
          self.re.src_port +
          self.re.src_host_terminator +
          self.re.src_path,

          'i'
        );
      }

      if (self.re.no_http.test(tail)) {
        // should not be `://` & `///`, that protects from errors in protocol name
        if (pos >= 3 && text[pos - 3] === ':') { return 0; }
        if (pos >= 3 && text[pos - 3] === '/') { return 0; }
        return tail.match(self.re.no_http)[0].length;
      }
      return 0;
    }
  },
  'mailto:': {
    validate: function (text, pos, self) {
      var tail = text.slice(pos);

      if (!self.re.mailto) {
        self.re.mailto =  new RegExp(
          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'
        );
      }
      if (self.re.mailto.test(tail)) {
        return tail.match(self.re.mailto)[0].length;
      }
      return 0;
    }
  }
};

/*eslint-disable max-len*/

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
var tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';

// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
var tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');

/*eslint-enable max-len*/

////////////////////////////////////////////////////////////////////////////////

function resetScanCache(self) {
  self.__index__ = -1;
  self.__text_cache__   = '';
}

function createValidator(re) {
  return function (text, pos) {
    var tail = text.slice(pos);

    if (re.test(tail)) {
      return tail.match(re)[0].length;
    }
    return 0;
  };
}

function createNormalizer() {
  return function (match, self) {
    self.normalize(match);
  };
}

// Schemas compiler. Build regexps.
//
function compile(self) {

  // Load & clone RE patterns.
  var re = self.re = require('./lib/re')(self.__opts__);

  // Define dynamic patterns
  var tlds = self.__tlds__.slice();

  self.onCompile();

  if (!self.__tlds_replaced__) {
    tlds.push(tlds_2ch_src_re);
  }
  tlds.push(re.src_xn);

  re.src_tlds = tlds.join('|');

  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }

  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');
  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');
  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');
  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');

  //
  // Compile each schema
  //

  var aliases = [];

  self.__compiled__ = {}; // Reset compiled data

  function schemaError(name, val) {
    throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
  }

  Object.keys(self.__schemas__).forEach(function (name) {
    var val = self.__schemas__[name];

    // skip disabled methods
    if (val === null) { return; }

    var compiled = { validate: null, link: null };

    self.__compiled__[name] = compiled;

    if (isObject(val)) {
      if (isRegExp(val.validate)) {
        compiled.validate = createValidator(val.validate);
      } else if (isFunction(val.validate)) {
        compiled.validate = val.validate;
      } else {
        schemaError(name, val);
      }

      if (isFunction(val.normalize)) {
        compiled.normalize = val.normalize;
      } else if (!val.normalize) {
        compiled.normalize = createNormalizer();
      } else {
        schemaError(name, val);
      }

      return;
    }

    if (isString(val)) {
      aliases.push(name);
      return;
    }

    schemaError(name, val);
  });

  //
  // Compile postponed aliases
  //

  aliases.forEach(function (alias) {
    if (!self.__compiled__[self.__schemas__[alias]]) {
      // Silently fail on missed schemas to avoid errons on disable.
      // schemaError(alias, self.__schemas__[alias]);
      return;
    }

    self.__compiled__[alias].validate =
      self.__compiled__[self.__schemas__[alias]].validate;
    self.__compiled__[alias].normalize =
      self.__compiled__[self.__schemas__[alias]].normalize;
  });

  //
  // Fake record for guessed links
  //
  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };

  //
  // Build schema condition
  //
  var slist = Object.keys(self.__compiled__)
                      .filter(function (name) {
                        // Filter disabled & fake schemas
                        return name.length > 0 && self.__compiled__[name];
                      })
                      .map(escapeRE)
                      .join('|');
  // (?!_) cause 1.5x slowdown
  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');
  self.re.schema_search = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');

  self.re.pretest = RegExp(
    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',
    'i'
  );

  //
  // Cleanup
  //

  resetScanCache(self);
}

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/
function Match(self, shift) {
  var start = self.__index__,
      end   = self.__last_index__,
      text  = self.__text_cache__.slice(start, end);

  /**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/
  this.schema    = self.__schema__.toLowerCase();
  /**
   * Match#index -> Number
   *
   * First position of matched string.
   **/
  this.index     = start + shift;
  /**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/
  this.lastIndex = end + shift;
  /**
   * Match#raw -> String
   *
   * Matched string.
   **/
  this.raw       = text;
  /**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/
  this.text      = text;
  /**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/
  this.url       = text;
}

function createMatch(self, shift) {
  var match = new Match(self, shift);

  self.__compiled__[match.schema].normalize(match, self);

  return match;
}


/**
 * class LinkifyIt
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/
function LinkifyIt(schemas, options) {
  if (!(this instanceof LinkifyIt)) {
    return new LinkifyIt(schemas, options);
  }

  if (!options) {
    if (isOptionsObj(schemas)) {
      options = schemas;
      schemas = {};
    }
  }

  this.__opts__           = assign({}, defaultOptions, options);

  // Cache last tested result. Used to skip repeating steps on next `match` call.
  this.__index__          = -1;
  this.__last_index__     = -1; // Next scan position
  this.__schema__         = '';
  this.__text_cache__     = '';

  this.__schemas__        = assign({}, defaultSchemas, schemas);
  this.__compiled__       = {};

  this.__tlds__           = tlds_default;
  this.__tlds_replaced__  = false;

  this.re = {};

  compile(this);
}


/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/
LinkifyIt.prototype.add = function add(schema, definition) {
  this.__schemas__[schema] = definition;
  compile(this);
  return this;
};


/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/
LinkifyIt.prototype.set = function set(options) {
  this.__opts__ = assign(this.__opts__, options);
  return this;
};


/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/
LinkifyIt.prototype.test = function test(text) {
  // Reset scan cache
  this.__text_cache__ = text;
  this.__index__      = -1;

  if (!text.length) { return false; }

  var m, ml, me, len, shift, next, re, tld_pos, at_pos;

  // try to scan for link with schema - that's the most simple rule
  if (this.re.schema_test.test(text)) {
    re = this.re.schema_search;
    re.lastIndex = 0;
    while ((m = re.exec(text)) !== null) {
      len = this.testSchemaAt(text, m[2], re.lastIndex);
      if (len) {
        this.__schema__     = m[2];
        this.__index__      = m.index + m[1].length;
        this.__last_index__ = m.index + m[0].length + len;
        break;
      }
    }
  }

  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
    // guess schemaless links
    tld_pos = text.search(this.re.host_fuzzy_test);
    if (tld_pos >= 0) {
      // if tld is located after found link - no need to check fuzzy pattern
      if (this.__index__ < 0 || tld_pos < this.__index__) {
        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {

          shift = ml.index + ml[1].length;

          if (this.__index__ < 0 || shift < this.__index__) {
            this.__schema__     = '';
            this.__index__      = shift;
            this.__last_index__ = ml.index + ml[0].length;
          }
        }
      }
    }
  }

  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
    // guess schemaless emails
    at_pos = text.indexOf('@');
    if (at_pos >= 0) {
      // We can't skip this check, because this cases are possible:
      // 192.168.1.1@gmail.com, my.in@example.com
      if ((me = text.match(this.re.email_fuzzy)) !== null) {

        shift = me.index + me[1].length;
        next  = me.index + me[0].length;

        if (this.__index__ < 0 || shift < this.__index__ ||
            (shift === this.__index__ && next > this.__last_index__)) {
          this.__schema__     = 'mailto:';
          this.__index__      = shift;
          this.__last_index__ = next;
        }
      }
    }
  }

  return this.__index__ >= 0;
};


/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/
LinkifyIt.prototype.pretest = function pretest(text) {
  return this.re.pretest.test(text);
};


/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/
LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
  // If not supported schema check requested - terminate
  if (!this.__compiled__[schema.toLowerCase()]) {
    return 0;
  }
  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
};


/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/
LinkifyIt.prototype.match = function match(text) {
  var shift = 0, result = [];

  // Try to take previous element from cache, if .test() called before
  if (this.__index__ >= 0 && this.__text_cache__ === text) {
    result.push(createMatch(this, shift));
    shift = this.__last_index__;
  }

  // Cut head if cache was used
  var tail = shift ? text.slice(shift) : text;

  // Scan string until end reached
  while (this.test(tail)) {
    result.push(createMatch(this, shift));

    tail = tail.slice(this.__last_index__);
    shift += this.__last_index__;
  }

  if (result.length) {
    return result;
  }

  return null;
};


/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/
LinkifyIt.prototype.tlds = function tlds(list, keepOld) {
  list = Array.isArray(list) ? list : [ list ];

  if (!keepOld) {
    this.__tlds__ = list.slice();
    this.__tlds_replaced__ = true;
    compile(this);
    return this;
  }

  this.__tlds__ = this.__tlds__.concat(list)
                                  .sort()
                                  .filter(function (el, idx, arr) {
                                    return el !== arr[idx - 1];
                                  })
                                  .reverse();

  compile(this);
  return this;
};

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/
LinkifyIt.prototype.normalize = function normalize(match) {

  // Do minimal possible changes by default. Need to collect feedback prior
  // to move forward https://github.com/markdown-it/linkify-it/issues/1

  if (!match.schema) { match.url = 'http://' + match.url; }

  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
    match.url = 'mailto:' + match.url;
  }
};


/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/
LinkifyIt.prototype.onCompile = function onCompile() {
};


module.exports = LinkifyIt;

},{"./lib/re":6}],6:[function(require,module,exports){
'use strict';


module.exports = function (opts) {
  var re = {};

  // Use direct extract instead of `regenerate` to reduse browserified size
  re.src_Any = require('uc.micro/properties/Any/regex').source;
  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;
  re.src_Z   = require('uc.micro/categories/Z/regex').source;
  re.src_P   = require('uc.micro/categories/P/regex').source;

  // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');

  // \p{\Z\Cc} (white spaces + control)
  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');

  // Experimental. List of chars, completely prohibited in links
  // because can separate it from other part of text
  var text_separators = '[><\uff5c]';

  // All possible word characters (everything without punctuation, spaces & controls)
  // Defined via punctuation & spaces to save space
  // Should be something like \p{\L\N\S\M} (\w but without `_`)
  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';
  // The same as abothe but without [0-9]
  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

  ////////////////////////////////////////////////////////////////////////////////

  re.src_ip4 =

    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';

  // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';

  re.src_port =

    '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';

  re.src_host_terminator =

    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';

  re.src_path =

    '(?:' +
      '[/?#]' +
        '(?:' +
          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-;]).|' +
          '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' +
          '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' +
          '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' +
          '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' +
          "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" +
          "\\'(?=" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found
          '\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in "google search" links (#66, #81).
                                     // github has ... in commit range links,
                                     // Restrict to
                                     // - english
                                     // - percent-encoded
                                     // - parts of file path
                                     // - params separator
                                     // until more examples found.
          '\\.(?!' + re.src_ZCc + '|[.]).|' +
          (opts && opts['---'] ?
            '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
            :
            '\\-+|'
          ) +
          ',(?!' + re.src_ZCc + ').|' +       // allow `,,,` in paths
          ';(?!' + re.src_ZCc + ').|' +       // allow `;` if not followed by space-like char
          '\\!+(?!' + re.src_ZCc + '|[!]).|' +  // allow `!!!` in paths, but not at the end
          '\\?(?!' + re.src_ZCc + '|[?]).' +
        ')+' +
      '|\\/' +
    ')?';

  // Allow anything in markdown spec, forbid quote (") at the first position
  // because emails enclosed in quotes are far more common
  re.src_email_name =

    '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';

  re.src_xn =

    'xn--[a-z0-9\\-]{1,59}';

  // More to read about domain names
  // http://serverfault.com/questions/638260/

  re.src_domain_root =

    // Allow letters & digits (http://test1)
    '(?:' +
      re.src_xn +
      '|' +
      re.src_pseudo_letter + '{1,63}' +
    ')';

  re.src_domain =

    '(?:' +
      re.src_xn +
      '|' +
      '(?:' + re.src_pseudo_letter + ')' +
      '|' +
      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +
    ')';

  re.src_host =

    '(?:' +
    // Don't need IP check, because digits are already allowed in normal domain names
    //   src_ip4 +
    // '|' +
      '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain/*_root*/ + ')' +
    ')';

  re.tpl_host_fuzzy =

    '(?:' +
      re.src_ip4 +
    '|' +
      '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' +
    ')';

  re.tpl_host_no_ip_fuzzy =

    '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';

  re.src_host_strict =

    re.src_host + re.src_host_terminator;

  re.tpl_host_fuzzy_strict =

    re.tpl_host_fuzzy + re.src_host_terminator;

  re.src_host_port_strict =

    re.src_host + re.src_port + re.src_host_terminator;

  re.tpl_host_port_fuzzy_strict =

    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;

  re.tpl_host_port_no_ip_fuzzy_strict =

    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;


  ////////////////////////////////////////////////////////////////////////////////
  // Main rules

  // Rude test fuzzy links by host, for quick deny
  re.tpl_host_fuzzy_test =

    'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';

  re.tpl_email_fuzzy =

      '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' +
      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';

  re.tpl_link_fuzzy =
      // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
      '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';

  re.tpl_link_no_ip_fuzzy =
      // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
      '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';

  return re;
};

},{"uc.micro/categories/Cc/regex":65,"uc.micro/categories/P/regex":67,"uc.micro/categories/Z/regex":68,"uc.micro/properties/Any/regex":70}],7:[function(require,module,exports){
'use strict';


module.exports = require('./lib/');

},{"./lib/":16}],8:[function(require,module,exports){
// HTML5 entities map: { name -> utf16string }
//
'use strict';

/*eslint quotes:0*/
module.exports = require('entities/lib/maps/entities.json');

},{"entities/lib/maps/entities.json":4}],9:[function(require,module,exports){
// List of valid html blocks names, accorting to commonmark spec
// http://jgm.github.io/CommonMark/spec.html#html-blocks

'use strict';


module.exports = [
  'address',
  'article',
  'aside',
  'base',
  'basefont',
  'blockquote',
  'body',
  'caption',
  'center',
  'col',
  'colgroup',
  'dd',
  'details',
  'dialog',
  'dir',
  'div',
  'dl',
  'dt',
  'fieldset',
  'figcaption',
  'figure',
  'footer',
  'form',
  'frame',
  'frameset',
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'head',
  'header',
  'hr',
  'html',
  'iframe',
  'legend',
  'li',
  'link',
  'main',
  'menu',
  'menuitem',
  'nav',
  'noframes',
  'ol',
  'optgroup',
  'option',
  'p',
  'param',
  'section',
  'source',
  'summary',
  'table',
  'tbody',
  'td',
  'tfoot',
  'th',
  'thead',
  'title',
  'tr',
  'track',
  'ul'
];

},{}],10:[function(require,module,exports){
// Regexps to match html elements

'use strict';

var attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';

var unquoted      = '[^"\'=<>`\\x00-\\x20]+';
var single_quoted = "'[^']*'";
var double_quoted = '"[^"]*"';

var attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';

var attribute   = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';

var open_tag    = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';

var close_tag   = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
var comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
var processing  = '<[?][\\s\\S]*?[?]>';
var declaration = '<![A-Z]+\\s+[^>]*>';
var cdata       = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';

var HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +
                        '|' + processing + '|' + declaration + '|' + cdata + ')');
var HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');

module.exports.HTML_TAG_RE = HTML_TAG_RE;
module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;

},{}],11:[function(require,module,exports){
// Utilities
//
'use strict';


function _class(obj) { return Object.prototype.toString.call(obj); }

function isString(obj) { return _class(obj) === '[object String]'; }

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function has(object, key) {
  return _hasOwnProperty.call(object, key);
}

// Merge objects
//
function assign(obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);

  sources.forEach(function (source) {
    if (!source) { return; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be object');
    }

    Object.keys(source).forEach(function (key) {
      obj[key] = source[key];
    });
  });

  return obj;
}

// Remove element from array and put another array at those position.
// Useful for some operations with tokens
function arrayReplaceAt(src, pos, newElements) {
  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
}

////////////////////////////////////////////////////////////////////////////////

function isValidEntityCode(c) {
  /*eslint no-bitwise:0*/
  // broken sequence
  if (c >= 0xD800 && c <= 0xDFFF) { return false; }
  // never used
  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }
  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }
  // control codes
  if (c >= 0x00 && c <= 0x08) { return false; }
  if (c === 0x0B) { return false; }
  if (c >= 0x0E && c <= 0x1F) { return false; }
  if (c >= 0x7F && c <= 0x9F) { return false; }
  // out of range
  if (c > 0x10FFFF) { return false; }
  return true;
}

function fromCodePoint(c) {
  /*eslint no-bitwise:0*/
  if (c > 0xffff) {
    c -= 0x10000;
    var surrogate1 = 0xd800 + (c >> 10),
        surrogate2 = 0xdc00 + (c & 0x3ff);

    return String.fromCharCode(surrogate1, surrogate2);
  }
  return String.fromCharCode(c);
}


var UNESCAPE_MD_RE  = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
var ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;
var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');

var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;

var entities = require('./entities');

function replaceEntityPattern(match, name) {
  var code = 0;

  if (has(entities, name)) {
    return entities[name];
  }

  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
    code = name[1].toLowerCase() === 'x' ?
      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);

    if (isValidEntityCode(code)) {
      return fromCodePoint(code);
    }
  }

  return match;
}

/*function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
}*/

function unescapeMd(str) {
  if (str.indexOf('\\') < 0) { return str; }
  return str.replace(UNESCAPE_MD_RE, '$1');
}

function unescapeAll(str) {
  if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) { return str; }

  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
    if (escaped) { return escaped; }
    return replaceEntityPattern(match, entity);
  });
}

////////////////////////////////////////////////////////////////////////////////

var HTML_ESCAPE_TEST_RE = /[&<>"]/;
var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
var HTML_REPLACEMENTS = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;'
};

function replaceUnsafeChar(ch) {
  return HTML_REPLACEMENTS[ch];
}

function escapeHtml(str) {
  if (HTML_ESCAPE_TEST_RE.test(str)) {
    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
  }
  return str;
}

////////////////////////////////////////////////////////////////////////////////

var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;

function escapeRE(str) {
  return str.replace(REGEXP_ESCAPE_RE, '\\$&');
}

////////////////////////////////////////////////////////////////////////////////

function isSpace(code) {
  switch (code) {
    case 0x09:
    case 0x20:
      return true;
  }
  return false;
}

// Zs (unicode class) || [\t\f\v\r\n]
function isWhiteSpace(code) {
  if (code >= 0x2000 && code <= 0x200A) { return true; }
  switch (code) {
    case 0x09: // \t
    case 0x0A: // \n
    case 0x0B: // \v
    case 0x0C: // \f
    case 0x0D: // \r
    case 0x20:
    case 0xA0:
    case 0x1680:
    case 0x202F:
    case 0x205F:
    case 0x3000:
      return true;
  }
  return false;
}

////////////////////////////////////////////////////////////////////////////////

/*eslint-disable max-len*/
var UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');

// Currently without astral characters support.
function isPunctChar(ch) {
  return UNICODE_PUNCT_RE.test(ch);
}


// Markdown ASCII punctuation characters.
//
// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
//
// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
//
function isMdAsciiPunct(ch) {
  switch (ch) {
    case 0x21/* ! */:
    case 0x22/* " */:
    case 0x23/* # */:
    case 0x24/* $ */:
    case 0x25/* % */:
    case 0x26/* & */:
    case 0x27/* ' */:
    case 0x28/* ( */:
    case 0x29/* ) */:
    case 0x2A/* * */:
    case 0x2B/* + */:
    case 0x2C/* , */:
    case 0x2D/* - */:
    case 0x2E/* . */:
    case 0x2F/* / */:
    case 0x3A/* : */:
    case 0x3B/* ; */:
    case 0x3C/* < */:
    case 0x3D/* = */:
    case 0x3E/* > */:
    case 0x3F/* ? */:
    case 0x40/* @ */:
    case 0x5B/* [ */:
    case 0x5C/* \ */:
    case 0x5D/* ] */:
    case 0x5E/* ^ */:
    case 0x5F/* _ */:
    case 0x60/* ` */:
    case 0x7B/* { */:
    case 0x7C/* | */:
    case 0x7D/* } */:
    case 0x7E/* ~ */:
      return true;
    default:
      return false;
  }
}

// Hepler to unify [reference labels].
//
function normalizeReference(str) {
  // Trim and collapse whitespace
  //
  str = str.trim().replace(/\s+/g, ' ');

  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
  // fixed in v12 (couldn't find any details).
  //
  // So treat this one as a special case
  // (remove this when node v10 is no longer supported).
  //
  if ('ẞ'.toLowerCase() === 'Ṿ') {
    str = str.replace(/ẞ/g, 'ß');
  }

  // .toLowerCase().toUpperCase() should get rid of all differences
  // between letter variants.
  //
  // Simple .toLowerCase() doesn't normalize 125 code points correctly,
  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
  // uppercased versions).
  //
  // Here's an example showing how it happens. Lets take greek letter omega:
  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
  //
  // Unicode entries:
  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
  //
  // Case-insensitive comparison should treat all of them as equivalent.
  //
  // But .toLowerCase() doesn't change ϑ (it's already lowercase),
  // and .toUpperCase() doesn't change ϴ (already uppercase).
  //
  // Applying first lower then upper case normalizes any character:
  // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
  //
  // Note: this is equivalent to unicode case folding; unicode normalization
  // is a different step that is not required here.
  //
  // Final result should be uppercased, because it's later stored in an object
  // (this avoid a conflict with Object.prototype members,
  // most notably, `__proto__`)
  //
  return str.toLowerCase().toUpperCase();
}

////////////////////////////////////////////////////////////////////////////////

// Re-export libraries commonly used in both markdown-it and its plugins,
// so plugins won't have to depend on them explicitly, which reduces their
// bundled size (e.g. a browser build).
//
exports.lib                 = {};
exports.lib.mdurl           = require('mdurl');
exports.lib.ucmicro         = require('uc.micro');

exports.assign              = assign;
exports.isString            = isString;
exports.has                 = has;
exports.unescapeMd          = unescapeMd;
exports.unescapeAll         = unescapeAll;
exports.isValidEntityCode   = isValidEntityCode;
exports.fromCodePoint       = fromCodePoint;
// exports.replaceEntities     = replaceEntities;
exports.escapeHtml          = escapeHtml;
exports.arrayReplaceAt      = arrayReplaceAt;
exports.isSpace             = isSpace;
exports.isWhiteSpace        = isWhiteSpace;
exports.isMdAsciiPunct      = isMdAsciiPunct;
exports.isPunctChar         = isPunctChar;
exports.escapeRE            = escapeRE;
exports.normalizeReference  = normalizeReference;

},{"./entities":8,"mdurl":62,"uc.micro":69,"uc.micro/categories/P/regex":67}],12:[function(require,module,exports){
// Just a shortcut for bulk export
'use strict';


exports.parseLinkLabel       = require('./parse_link_label');
exports.parseLinkDestination = require('./parse_link_destination');
exports.parseLinkTitle       = require('./parse_link_title');

},{"./parse_link_destination":13,"./parse_link_label":14,"./parse_link_title":15}],13:[function(require,module,exports){
// Parse link destination
//
'use strict';


var unescapeAll = require('../common/utils').unescapeAll;


module.exports = function parseLinkDestination(str, pos, max) {
  var code, level,
      lines = 0,
      start = pos,
      result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ''
      };

  if (str.charCodeAt(pos) === 0x3C /* < */) {
    pos++;
    while (pos < max) {
      code = str.charCodeAt(pos);
      if (code === 0x0A /* \n */) { return result; }
      if (code === 0x3C /* < */) { return result; }
      if (code === 0x3E /* > */) {
        result.pos = pos + 1;
        result.str = unescapeAll(str.slice(start + 1, pos));
        result.ok = true;
        return result;
      }
      if (code === 0x5C /* \ */ && pos + 1 < max) {
        pos += 2;
        continue;
      }

      pos++;
    }

    // no closing '>'
    return result;
  }

  // this should be ... } else { ... branch

  level = 0;
  while (pos < max) {
    code = str.charCodeAt(pos);

    if (code === 0x20) { break; }

    // ascii control characters
    if (code < 0x20 || code === 0x7F) { break; }

    if (code === 0x5C /* \ */ && pos + 1 < max) {
      if (str.charCodeAt(pos + 1) === 0x20) { break; }
      pos += 2;
      continue;
    }

    if (code === 0x28 /* ( */) {
      level++;
      if (level > 32) { return result; }
    }

    if (code === 0x29 /* ) */) {
      if (level === 0) { break; }
      level--;
    }

    pos++;
  }

  if (start === pos) { return result; }
  if (level !== 0) { return result; }

  result.str = unescapeAll(str.slice(start, pos));
  result.lines = lines;
  result.pos = pos;
  result.ok = true;
  return result;
};

},{"../common/utils":11}],14:[function(require,module,exports){
// Parse link label
//
// this function assumes that first character ("[") already matches;
// returns the end of the label
//
'use strict';

module.exports = function parseLinkLabel(state, start, disableNested) {
  var level, found, marker, prevPos,
      labelEnd = -1,
      max = state.posMax,
      oldPos = state.pos;

  state.pos = start + 1;
  level = 1;

  while (state.pos < max) {
    marker = state.src.charCodeAt(state.pos);
    if (marker === 0x5D /* ] */) {
      level--;
      if (level === 0) {
        found = true;
        break;
      }
    }

    prevPos = state.pos;
    state.md.inline.skipToken(state);
    if (marker === 0x5B /* [ */) {
      if (prevPos === state.pos - 1) {
        // increase level if we find text `[`, which is not a part of any token
        level++;
      } else if (disableNested) {
        state.pos = oldPos;
        return -1;
      }
    }
  }

  if (found) {
    labelEnd = state.pos;
  }

  // restore old state
  state.pos = oldPos;

  return labelEnd;
};

},{}],15:[function(require,module,exports){
// Parse link title
//
'use strict';


var unescapeAll = require('../common/utils').unescapeAll;


module.exports = function parseLinkTitle(str, pos, max) {
  var code,
      marker,
      lines = 0,
      start = pos,
      result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ''
      };

  if (pos >= max) { return result; }

  marker = str.charCodeAt(pos);

  if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }

  pos++;

  // if opening marker is "(", switch it to closing marker ")"
  if (marker === 0x28) { marker = 0x29; }

  while (pos < max) {
    code = str.charCodeAt(pos);
    if (code === marker) {
      result.pos = pos + 1;
      result.lines = lines;
      result.str = unescapeAll(str.slice(start + 1, pos));
      result.ok = true;
      return result;
    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {
      return result;
    } else if (code === 0x0A) {
      lines++;
    } else if (code === 0x5C /* \ */ && pos + 1 < max) {
      pos++;
      if (str.charCodeAt(pos) === 0x0A) {
        lines++;
      }
    }

    pos++;
  }

  return result;
};

},{"../common/utils":11}],16:[function(require,module,exports){
// Main parser class

'use strict';


var utils        = require('./common/utils');
var helpers      = require('./helpers');
var Renderer     = require('./renderer');
var ParserCore   = require('./parser_core');
var ParserBlock  = require('./parser_block');
var ParserInline = require('./parser_inline');
var LinkifyIt    = require('linkify-it');
var mdurl        = require('mdurl');
var punycode     = require('punycode');


var config = {
  default: require('./presets/default'),
  zero: require('./presets/zero'),
  commonmark: require('./presets/commonmark')
};

////////////////////////////////////////////////////////////////////////////////
//
// This validator can prohibit more than really needed to prevent XSS. It's a
// tradeoff to keep code simple and to be secure by default.
//
// If you need different setup - override validator method as you wish. Or
// replace it with dummy function and use external sanitizer.
//

var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;

function validateLink(url) {
  // url should be normalized at this point, and existing entities are decoded
  var str = url.trim().toLowerCase();

  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;
}

////////////////////////////////////////////////////////////////////////////////


var RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];

function normalizeLink(url) {
  var parsed = mdurl.parse(url, true);

  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode.toASCII(parsed.hostname);
      } catch (er) { /**/ }
    }
  }

  return mdurl.encode(mdurl.format(parsed));
}

function normalizeLinkText(url) {
  var parsed = mdurl.parse(url, true);

  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode.toUnicode(parsed.hostname);
      } catch (er) { /**/ }
    }
  }

  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720
  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');
}


/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre class="hljs"><code>' +
 *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/
function MarkdownIt(presetName, options) {
  if (!(this instanceof MarkdownIt)) {
    return new MarkdownIt(presetName, options);
  }

  if (!options) {
    if (!utils.isString(presetName)) {
      options = presetName || {};
      presetName = 'default';
    }
  }

  /**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.inline = new ParserInline();

  /**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.block = new ParserBlock();

  /**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.core = new ParserCore();

  /**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/
  this.renderer = new Renderer();

  /**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/
  this.linkify = new LinkifyIt();

  /**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/
  this.validateLink = validateLink;

  /**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/
  this.normalizeLink = normalizeLink;

  /**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/
  this.normalizeLinkText = normalizeLinkText;


  // Expose utils & helpers for easy acces from plugins

  /**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
   **/
  this.utils = utils;

  /**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/
  this.helpers = utils.assign({}, helpers);


  this.options = {};
  this.configure(presetName);

  if (options) { this.set(options); }
}


/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/
MarkdownIt.prototype.set = function (options) {
  utils.assign(this.options, options);
  return this;
};


/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you will - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/
MarkdownIt.prototype.configure = function (presets) {
  var self = this, presetName;

  if (utils.isString(presets)) {
    presetName = presets;
    presets = config[presetName];
    if (!presets) { throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name'); }
  }

  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\'t be empty'); }

  if (presets.options) { self.set(presets.options); }

  if (presets.components) {
    Object.keys(presets.components).forEach(function (name) {
      if (presets.components[name].rules) {
        self[name].ruler.enableOnly(presets.components[name].rules);
      }
      if (presets.components[name].rules2) {
        self[name].ruler2.enableOnly(presets.components[name].rules2);
      }
    });
  }
  return this;
};


/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/
MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
  var result = [];

  if (!Array.isArray(list)) { list = [ list ]; }

  [ 'core', 'block', 'inline' ].forEach(function (chain) {
    result = result.concat(this[chain].ruler.enable(list, true));
  }, this);

  result = result.concat(this.inline.ruler2.enable(list, true));

  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });

  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);
  }

  return this;
};


/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/
MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
  var result = [];

  if (!Array.isArray(list)) { list = [ list ]; }

  [ 'core', 'block', 'inline' ].forEach(function (chain) {
    result = result.concat(this[chain].ruler.disable(list, true));
  }, this);

  result = result.concat(this.inline.ruler2.disable(list, true));

  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });

  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);
  }
  return this;
};


/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/
MarkdownIt.prototype.use = function (plugin /*, params, ... */) {
  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));
  plugin.apply(plugin, args);
  return this;
};


/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and return list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/
MarkdownIt.prototype.parse = function (src, env) {
  if (typeof src !== 'string') {
    throw new Error('Input data should be a String');
  }

  var state = new this.core.State(src, this, env);

  this.core.process(state);

  return state.tokens;
};


/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/
MarkdownIt.prototype.render = function (src, env) {
  env = env || {};

  return this.renderer.render(this.parse(src, env), this.options, env);
};


/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/
MarkdownIt.prototype.parseInline = function (src, env) {
  var state = new this.core.State(src, this, env);

  state.inlineMode = true;
  this.core.process(state);

  return state.tokens;
};


/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/
MarkdownIt.prototype.renderInline = function (src, env) {
  env = env || {};

  return this.renderer.render(this.parseInline(src, env), this.options, env);
};


module.exports = MarkdownIt;

},{"./common/utils":11,"./helpers":12,"./parser_block":17,"./parser_core":18,"./parser_inline":19,"./presets/commonmark":20,"./presets/default":21,"./presets/zero":22,"./renderer":23,"linkify-it":5,"mdurl":62,"punycode":64}],17:[function(require,module,exports){
/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/
'use strict';


var Ruler           = require('./ruler');


var _rules = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],
  [ 'code',       require('./rules_block/code') ],
  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],
  [ 'reference',  require('./rules_block/reference') ],
  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],
  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],
  [ 'lheading',   require('./rules_block/lheading') ],
  [ 'paragraph',  require('./rules_block/paragraph') ]
];


/**
 * new ParserBlock()
 **/
function ParserBlock() {
  /**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/
  this.ruler = new Ruler();

  for (var i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });
  }
}


// Generate tokens for input range
//
ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
  var ok, i,
      rules = this.ruler.getRules(''),
      len = rules.length,
      line = startLine,
      hasEmptyLines = false,
      maxNesting = state.md.options.maxNesting;

  while (line < endLine) {
    state.line = line = state.skipEmptyLines(line);
    if (line >= endLine) { break; }

    // Termination condition for nested calls.
    // Nested calls currently used for blockquotes & lists
    if (state.sCount[line] < state.blkIndent) { break; }

    // If nesting level exceeded - skip tail to the end. That's not ordinary
    // situation and we should not care about content.
    if (state.level >= maxNesting) {
      state.line = endLine;
      break;
    }

    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.line`
    // - update `state.tokens`
    // - return true

    for (i = 0; i < len; i++) {
      ok = rules[i](state, line, endLine, false);
      if (ok) { break; }
    }

    // set state.tight if we had an empty line before current tag
    // i.e. latest empty line should not count
    state.tight = !hasEmptyLines;

    // paragraph might "eat" one newline after it in nested lists
    if (state.isEmpty(state.line - 1)) {
      hasEmptyLines = true;
    }

    line = state.line;

    if (line < endLine && state.isEmpty(line)) {
      hasEmptyLines = true;
      line++;
      state.line = line;
    }
  }
};


/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/
ParserBlock.prototype.parse = function (src, md, env, outTokens) {
  var state;

  if (!src) { return; }

  state = new this.State(src, md, env, outTokens);

  this.tokenize(state, state.line, state.lineMax);
};


ParserBlock.prototype.State = require('./rules_block/state_block');


module.exports = ParserBlock;

},{"./ruler":24,"./rules_block/blockquote":25,"./rules_block/code":26,"./rules_block/fence":27,"./rules_block/heading":28,"./rules_block/hr":29,"./rules_block/html_block":30,"./rules_block/lheading":31,"./rules_block/list":32,"./rules_block/paragraph":33,"./rules_block/reference":34,"./rules_block/state_block":35,"./rules_block/table":36}],18:[function(require,module,exports){
/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/
'use strict';


var Ruler  = require('./ruler');


var _rules = [
  [ 'normalize',      require('./rules_core/normalize')      ],
  [ 'block',          require('./rules_core/block')          ],
  [ 'inline',         require('./rules_core/inline')         ],
  [ 'linkify',        require('./rules_core/linkify')        ],
  [ 'replacements',   require('./rules_core/replacements')   ],
  [ 'smartquotes',    require('./rules_core/smartquotes')    ]
];


/**
 * new Core()
 **/
function Core() {
  /**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/
  this.ruler = new Ruler();

  for (var i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1]);
  }
}


/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/
Core.prototype.process = function (state) {
  var i, l, rules;

  rules = this.ruler.getRules('');

  for (i = 0, l = rules.length; i < l; i++) {
    rules[i](state);
  }
};

Core.prototype.State = require('./rules_core/state_core');


module.exports = Core;

},{"./ruler":24,"./rules_core/block":37,"./rules_core/inline":38,"./rules_core/linkify":39,"./rules_core/normalize":40,"./rules_core/replacements":41,"./rules_core/smartquotes":42,"./rules_core/state_core":43}],19:[function(require,module,exports){
/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/
'use strict';


var Ruler           = require('./ruler');


////////////////////////////////////////////////////////////////////////////////
// Parser rules

var _rules = [
  [ 'text',            require('./rules_inline/text') ],
  [ 'newline',         require('./rules_inline/newline') ],
  [ 'escape',          require('./rules_inline/escape') ],
  [ 'backticks',       require('./rules_inline/backticks') ],
  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],
  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],
  [ 'link',            require('./rules_inline/link') ],
  [ 'image',           require('./rules_inline/image') ],
  [ 'autolink',        require('./rules_inline/autolink') ],
  [ 'html_inline',     require('./rules_inline/html_inline') ],
  [ 'entity',          require('./rules_inline/entity') ]
];

var _rules2 = [
  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],
  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],
  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],
  [ 'text_collapse',   require('./rules_inline/text_collapse') ]
];


/**
 * new ParserInline()
 **/
function ParserInline() {
  var i;

  /**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/
  this.ruler = new Ruler();

  for (i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1]);
  }

  /**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/
  this.ruler2 = new Ruler();

  for (i = 0; i < _rules2.length; i++) {
    this.ruler2.push(_rules2[i][0], _rules2[i][1]);
  }
}


// Skip single token by running all rules in validation mode;
// returns `true` if any rule reported success
//
ParserInline.prototype.skipToken = function (state) {
  var ok, i, pos = state.pos,
      rules = this.ruler.getRules(''),
      len = rules.length,
      maxNesting = state.md.options.maxNesting,
      cache = state.cache;


  if (typeof cache[pos] !== 'undefined') {
    state.pos = cache[pos];
    return;
  }

  if (state.level < maxNesting) {
    for (i = 0; i < len; i++) {
      // Increment state.level and decrement it later to limit recursion.
      // It's harmless to do here, because no tokens are created. But ideally,
      // we'd need a separate private state variable for this purpose.
      //
      state.level++;
      ok = rules[i](state, true);
      state.level--;

      if (ok) { break; }
    }
  } else {
    // Too much nesting, just skip until the end of the paragraph.
    //
    // NOTE: this will cause links to behave incorrectly in the following case,
    //       when an amount of `[` is exactly equal to `maxNesting + 1`:
    //
    //       [[[[[[[[[[[[[[[[[[[[[foo]()
    //
    // TODO: remove this workaround when CM standard will allow nested links
    //       (we can replace it by preventing links from being parsed in
    //       validation mode)
    //
    state.pos = state.posMax;
  }

  if (!ok) { state.pos++; }
  cache[pos] = state.pos;
};


// Generate tokens for input range
//
ParserInline.prototype.tokenize = function (state) {
  var ok, i,
      rules = this.ruler.getRules(''),
      len = rules.length,
      end = state.posMax,
      maxNesting = state.md.options.maxNesting;

  while (state.pos < end) {
    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.pos`
    // - update `state.tokens`
    // - return true

    if (state.level < maxNesting) {
      for (i = 0; i < len; i++) {
        ok = rules[i](state, false);
        if (ok) { break; }
      }
    }

    if (ok) {
      if (state.pos >= end) { break; }
      continue;
    }

    state.pending += state.src[state.pos++];
  }

  if (state.pending) {
    state.pushPending();
  }
};


/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/
ParserInline.prototype.parse = function (str, md, env, outTokens) {
  var i, rules, len;
  var state = new this.State(str, md, env, outTokens);

  this.tokenize(state);

  rules = this.ruler2.getRules('');
  len = rules.length;

  for (i = 0; i < len; i++) {
    rules[i](state);
  }
};


ParserInline.prototype.State = require('./rules_inline/state_inline');


module.exports = ParserInline;

},{"./ruler":24,"./rules_inline/autolink":44,"./rules_inline/backticks":45,"./rules_inline/balance_pairs":46,"./rules_inline/emphasis":47,"./rules_inline/entity":48,"./rules_inline/escape":49,"./rules_inline/html_inline":50,"./rules_inline/image":51,"./rules_inline/link":52,"./rules_inline/newline":53,"./rules_inline/state_inline":54,"./rules_inline/strikethrough":55,"./rules_inline/text":56,"./rules_inline/text_collapse":57}],20:[function(require,module,exports){
// Commonmark default options

'use strict';


module.exports = {
  options: {
    html:         true,         // Enable HTML tags in source
    xhtmlOut:     true,         // Use '/' to close single tags (<br />)
    breaks:       false,        // Convert '\n' in paragraphs into <br>
    langPrefix:   'language-',  // CSS language prefix for fenced blocks
    linkify:      false,        // autoconvert URL-like texts to links

    // Enable some language-neutral replacements + quotes beautification
    typographer:  false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    maxNesting:   20            // Internal protection, recursion limit
  },

  components: {

    core: {
      rules: [
        'normalize',
        'block',
        'inline'
      ]
    },

    block: {
      rules: [
        'blockquote',
        'code',
        'fence',
        'heading',
        'hr',
        'html_block',
        'lheading',
        'list',
        'reference',
        'paragraph'
      ]
    },

    inline: {
      rules: [
        'autolink',
        'backticks',
        'emphasis',
        'entity',
        'escape',
        'html_inline',
        'image',
        'link',
        'newline',
        'text'
      ],
      rules2: [
        'balance_pairs',
        'emphasis',
        'text_collapse'
      ]
    }
  }
};

},{}],21:[function(require,module,exports){
// markdown-it default options

'use strict';


module.exports = {
  options: {
    html:         false,        // Enable HTML tags in source
    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
    breaks:       false,        // Convert '\n' in paragraphs into <br>
    langPrefix:   'language-',  // CSS language prefix for fenced blocks
    linkify:      false,        // autoconvert URL-like texts to links

    // Enable some language-neutral replacements + quotes beautification
    typographer:  false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    maxNesting:   100            // Internal protection, recursion limit
  },

  components: {

    core: {},
    block: {},
    inline: {}
  }
};

},{}],22:[function(require,module,exports){
// "Zero" preset, with nothing enabled. Useful for manual configuring of simple
// modes. For example, to parse bold/italic only.

'use strict';


module.exports = {
  options: {
    html:         false,        // Enable HTML tags in source
    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
    breaks:       false,        // Convert '\n' in paragraphs into <br>
    langPrefix:   'language-',  // CSS language prefix for fenced blocks
    linkify:      false,        // autoconvert URL-like texts to links

    // Enable some language-neutral replacements + quotes beautification
    typographer:  false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    maxNesting:   20            // Internal protection, recursion limit
  },

  components: {

    core: {
      rules: [
        'normalize',
        'block',
        'inline'
      ]
    },

    block: {
      rules: [
        'paragraph'
      ]
    },

    inline: {
      rules: [
        'text'
      ],
      rules2: [
        'balance_pairs',
        'text_collapse'
      ]
    }
  }
};

},{}],23:[function(require,module,exports){
/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/
'use strict';


var assign          = require('./common/utils').assign;
var unescapeAll     = require('./common/utils').unescapeAll;
var escapeHtml      = require('./common/utils').escapeHtml;


////////////////////////////////////////////////////////////////////////////////

var default_rules = {};


default_rules.code_inline = function (tokens, idx, options, env, slf) {
  var token = tokens[idx];

  return  '<code' + slf.renderAttrs(token) + '>' +
          escapeHtml(tokens[idx].content) +
          '</code>';
};


default_rules.code_block = function (tokens, idx, options, env, slf) {
  var token = tokens[idx];

  return  '<pre' + slf.renderAttrs(token) + '><code>' +
          escapeHtml(tokens[idx].content) +
          '</code></pre>\n';
};


default_rules.fence = function (tokens, idx, options, env, slf) {
  var token = tokens[idx],
      info = token.info ? unescapeAll(token.info).trim() : '',
      langName = '',
      langAttrs = '',
      highlighted, i, arr, tmpAttrs, tmpToken;

  if (info) {
    arr = info.split(/(\s+)/g);
    langName = arr[0];
    langAttrs = arr.slice(2).join('');
  }

  if (options.highlight) {
    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);
  } else {
    highlighted = escapeHtml(token.content);
  }

  if (highlighted.indexOf('<pre') === 0) {
    return highlighted + '\n';
  }

  // If language exists, inject class gently, without modifying original token.
  // May be, one day we will add .deepClone() for token and simplify this part, but
  // now we prefer to keep things local.
  if (info) {
    i        = token.attrIndex('class');
    tmpAttrs = token.attrs ? token.attrs.slice() : [];

    if (i < 0) {
      tmpAttrs.push([ 'class', options.langPrefix + langName ]);
    } else {
      tmpAttrs[i] = tmpAttrs[i].slice();
      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
    }

    // Fake token just to render attributes
    tmpToken = {
      attrs: tmpAttrs
    };

    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'
          + highlighted
          + '</code></pre>\n';
  }


  return  '<pre><code' + slf.renderAttrs(token) + '>'
        + highlighted
        + '</code></pre>\n';
};


default_rules.image = function (tokens, idx, options, env, slf) {
  var token = tokens[idx];

  // "alt" attr MUST be set, even if empty. Because it's mandatory and
  // should be placed on proper position for tests.
  //
  // Replace content with actual value

  token.attrs[token.attrIndex('alt')][1] =
    slf.renderInlineAsText(token.children, options, env);

  return slf.renderToken(tokens, idx, options);
};


default_rules.hardbreak = function (tokens, idx, options /*, env */) {
  return options.xhtmlOut ? '<br />\n' : '<br>\n';
};
default_rules.softbreak = function (tokens, idx, options /*, env */) {
  return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n';
};


default_rules.text = function (tokens, idx /*, options, env */) {
  return escapeHtml(tokens[idx].content);
};


default_rules.html_block = function (tokens, idx /*, options, env */) {
  return tokens[idx].content;
};
default_rules.html_inline = function (tokens, idx /*, options, env */) {
  return tokens[idx].content;
};


/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/
function Renderer() {

  /**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/
  this.rules = assign({}, default_rules);
}


/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/
Renderer.prototype.renderAttrs = function renderAttrs(token) {
  var i, l, result;

  if (!token.attrs) { return ''; }

  result = '';

  for (i = 0, l = token.attrs.length; i < l; i++) {
    result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
  }

  return result;
};


/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/
Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
  var nextToken,
      result = '',
      needLf = false,
      token = tokens[idx];

  // Tight list paragraphs
  if (token.hidden) {
    return '';
  }

  // Insert a newline between hidden paragraph and subsequent opening
  // block-level tag.
  //
  // For example, here we should insert a newline before blockquote:
  //  - a
  //    >
  //
  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
    result += '\n';
  }

  // Add token name, e.g. `<img`
  result += (token.nesting === -1 ? '</' : '<') + token.tag;

  // Encode attributes, e.g. `<img src="foo"`
  result += this.renderAttrs(token);

  // Add a slash for self-closing tags, e.g. `<img src="foo" /`
  if (token.nesting === 0 && options.xhtmlOut) {
    result += ' /';
  }

  // Check if we need to add a newline after this tag
  if (token.block) {
    needLf = true;

    if (token.nesting === 1) {
      if (idx + 1 < tokens.length) {
        nextToken = tokens[idx + 1];

        if (nextToken.type === 'inline' || nextToken.hidden) {
          // Block-level tag containing an inline tag.
          //
          needLf = false;

        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
          // Opening tag + closing tag of the same type. E.g. `<li></li>`.
          //
          needLf = false;
        }
      }
    }
  }

  result += needLf ? '>\n' : '>';

  return result;
};


/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/
Renderer.prototype.renderInline = function (tokens, options, env) {
  var type,
      result = '',
      rules = this.rules;

  for (var i = 0, len = tokens.length; i < len; i++) {
    type = tokens[i].type;

    if (typeof rules[type] !== 'undefined') {
      result += rules[type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options);
    }
  }

  return result;
};


/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/
Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
  var result = '';

  for (var i = 0, len = tokens.length; i < len; i++) {
    if (tokens[i].type === 'text') {
      result += tokens[i].content;
    } else if (tokens[i].type === 'image') {
      result += this.renderInlineAsText(tokens[i].children, options, env);
    } else if (tokens[i].type === 'softbreak') {
      result += '\n';
    }
  }

  return result;
};


/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/
Renderer.prototype.render = function (tokens, options, env) {
  var i, len, type,
      result = '',
      rules = this.rules;

  for (i = 0, len = tokens.length; i < len; i++) {
    type = tokens[i].type;

    if (type === 'inline') {
      result += this.renderInline(tokens[i].children, options, env);
    } else if (typeof rules[type] !== 'undefined') {
      result += rules[tokens[i].type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options, env);
    }
  }

  return result;
};

module.exports = Renderer;

},{"./common/utils":11}],24:[function(require,module,exports){
/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/
'use strict';


/**
 * new Ruler()
 **/
function Ruler() {
  // List of added rules. Each element is:
  //
  // {
  //   name: XXX,
  //   enabled: Boolean,
  //   fn: Function(),
  //   alt: [ name2, name3 ]
  // }
  //
  this.__rules__ = [];

  // Cached rule chains.
  //
  // First level - chain name, '' for default.
  // Second level - diginal anchor for fast filtering by charcodes.
  //
  this.__cache__ = null;
}

////////////////////////////////////////////////////////////////////////////////
// Helper methods, should not be used directly


// Find rule index by name
//
Ruler.prototype.__find__ = function (name) {
  for (var i = 0; i < this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i;
    }
  }
  return -1;
};


// Build rules lookup cache
//
Ruler.prototype.__compile__ = function () {
  var self = this;
  var chains = [ '' ];

  // collect unique names
  self.__rules__.forEach(function (rule) {
    if (!rule.enabled) { return; }

    rule.alt.forEach(function (altName) {
      if (chains.indexOf(altName) < 0) {
        chains.push(altName);
      }
    });
  });

  self.__cache__ = {};

  chains.forEach(function (chain) {
    self.__cache__[chain] = [];
    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) { return; }

      if (chain && rule.alt.indexOf(chain) < 0) { return; }

      self.__cache__[chain].push(rule.fn);
    });
  });
};


/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.at = function (name, fn, options) {
  var index = this.__find__(name);
  var opt = options || {};

  if (index === -1) { throw new Error('Parser rule not found: ' + name); }

  this.__rules__[index].fn = fn;
  this.__rules__[index].alt = opt.alt || [];
  this.__cache__ = null;
};


/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
  var index = this.__find__(beforeName);
  var opt = options || {};

  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }

  this.__rules__.splice(index, 0, {
    name: ruleName,
    enabled: true,
    fn: fn,
    alt: opt.alt || []
  });

  this.__cache__ = null;
};


/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.after = function (afterName, ruleName, fn, options) {
  var index = this.__find__(afterName);
  var opt = options || {};

  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }

  this.__rules__.splice(index + 1, 0, {
    name: ruleName,
    enabled: true,
    fn: fn,
    alt: opt.alt || []
  });

  this.__cache__ = null;
};

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.push = function (ruleName, fn, options) {
  var opt = options || {};

  this.__rules__.push({
    name: ruleName,
    enabled: true,
    fn: fn,
    alt: opt.alt || []
  });

  this.__cache__ = null;
};


/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.enable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [ list ]; }

  var result = [];

  // Search by name and enable
  list.forEach(function (name) {
    var idx = this.__find__(name);

    if (idx < 0) {
      if (ignoreInvalid) { return; }
      throw new Error('Rules manager: invalid rule name ' + name);
    }
    this.__rules__[idx].enabled = true;
    result.push(name);
  }, this);

  this.__cache__ = null;
  return result;
};


/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/
Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [ list ]; }

  this.__rules__.forEach(function (rule) { rule.enabled = false; });

  this.enable(list, ignoreInvalid);
};


/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.disable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [ list ]; }

  var result = [];

  // Search by name and disable
  list.forEach(function (name) {
    var idx = this.__find__(name);

    if (idx < 0) {
      if (ignoreInvalid) { return; }
      throw new Error('Rules manager: invalid rule name ' + name);
    }
    this.__rules__[idx].enabled = false;
    result.push(name);
  }, this);

  this.__cache__ = null;
  return result;
};


/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/
Ruler.prototype.getRules = function (chainName) {
  if (this.__cache__ === null) {
    this.__compile__();
  }

  // Chain can be empty, if rules disabled. But we still have to return Array.
  return this.__cache__[chainName] || [];
};

module.exports = Ruler;

},{}],25:[function(require,module,exports){
// Block quotes

'use strict';

var isSpace = require('../common/utils').isSpace;


module.exports = function blockquote(state, startLine, endLine, silent) {
  var adjustTab,
      ch,
      i,
      initial,
      l,
      lastLineEmpty,
      lines,
      nextLine,
      offset,
      oldBMarks,
      oldBSCount,
      oldIndent,
      oldParentType,
      oldSCount,
      oldTShift,
      spaceAfterMarker,
      terminate,
      terminatorRules,
      token,
      isOutdented,
      oldLineMax = state.lineMax,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  // check the block quote marker
  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }

  // we know that it's going to be a valid blockquote,
  // so no point trying to find the end of it in silent mode
  if (silent) { return true; }

  // set offset past spaces and ">"
  initial = offset = state.sCount[startLine] + 1;

  // skip one optional space after '>'
  if (state.src.charCodeAt(pos) === 0x20 /* space */) {
    // ' >   test '
    //     ^ -- position start of line here:
    pos++;
    initial++;
    offset++;
    adjustTab = false;
    spaceAfterMarker = true;
  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
    spaceAfterMarker = true;

    if ((state.bsCount[startLine] + offset) % 4 === 3) {
      // '  >\t  test '
      //       ^ -- position start of line here (tab has width===1)
      pos++;
      initial++;
      offset++;
      adjustTab = false;
    } else {
      // ' >\t  test '
      //    ^ -- position start of line here + shift bsCount slightly
      //         to make extra space appear
      adjustTab = true;
    }
  } else {
    spaceAfterMarker = false;
  }

  oldBMarks = [ state.bMarks[startLine] ];
  state.bMarks[startLine] = pos;

  while (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (isSpace(ch)) {
      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
      } else {
        offset++;
      }
    } else {
      break;
    }

    pos++;
  }

  oldBSCount = [ state.bsCount[startLine] ];
  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);

  lastLineEmpty = pos >= max;

  oldSCount = [ state.sCount[startLine] ];
  state.sCount[startLine] = offset - initial;

  oldTShift = [ state.tShift[startLine] ];
  state.tShift[startLine] = pos - state.bMarks[startLine];

  terminatorRules = state.md.block.ruler.getRules('blockquote');

  oldParentType = state.parentType;
  state.parentType = 'blockquote';

  // Search the end of the block
  //
  // Block ends with either:
  //  1. an empty line outside:
  //     ```
  //     > test
  //
  //     ```
  //  2. an empty line inside:
  //     ```
  //     >
  //     test
  //     ```
  //  3. another tag:
  //     ```
  //     > test
  //      - - -
  //     ```
  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
    // check if it's outdented, i.e. it's inside list item and indented
    // less than said list item:
    //
    // ```
    // 1. anything
    //    > current blockquote
    // 2. checking this line
    // ```
    isOutdented = state.sCount[nextLine] < state.blkIndent;

    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];

    if (pos >= max) {
      // Case 1: line is not inside the blockquote, and this line is empty.
      break;
    }

    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {
      // This line is inside the blockquote.

      // set offset past spaces and ">"
      initial = offset = state.sCount[nextLine] + 1;

      // skip one optional space after '>'
      if (state.src.charCodeAt(pos) === 0x20 /* space */) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++;
        initial++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
        spaceAfterMarker = true;

        if ((state.bsCount[nextLine] + offset) % 4 === 3) {
          // '  >\t  test '
          //       ^ -- position start of line here (tab has width===1)
          pos++;
          initial++;
          offset++;
          adjustTab = false;
        } else {
          // ' >\t  test '
          //    ^ -- position start of line here + shift bsCount slightly
          //         to make extra space appear
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }

      oldBMarks.push(state.bMarks[nextLine]);
      state.bMarks[nextLine] = pos;

      while (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (isSpace(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }

        pos++;
      }

      lastLineEmpty = pos >= max;

      oldBSCount.push(state.bsCount[nextLine]);
      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);

      oldSCount.push(state.sCount[nextLine]);
      state.sCount[nextLine] = offset - initial;

      oldTShift.push(state.tShift[nextLine]);
      state.tShift[nextLine] = pos - state.bMarks[nextLine];
      continue;
    }

    // Case 2: line is not inside the blockquote, and the last line was empty.
    if (lastLineEmpty) { break; }

    // Case 3: another tag found.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }

    if (terminate) {
      // Quirk to enforce "hard termination mode" for paragraphs;
      // normally if you call `tokenize(state, startLine, nextLine)`,
      // paragraphs will look below nextLine for paragraph continuation,
      // but if blockquote is terminated by another tag, they shouldn't
      state.lineMax = nextLine;

      if (state.blkIndent !== 0) {
        // state.blkIndent was non-zero, we now set it to zero,
        // so we need to re-calculate all offsets to appear as
        // if indent wasn't changed
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] -= state.blkIndent;
      }

      break;
    }

    oldBMarks.push(state.bMarks[nextLine]);
    oldBSCount.push(state.bsCount[nextLine]);
    oldTShift.push(state.tShift[nextLine]);
    oldSCount.push(state.sCount[nextLine]);

    // A negative indentation means that this is a paragraph continuation
    //
    state.sCount[nextLine] = -1;
  }

  oldIndent = state.blkIndent;
  state.blkIndent = 0;

  token        = state.push('blockquote_open', 'blockquote', 1);
  token.markup = '>';
  token.map    = lines = [ startLine, 0 ];

  state.md.block.tokenize(state, startLine, nextLine);

  token        = state.push('blockquote_close', 'blockquote', -1);
  token.markup = '>';

  state.lineMax = oldLineMax;
  state.parentType = oldParentType;
  lines[1] = state.line;

  // Restore original tShift; this might not be necessary since the parser
  // has already been here, but just to make sure we can do that.
  for (i = 0; i < oldTShift.length; i++) {
    state.bMarks[i + startLine] = oldBMarks[i];
    state.tShift[i + startLine] = oldTShift[i];
    state.sCount[i + startLine] = oldSCount[i];
    state.bsCount[i + startLine] = oldBSCount[i];
  }
  state.blkIndent = oldIndent;

  return true;
};

},{"../common/utils":11}],26:[function(require,module,exports){
// Code block (4 spaces padded)

'use strict';


module.exports = function code(state, startLine, endLine/*, silent*/) {
  var nextLine, last, token;

  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }

  last = nextLine = startLine + 1;

  while (nextLine < endLine) {
    if (state.isEmpty(nextLine)) {
      nextLine++;
      continue;
    }

    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      nextLine++;
      last = nextLine;
      continue;
    }
    break;
  }

  state.line = last;

  token         = state.push('code_block', 'code', 0);
  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\n';
  token.map     = [ startLine, state.line ];

  return true;
};

},{}],27:[function(require,module,exports){
// fences (``` lang, ~~~ lang)

'use strict';


module.exports = function fence(state, startLine, endLine, silent) {
  var marker, len, params, nextLine, mem, token, markup,
      haveEndMarker = false,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  if (pos + 3 > max) { return false; }

  marker = state.src.charCodeAt(pos);

  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
    return false;
  }

  // scan marker length
  mem = pos;
  pos = state.skipChars(pos, marker);

  len = pos - mem;

  if (len < 3) { return false; }

  markup = state.src.slice(mem, pos);
  params = state.src.slice(pos, max);

  if (marker === 0x60 /* ` */) {
    if (params.indexOf(String.fromCharCode(marker)) >= 0) {
      return false;
    }
  }

  // Since start is found, we can report success here in validation mode
  if (silent) { return true; }

  // search end of block
  nextLine = startLine;

  for (;;) {
    nextLine++;
    if (nextLine >= endLine) {
      // unclosed block should be autoclosed by end of document.
      // also block seems to be autoclosed by end of parent
      break;
    }

    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];

    if (pos < max && state.sCount[nextLine] < state.blkIndent) {
      // non-empty line with negative indent should stop the list:
      // - ```
      //  test
      break;
    }

    if (state.src.charCodeAt(pos) !== marker) { continue; }

    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      // closing fence should be indented less than 4 spaces
      continue;
    }

    pos = state.skipChars(pos, marker);

    // closing code fence must be at least as long as the opening one
    if (pos - mem < len) { continue; }

    // make sure tail has spaces only
    pos = state.skipSpaces(pos);

    if (pos < max) { continue; }

    haveEndMarker = true;
    // found!
    break;
  }

  // If a fence has heading spaces, they should be removed from its inner block
  len = state.sCount[startLine];

  state.line = nextLine + (haveEndMarker ? 1 : 0);

  token         = state.push('fence', 'code', 0);
  token.info    = params;
  token.content = state.getLines(startLine + 1, nextLine, len, true);
  token.markup  = markup;
  token.map     = [ startLine, state.line ];

  return true;
};

},{}],28:[function(require,module,exports){
// heading (#, ##, ...)

'use strict';

var isSpace = require('../common/utils').isSpace;


module.exports = function heading(state, startLine, endLine, silent) {
  var ch, level, tmp, token,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  ch  = state.src.charCodeAt(pos);

  if (ch !== 0x23/* # */ || pos >= max) { return false; }

  // count heading level
  level = 1;
  ch = state.src.charCodeAt(++pos);
  while (ch === 0x23/* # */ && pos < max && level <= 6) {
    level++;
    ch = state.src.charCodeAt(++pos);
  }

  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }

  if (silent) { return true; }

  // Let's cut tails like '    ###  ' from the end of string

  max = state.skipSpacesBack(max, pos);
  tmp = state.skipCharsBack(max, 0x23, pos); // #
  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
    max = tmp;
  }

  state.line = startLine + 1;

  token        = state.push('heading_open', 'h' + String(level), 1);
  token.markup = '########'.slice(0, level);
  token.map    = [ startLine, state.line ];

  token          = state.push('inline', '', 0);
  token.content  = state.src.slice(pos, max).trim();
  token.map      = [ startLine, state.line ];
  token.children = [];

  token        = state.push('heading_close', 'h' + String(level), -1);
  token.markup = '########'.slice(0, level);

  return true;
};

},{"../common/utils":11}],29:[function(require,module,exports){
// Horizontal rule

'use strict';

var isSpace = require('../common/utils').isSpace;


module.exports = function hr(state, startLine, endLine, silent) {
  var marker, cnt, ch, token,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  marker = state.src.charCodeAt(pos++);

  // Check hr marker
  if (marker !== 0x2A/* * */ &&
      marker !== 0x2D/* - */ &&
      marker !== 0x5F/* _ */) {
    return false;
  }

  // markers can be mixed with spaces, but there should be at least 3 of them

  cnt = 1;
  while (pos < max) {
    ch = state.src.charCodeAt(pos++);
    if (ch !== marker && !isSpace(ch)) { return false; }
    if (ch === marker) { cnt++; }
  }

  if (cnt < 3) { return false; }

  if (silent) { return true; }

  state.line = startLine + 1;

  token        = state.push('hr', 'hr', 0);
  token.map    = [ startLine, state.line ];
  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));

  return true;
};

},{"../common/utils":11}],30:[function(require,module,exports){
// HTML block

'use strict';


var block_names = require('../common/html_blocks');
var HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;

// An array of opening and corresponding closing sequences for html tags,
// last argument defines whether it can terminate a paragraph or not
//
var HTML_SEQUENCES = [
  [ /^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true ],
  [ /^<!--/,        /-->/,   true ],
  [ /^<\?/,         /\?>/,   true ],
  [ /^<![A-Z]/,     />/,     true ],
  [ /^<!\[CDATA\[/, /\]\]>/, true ],
  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true ],
  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'),  /^$/, false ]
];


module.exports = function html_block(state, startLine, endLine, silent) {
  var i, nextLine, token, lineText,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  if (!state.md.options.html) { return false; }

  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

  lineText = state.src.slice(pos, max);

  for (i = 0; i < HTML_SEQUENCES.length; i++) {
    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }
  }

  if (i === HTML_SEQUENCES.length) { return false; }

  if (silent) {
    // true if this sequence can be a terminator, false otherwise
    return HTML_SEQUENCES[i][2];
  }

  nextLine = startLine + 1;

  // If we are here - we detected HTML block.
  // Let's roll down till block end.
  if (!HTML_SEQUENCES[i][1].test(lineText)) {
    for (; nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) { break; }

      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];
      lineText = state.src.slice(pos, max);

      if (HTML_SEQUENCES[i][1].test(lineText)) {
        if (lineText.length !== 0) { nextLine++; }
        break;
      }
    }
  }

  state.line = nextLine;

  token         = state.push('html_block', '', 0);
  token.map     = [ startLine, nextLine ];
  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);

  return true;
};

},{"../common/html_blocks":9,"../common/html_re":10}],31:[function(require,module,exports){
// lheading (---, ===)

'use strict';


module.exports = function lheading(state, startLine, endLine/*, silent*/) {
  var content, terminate, i, l, token, pos, max, level, marker,
      nextLine = startLine + 1, oldParentType,
      terminatorRules = state.md.block.ruler.getRules('paragraph');

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  oldParentType = state.parentType;
  state.parentType = 'paragraph'; // use paragraph to match terminatorRules

  // jump line-by-line until empty one or EOF
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

    //
    // Check for underline in setext header
    //
    if (state.sCount[nextLine] >= state.blkIndent) {
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];

      if (pos < max) {
        marker = state.src.charCodeAt(pos);

        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {
          pos = state.skipChars(pos, marker);
          pos = state.skipSpaces(pos);

          if (pos >= max) {
            level = (marker === 0x3D/* = */ ? 1 : 2);
            break;
          }
        }
      }
    }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue; }

    // Some tags can terminate paragraph without empty line.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }
  }

  if (!level) {
    // Didn't find valid underline
    return false;
  }

  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

  state.line = nextLine + 1;

  token          = state.push('heading_open', 'h' + String(level), 1);
  token.markup   = String.fromCharCode(marker);
  token.map      = [ startLine, state.line ];

  token          = state.push('inline', '', 0);
  token.content  = content;
  token.map      = [ startLine, state.line - 1 ];
  token.children = [];

  token          = state.push('heading_close', 'h' + String(level), -1);
  token.markup   = String.fromCharCode(marker);

  state.parentType = oldParentType;

  return true;
};

},{}],32:[function(require,module,exports){
// Lists

'use strict';

var isSpace = require('../common/utils').isSpace;


// Search `[-+*][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipBulletListMarker(state, startLine) {
  var marker, pos, max, ch;

  pos = state.bMarks[startLine] + state.tShift[startLine];
  max = state.eMarks[startLine];

  marker = state.src.charCodeAt(pos++);
  // Check bullet
  if (marker !== 0x2A/* * */ &&
      marker !== 0x2D/* - */ &&
      marker !== 0x2B/* + */) {
    return -1;
  }

  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (!isSpace(ch)) {
      // " -test " - is not a list item
      return -1;
    }
  }

  return pos;
}

// Search `\d+[.)][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipOrderedListMarker(state, startLine) {
  var ch,
      start = state.bMarks[startLine] + state.tShift[startLine],
      pos = start,
      max = state.eMarks[startLine];

  // List marker should have at least 2 chars (digit + dot)
  if (pos + 1 >= max) { return -1; }

  ch = state.src.charCodeAt(pos++);

  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }

  for (;;) {
    // EOL -> fail
    if (pos >= max) { return -1; }

    ch = state.src.charCodeAt(pos++);

    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {

      // List marker should have no more than 9 digits
      // (prevents integer overflow in browsers)
      if (pos - start >= 10) { return -1; }

      continue;
    }

    // found valid marker
    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
      break;
    }

    return -1;
  }


  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (!isSpace(ch)) {
      // " 1.test " - is not a list item
      return -1;
    }
  }
  return pos;
}

function markTightParagraphs(state, idx) {
  var i, l,
      level = state.level + 2;

  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
      state.tokens[i + 2].hidden = true;
      state.tokens[i].hidden = true;
      i += 2;
    }
  }
}


module.exports = function list(state, startLine, endLine, silent) {
  var ch,
      contentStart,
      i,
      indent,
      indentAfterMarker,
      initial,
      isOrdered,
      itemLines,
      l,
      listLines,
      listTokIdx,
      markerCharCode,
      markerValue,
      max,
      nextLine,
      offset,
      oldListIndent,
      oldParentType,
      oldSCount,
      oldTShift,
      oldTight,
      pos,
      posAfterMarker,
      prevEmptyEnd,
      start,
      terminate,
      terminatorRules,
      token,
      isTerminatingParagraph = false,
      tight = true;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  // Special case:
  //  - item 1
  //   - item 2
  //    - item 3
  //     - item 4
  //      - this one is a paragraph continuation
  if (state.listIndent >= 0 &&
      state.sCount[startLine] - state.listIndent >= 4 &&
      state.sCount[startLine] < state.blkIndent) {
    return false;
  }

  // limit conditions when list can interrupt
  // a paragraph (validation mode only)
  if (silent && state.parentType === 'paragraph') {
    // Next list item should still terminate previous list item;
    //
    // This code can fail if plugins use blkIndent as well as lists,
    // but I hope the spec gets fixed long before that happens.
    //
    if (state.sCount[startLine] >= state.blkIndent) {
      isTerminatingParagraph = true;
    }
  }

  // Detect list type and position after marker
  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
    isOrdered = true;
    start = state.bMarks[startLine] + state.tShift[startLine];
    markerValue = Number(state.src.slice(start, posAfterMarker - 1));

    // If we're starting a new ordered list right after
    // a paragraph, it should start with 1.
    if (isTerminatingParagraph && markerValue !== 1) return false;

  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
    isOrdered = false;

  } else {
    return false;
  }

  // If we're starting a new unordered list right after
  // a paragraph, first line should not be empty.
  if (isTerminatingParagraph) {
    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
  }

  // We should terminate list on style change. Remember first one to compare.
  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

  // For validation mode we can terminate immediately
  if (silent) { return true; }

  // Start list
  listTokIdx = state.tokens.length;

  if (isOrdered) {
    token       = state.push('ordered_list_open', 'ol', 1);
    if (markerValue !== 1) {
      token.attrs = [ [ 'start', markerValue ] ];
    }

  } else {
    token       = state.push('bullet_list_open', 'ul', 1);
  }

  token.map    = listLines = [ startLine, 0 ];
  token.markup = String.fromCharCode(markerCharCode);

  //
  // Iterate list items
  //

  nextLine = startLine;
  prevEmptyEnd = false;
  terminatorRules = state.md.block.ruler.getRules('list');

  oldParentType = state.parentType;
  state.parentType = 'list';

  while (nextLine < endLine) {
    pos = posAfterMarker;
    max = state.eMarks[nextLine];

    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);

    while (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[nextLine]) % 4;
      } else if (ch === 0x20) {
        offset++;
      } else {
        break;
      }

      pos++;
    }

    contentStart = pos;

    if (contentStart >= max) {
      // trimming space in "-    \n  3" case, indent is 1 here
      indentAfterMarker = 1;
    } else {
      indentAfterMarker = offset - initial;
    }

    // If we have more than 4 spaces, the indent is 1
    // (the rest is just indented code block)
    if (indentAfterMarker > 4) { indentAfterMarker = 1; }

    // "  -  test"
    //  ^^^^^ - calculating total length of this thing
    indent = initial + indentAfterMarker;

    // Run subparser & write tokens
    token        = state.push('list_item_open', 'li', 1);
    token.markup = String.fromCharCode(markerCharCode);
    token.map    = itemLines = [ startLine, 0 ];
    if (isOrdered) {
      token.info = state.src.slice(start, posAfterMarker - 1);
    }

    // change current state, then restore it after parser subcall
    oldTight = state.tight;
    oldTShift = state.tShift[startLine];
    oldSCount = state.sCount[startLine];

    //  - example list
    // ^ listIndent position will be here
    //   ^ blkIndent position will be here
    //
    oldListIndent = state.listIndent;
    state.listIndent = state.blkIndent;
    state.blkIndent = indent;

    state.tight = true;
    state.tShift[startLine] = contentStart - state.bMarks[startLine];
    state.sCount[startLine] = offset;

    if (contentStart >= max && state.isEmpty(startLine + 1)) {
      // workaround for this case
      // (list item is empty, list terminates before "foo"):
      // ~~~~~~~~
      //   -
      //
      //     foo
      // ~~~~~~~~
      state.line = Math.min(state.line + 2, endLine);
    } else {
      state.md.block.tokenize(state, startLine, endLine, true);
    }

    // If any of list item is tight, mark list as tight
    if (!state.tight || prevEmptyEnd) {
      tight = false;
    }
    // Item become loose if finish with empty line,
    // but we should filter last element, because it means list finish
    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);

    state.blkIndent = state.listIndent;
    state.listIndent = oldListIndent;
    state.tShift[startLine] = oldTShift;
    state.sCount[startLine] = oldSCount;
    state.tight = oldTight;

    token        = state.push('list_item_close', 'li', -1);
    token.markup = String.fromCharCode(markerCharCode);

    nextLine = startLine = state.line;
    itemLines[1] = nextLine;
    contentStart = state.bMarks[startLine];

    if (nextLine >= endLine) { break; }

    //
    // Try to check if list is terminated or continued.
    //
    if (state.sCount[nextLine] < state.blkIndent) { break; }

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }

    // fail if terminating block found
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }

    // fail if list has another type
    if (isOrdered) {
      posAfterMarker = skipOrderedListMarker(state, nextLine);
      if (posAfterMarker < 0) { break; }
      start = state.bMarks[nextLine] + state.tShift[nextLine];
    } else {
      posAfterMarker = skipBulletListMarker(state, nextLine);
      if (posAfterMarker < 0) { break; }
    }

    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }
  }

  // Finalize list
  if (isOrdered) {
    token = state.push('ordered_list_close', 'ol', -1);
  } else {
    token = state.push('bullet_list_close', 'ul', -1);
  }
  token.markup = String.fromCharCode(markerCharCode);

  listLines[1] = nextLine;
  state.line = nextLine;

  state.parentType = oldParentType;

  // mark paragraphs tight if needed
  if (tight) {
    markTightParagraphs(state, listTokIdx);
  }

  return true;
};

},{"../common/utils":11}],33:[function(require,module,exports){
// Paragraph

'use strict';


module.exports = function paragraph(state, startLine/*, endLine*/) {
  var content, terminate, i, l, token, oldParentType,
      nextLine = startLine + 1,
      terminatorRules = state.md.block.ruler.getRules('paragraph'),
      endLine = state.lineMax;

  oldParentType = state.parentType;
  state.parentType = 'paragraph';

  // jump line-by-line until empty one or EOF
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue; }

    // Some tags can terminate paragraph without empty line.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }
  }

  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

  state.line = nextLine;

  token          = state.push('paragraph_open', 'p', 1);
  token.map      = [ startLine, state.line ];

  token          = state.push('inline', '', 0);
  token.content  = content;
  token.map      = [ startLine, state.line ];
  token.children = [];

  token          = state.push('paragraph_close', 'p', -1);

  state.parentType = oldParentType;

  return true;
};

},{}],34:[function(require,module,exports){
'use strict';


var normalizeReference   = require('../common/utils').normalizeReference;
var isSpace              = require('../common/utils').isSpace;


module.exports = function reference(state, startLine, _endLine, silent) {
  var ch,
      destEndPos,
      destEndLineNo,
      endLine,
      href,
      i,
      l,
      label,
      labelEnd,
      oldParentType,
      res,
      start,
      str,
      terminate,
      terminatorRules,
      title,
      lines = 0,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine],
      nextLine = startLine + 1;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }

  // Simple check to quickly interrupt scan on [link](url) at the start of line.
  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54
  while (++pos < max) {
    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&
        state.src.charCodeAt(pos - 1) !== 0x5C/* \ */) {
      if (pos + 1 === max) { return false; }
      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }
      break;
    }
  }

  endLine = state.lineMax;

  // jump line-by-line until empty one or EOF
  terminatorRules = state.md.block.ruler.getRules('reference');

  oldParentType = state.parentType;
  state.parentType = 'reference';

  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue; }

    // Some tags can terminate paragraph without empty line.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }
  }

  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  max = str.length;

  for (pos = 1; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 0x5B /* [ */) {
      return false;
    } else if (ch === 0x5D /* ] */) {
      labelEnd = pos;
      break;
    } else if (ch === 0x0A /* \n */) {
      lines++;
    } else if (ch === 0x5C /* \ */) {
      pos++;
      if (pos < max && str.charCodeAt(pos) === 0x0A) {
        lines++;
      }
    }
  }

  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }

  // [label]:   destination   'title'
  //         ^^^ skip optional whitespace here
  for (pos = labelEnd + 2; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 0x0A) {
      lines++;
    } else if (isSpace(ch)) {
      /*eslint no-empty:0*/
    } else {
      break;
    }
  }

  // [label]:   destination   'title'
  //            ^^^^^^^^^^^ parse this
  res = state.md.helpers.parseLinkDestination(str, pos, max);
  if (!res.ok) { return false; }

  href = state.md.normalizeLink(res.str);
  if (!state.md.validateLink(href)) { return false; }

  pos = res.pos;
  lines += res.lines;

  // save cursor state, we could require to rollback later
  destEndPos = pos;
  destEndLineNo = lines;

  // [label]:   destination   'title'
  //                       ^^^ skipping those spaces
  start = pos;
  for (; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 0x0A) {
      lines++;
    } else if (isSpace(ch)) {
      /*eslint no-empty:0*/
    } else {
      break;
    }
  }

  // [label]:   destination   'title'
  //                          ^^^^^^^ parse this
  res = state.md.helpers.parseLinkTitle(str, pos, max);
  if (pos < max && start !== pos && res.ok) {
    title = res.str;
    pos = res.pos;
    lines += res.lines;
  } else {
    title = '';
    pos = destEndPos;
    lines = destEndLineNo;
  }

  // skip trailing spaces until the rest of the line
  while (pos < max) {
    ch = str.charCodeAt(pos);
    if (!isSpace(ch)) { break; }
    pos++;
  }

  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    if (title) {
      // garbage at the end of the line after title,
      // but it could still be a valid reference if we roll back
      title = '';
      pos = destEndPos;
      lines = destEndLineNo;
      while (pos < max) {
        ch = str.charCodeAt(pos);
        if (!isSpace(ch)) { break; }
        pos++;
      }
    }
  }

  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    // garbage at the end of the line
    return false;
  }

  label = normalizeReference(str.slice(1, labelEnd));
  if (!label) {
    // CommonMark 0.20 disallows empty labels
    return false;
  }

  // Reference can not terminate anything. This check is for safety only.
  /*istanbul ignore if*/
  if (silent) { return true; }

  if (typeof state.env.references === 'undefined') {
    state.env.references = {};
  }
  if (typeof state.env.references[label] === 'undefined') {
    state.env.references[label] = { title: title, href: href };
  }

  state.parentType = oldParentType;

  state.line = startLine + lines + 1;
  return true;
};

},{"../common/utils":11}],35:[function(require,module,exports){
// Parser state class

'use strict';

var Token = require('../token');
var isSpace = require('../common/utils').isSpace;


function StateBlock(src, md, env, tokens) {
  var ch, s, start, pos, len, indent, offset, indent_found;

  this.src = src;

  // link to parser instance
  this.md     = md;

  this.env = env;

  //
  // Internal state vartiables
  //

  this.tokens = tokens;

  this.bMarks = [];  // line begin offsets for fast jumps
  this.eMarks = [];  // line end offsets for fast jumps
  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)
  this.sCount = [];  // indents for each line (tabs expanded)

  // An amount of virtual spaces (tabs expanded) between beginning
  // of each line (bMarks) and real beginning of that line.
  //
  // It exists only as a hack because blockquotes override bMarks
  // losing information in the process.
  //
  // It's used only when expanding tabs, you can think about it as
  // an initial tab length, e.g. bsCount=21 applied to string `\t123`
  // means first tab should be expanded to 4-21%4 === 3 spaces.
  //
  this.bsCount = [];

  // block parser variables
  this.blkIndent  = 0; // required block content indent (for example, if we are
                       // inside a list, it would be positioned after list marker)
  this.line       = 0; // line index in src
  this.lineMax    = 0; // lines count
  this.tight      = false;  // loose/tight mode for lists
  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)
  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)

  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
  // used in lists to determine if they interrupt a paragraph
  this.parentType = 'root';

  this.level = 0;

  // renderer
  this.result = '';

  // Create caches
  // Generate markers.
  s = this.src;
  indent_found = false;

  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {
    ch = s.charCodeAt(pos);

    if (!indent_found) {
      if (isSpace(ch)) {
        indent++;

        if (ch === 0x09) {
          offset += 4 - offset % 4;
        } else {
          offset++;
        }
        continue;
      } else {
        indent_found = true;
      }
    }

    if (ch === 0x0A || pos === len - 1) {
      if (ch !== 0x0A) { pos++; }
      this.bMarks.push(start);
      this.eMarks.push(pos);
      this.tShift.push(indent);
      this.sCount.push(offset);
      this.bsCount.push(0);

      indent_found = false;
      indent = 0;
      offset = 0;
      start = pos + 1;
    }
  }

  // Push fake entry to simplify cache bounds checks
  this.bMarks.push(s.length);
  this.eMarks.push(s.length);
  this.tShift.push(0);
  this.sCount.push(0);
  this.bsCount.push(0);

  this.lineMax = this.bMarks.length - 1; // don't count last fake line
}

// Push new token to "stream".
//
StateBlock.prototype.push = function (type, tag, nesting) {
  var token = new Token(type, tag, nesting);
  token.block = true;

  if (nesting < 0) this.level--; // closing tag
  token.level = this.level;
  if (nesting > 0) this.level++; // opening tag

  this.tokens.push(token);
  return token;
};

StateBlock.prototype.isEmpty = function isEmpty(line) {
  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
};

StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
  for (var max = this.lineMax; from < max; from++) {
    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
      break;
    }
  }
  return from;
};

// Skip spaces from given position.
StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
  var ch;

  for (var max = this.src.length; pos < max; pos++) {
    ch = this.src.charCodeAt(pos);
    if (!isSpace(ch)) { break; }
  }
  return pos;
};

// Skip spaces from given position in reverse.
StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
  if (pos <= min) { return pos; }

  while (pos > min) {
    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }
  }
  return pos;
};

// Skip char codes from given position
StateBlock.prototype.skipChars = function skipChars(pos, code) {
  for (var max = this.src.length; pos < max; pos++) {
    if (this.src.charCodeAt(pos) !== code) { break; }
  }
  return pos;
};

// Skip char codes reverse from given position - 1
StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
  if (pos <= min) { return pos; }

  while (pos > min) {
    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }
  }
  return pos;
};

// cut lines range from source.
StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
  var i, lineIndent, ch, first, last, queue, lineStart,
      line = begin;

  if (begin >= end) {
    return '';
  }

  queue = new Array(end - begin);

  for (i = 0; line < end; line++, i++) {
    lineIndent = 0;
    lineStart = first = this.bMarks[line];

    if (line + 1 < end || keepLastLF) {
      // No need for bounds check because we have fake entry on tail.
      last = this.eMarks[line] + 1;
    } else {
      last = this.eMarks[line];
    }

    while (first < last && lineIndent < indent) {
      ch = this.src.charCodeAt(first);

      if (isSpace(ch)) {
        if (ch === 0x09) {
          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
        } else {
          lineIndent++;
        }
      } else if (first - lineStart < this.tShift[line]) {
        // patched tShift masked characters to look like spaces (blockquotes, list markers)
        lineIndent++;
      } else {
        break;
      }

      first++;
    }

    if (lineIndent > indent) {
      // partially expanding tabs in code blocks, e.g '\t\tfoobar'
      // with indent=2 becomes '  \tfoobar'
      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
    } else {
      queue[i] = this.src.slice(first, last);
    }
  }

  return queue.join('');
};

// re-export Token class to use in block rules
StateBlock.prototype.Token = Token;


module.exports = StateBlock;

},{"../common/utils":11,"../token":58}],36:[function(require,module,exports){
// GFM table, https://github.github.com/gfm/#tables-extension-

'use strict';

var isSpace = require('../common/utils').isSpace;


function getLine(state, line) {
  var pos = state.bMarks[line] + state.tShift[line],
      max = state.eMarks[line];

  return state.src.substr(pos, max - pos);
}

function escapedSplit(str) {
  var result = [],
      pos = 0,
      max = str.length,
      ch,
      isEscaped = false,
      lastPos = 0,
      current = '';

  ch  = str.charCodeAt(pos);

  while (pos < max) {
    if (ch === 0x7c/* | */) {
      if (!isEscaped) {
        // pipe separating cells, '|'
        result.push(current + str.substring(lastPos, pos));
        current = '';
        lastPos = pos + 1;
      } else {
        // escaped pipe, '\|'
        current += str.substring(lastPos, pos - 1);
        lastPos = pos;
      }
    }

    isEscaped = (ch === 0x5c/* \ */);
    pos++;

    ch = str.charCodeAt(pos);
  }

  result.push(current + str.substring(lastPos));

  return result;
}


module.exports = function table(state, startLine, endLine, silent) {
  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,
      aligns, t, tableLines, tbodyLines, oldParentType, terminate,
      terminatorRules, firstCh, secondCh;

  // should have at least two lines
  if (startLine + 2 > endLine) { return false; }

  nextLine = startLine + 1;

  if (state.sCount[nextLine] < state.blkIndent) { return false; }

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }

  // first character of the second line should be '|', '-', ':',
  // and no other characters are allowed but spaces;
  // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

  pos = state.bMarks[nextLine] + state.tShift[nextLine];
  if (pos >= state.eMarks[nextLine]) { return false; }

  firstCh = state.src.charCodeAt(pos++);
  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }

  if (pos >= state.eMarks[nextLine]) { return false; }

  secondCh = state.src.charCodeAt(pos++);
  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {
    return false;
  }

  // if first character is '-', then second character must not be a space
  // (due to parsing ambiguity with list)
  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }

  while (pos < state.eMarks[nextLine]) {
    ch = state.src.charCodeAt(pos);

    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }

    pos++;
  }

  lineText = getLine(state, startLine + 1);

  columns = lineText.split('|');
  aligns = [];
  for (i = 0; i < columns.length; i++) {
    t = columns[i].trim();
    if (!t) {
      // allow empty columns before and after table, but not in between columns;
      // e.g. allow ` |---| `, disallow ` ---||--- `
      if (i === 0 || i === columns.length - 1) {
        continue;
      } else {
        return false;
      }
    }

    if (!/^:?-+:?$/.test(t)) { return false; }
    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');
    } else if (t.charCodeAt(0) === 0x3A/* : */) {
      aligns.push('left');
    } else {
      aligns.push('');
    }
  }

  lineText = getLine(state, startLine).trim();
  if (lineText.indexOf('|') === -1) { return false; }
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
  columns = escapedSplit(lineText);
  if (columns.length && columns[0] === '') columns.shift();
  if (columns.length && columns[columns.length - 1] === '') columns.pop();

  // header row will define an amount of columns in the entire table,
  // and align row should be exactly the same (the rest of the rows can differ)
  columnCount = columns.length;
  if (columnCount === 0 || columnCount !== aligns.length) { return false; }

  if (silent) { return true; }

  oldParentType = state.parentType;
  state.parentType = 'table';

  // use 'blockquote' lists for termination because it's
  // the most similar to tables
  terminatorRules = state.md.block.ruler.getRules('blockquote');

  token     = state.push('table_open', 'table', 1);
  token.map = tableLines = [ startLine, 0 ];

  token     = state.push('thead_open', 'thead', 1);
  token.map = [ startLine, startLine + 1 ];

  token     = state.push('tr_open', 'tr', 1);
  token.map = [ startLine, startLine + 1 ];

  for (i = 0; i < columns.length; i++) {
    token          = state.push('th_open', 'th', 1);
    if (aligns[i]) {
      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
    }

    token          = state.push('inline', '', 0);
    token.content  = columns[i].trim();
    token.children = [];

    token          = state.push('th_close', 'th', -1);
  }

  token     = state.push('tr_close', 'tr', -1);
  token     = state.push('thead_close', 'thead', -1);

  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
    if (state.sCount[nextLine] < state.blkIndent) { break; }

    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }

    if (terminate) { break; }
    lineText = getLine(state, nextLine).trim();
    if (!lineText) { break; }
    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }
    columns = escapedSplit(lineText);
    if (columns.length && columns[0] === '') columns.shift();
    if (columns.length && columns[columns.length - 1] === '') columns.pop();

    if (nextLine === startLine + 2) {
      token     = state.push('tbody_open', 'tbody', 1);
      token.map = tbodyLines = [ startLine + 2, 0 ];
    }

    token     = state.push('tr_open', 'tr', 1);
    token.map = [ nextLine, nextLine + 1 ];

    for (i = 0; i < columnCount; i++) {
      token          = state.push('td_open', 'td', 1);
      if (aligns[i]) {
        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
      }

      token          = state.push('inline', '', 0);
      token.content  = columns[i] ? columns[i].trim() : '';
      token.children = [];

      token          = state.push('td_close', 'td', -1);
    }
    token = state.push('tr_close', 'tr', -1);
  }

  if (tbodyLines) {
    token = state.push('tbody_close', 'tbody', -1);
    tbodyLines[1] = nextLine;
  }

  token = state.push('table_close', 'table', -1);
  tableLines[1] = nextLine;

  state.parentType = oldParentType;
  state.line = nextLine;
  return true;
};

},{"../common/utils":11}],37:[function(require,module,exports){
'use strict';


module.exports = function block(state) {
  var token;

  if (state.inlineMode) {
    token          = new state.Token('inline', '', 0);
    token.content  = state.src;
    token.map      = [ 0, 1 ];
    token.children = [];
    state.tokens.push(token);
  } else {
    state.md.block.parse(state.src, state.md, state.env, state.tokens);
  }
};

},{}],38:[function(require,module,exports){
'use strict';

module.exports = function inline(state) {
  var tokens = state.tokens, tok, i, l;

  // Parse inlines
  for (i = 0, l = tokens.length; i < l; i++) {
    tok = tokens[i];
    if (tok.type === 'inline') {
      state.md.inline.parse(tok.content, state.md, state.env, tok.children);
    }
  }
};

},{}],39:[function(require,module,exports){
// Replace link-like texts with link nodes.
//
// Currently restricted by `md.validateLink()` to http/https/ftp
//
'use strict';


var arrayReplaceAt = require('../common/utils').arrayReplaceAt;


function isLinkOpen(str) {
  return /^<a[>\s]/i.test(str);
}
function isLinkClose(str) {
  return /^<\/a\s*>/i.test(str);
}


module.exports = function linkify(state) {
  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,
      level, htmlLinkLevel, url, fullUrl, urlText,
      blockTokens = state.tokens,
      links;

  if (!state.md.options.linkify) { return; }

  for (j = 0, l = blockTokens.length; j < l; j++) {
    if (blockTokens[j].type !== 'inline' ||
        !state.md.linkify.pretest(blockTokens[j].content)) {
      continue;
    }

    tokens = blockTokens[j].children;

    htmlLinkLevel = 0;

    // We scan from the end, to keep position when new tags added.
    // Use reversed logic in links start/end match
    for (i = tokens.length - 1; i >= 0; i--) {
      currentToken = tokens[i];

      // Skip content of markdown links
      if (currentToken.type === 'link_close') {
        i--;
        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
          i--;
        }
        continue;
      }

      // Skip content of html tag links
      if (currentToken.type === 'html_inline') {
        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
          htmlLinkLevel--;
        }
        if (isLinkClose(currentToken.content)) {
          htmlLinkLevel++;
        }
      }
      if (htmlLinkLevel > 0) { continue; }

      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {

        text = currentToken.content;
        links = state.md.linkify.match(text);

        // Now split string to nodes
        nodes = [];
        level = currentToken.level;
        lastPos = 0;

        for (ln = 0; ln < links.length; ln++) {

          url = links[ln].url;
          fullUrl = state.md.normalizeLink(url);
          if (!state.md.validateLink(fullUrl)) { continue; }

          urlText = links[ln].text;

          // Linkifier might send raw hostnames like "example.com", where url
          // starts with domain name. So we prepend http:// in those cases,
          // and remove it afterwards.
          //
          if (!links[ln].schema) {
            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
          } else {
            urlText = state.md.normalizeLinkText(urlText);
          }

          pos = links[ln].index;

          if (pos > lastPos) {
            token         = new state.Token('text', '', 0);
            token.content = text.slice(lastPos, pos);
            token.level   = level;
            nodes.push(token);
          }

          token         = new state.Token('link_open', 'a', 1);
          token.attrs   = [ [ 'href', fullUrl ] ];
          token.level   = level++;
          token.markup  = 'linkify';
          token.info    = 'auto';
          nodes.push(token);

          token         = new state.Token('text', '', 0);
          token.content = urlText;
          token.level   = level;
          nodes.push(token);

          token         = new state.Token('link_close', 'a', -1);
          token.level   = --level;
          token.markup  = 'linkify';
          token.info    = 'auto';
          nodes.push(token);

          lastPos = links[ln].lastIndex;
        }
        if (lastPos < text.length) {
          token         = new state.Token('text', '', 0);
          token.content = text.slice(lastPos);
          token.level   = level;
          nodes.push(token);
        }

        // replace current node
        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
      }
    }
  }
};

},{"../common/utils":11}],40:[function(require,module,exports){
// Normalize input string

'use strict';


// https://spec.commonmark.org/0.29/#line-ending
var NEWLINES_RE  = /\r\n?|\n/g;
var NULL_RE      = /\0/g;


module.exports = function normalize(state) {
  var str;

  // Normalize newlines
  str = state.src.replace(NEWLINES_RE, '\n');

  // Replace NULL characters
  str = str.replace(NULL_RE, '\uFFFD');

  state.src = str;
};

},{}],41:[function(require,module,exports){
// Simple typographic replacements
//
// (c) (C) → ©
// (tm) (TM) → ™
// (r) (R) → ®
// +- → ±
// (p) (P) -> §
// ... → … (also ?.... → ?.., !.... → !..)
// ???????? → ???, !!!!! → !!!, `,,` → `,`
// -- → &ndash;, --- → &mdash;
//
'use strict';

// TODO:
// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
// - miltiplication 2 x 4 -> 2 × 4

var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;

// Workaround for phantomjs - need regex without /g flag,
// or root check will fail every second time
var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;

var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
var SCOPED_ABBR = {
  c: '©',
  r: '®',
  p: '§',
  tm: '™'
};

function replaceFn(match, name) {
  return SCOPED_ABBR[name.toLowerCase()];
}

function replace_scoped(inlineTokens) {
  var i, token, inside_autolink = 0;

  for (i = inlineTokens.length - 1; i >= 0; i--) {
    token = inlineTokens[i];

    if (token.type === 'text' && !inside_autolink) {
      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
    }

    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--;
    }

    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++;
    }
  }
}

function replace_rare(inlineTokens) {
  var i, token, inside_autolink = 0;

  for (i = inlineTokens.length - 1; i >= 0; i--) {
    token = inlineTokens[i];

    if (token.type === 'text' && !inside_autolink) {
      if (RARE_RE.test(token.content)) {
        token.content = token.content
          .replace(/\+-/g, '±')
          // .., ..., ....... -> …
          // but ?..... & !..... -> ?.. & !..
          .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
          // em-dash
          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\u2014')
          // en-dash
          .replace(/(^|\s)--(?=\s|$)/mg, '$1\u2013')
          .replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, '$1\u2013');
      }
    }

    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--;
    }

    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++;
    }
  }
}


module.exports = function replace(state) {
  var blkIdx;

  if (!state.md.options.typographer) { return; }

  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

    if (state.tokens[blkIdx].type !== 'inline') { continue; }

    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
      replace_scoped(state.tokens[blkIdx].children);
    }

    if (RARE_RE.test(state.tokens[blkIdx].content)) {
      replace_rare(state.tokens[blkIdx].children);
    }

  }
};

},{}],42:[function(require,module,exports){
// Convert straight quotation marks to typographic ones
//
'use strict';


var isWhiteSpace   = require('../common/utils').isWhiteSpace;
var isPunctChar    = require('../common/utils').isPunctChar;
var isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;

var QUOTE_TEST_RE = /['"]/;
var QUOTE_RE = /['"]/g;
var APOSTROPHE = '\u2019'; /* ’ */


function replaceAt(str, index, ch) {
  return str.substr(0, index) + ch + str.substr(index + 1);
}

function process_inlines(tokens, state) {
  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,
      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,
      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;

  stack = [];

  for (i = 0; i < tokens.length; i++) {
    token = tokens[i];

    thisLevel = tokens[i].level;

    for (j = stack.length - 1; j >= 0; j--) {
      if (stack[j].level <= thisLevel) { break; }
    }
    stack.length = j + 1;

    if (token.type !== 'text') { continue; }

    text = token.content;
    pos = 0;
    max = text.length;

    /*eslint no-labels:0,block-scoped-var:0*/
    OUTER:
    while (pos < max) {
      QUOTE_RE.lastIndex = pos;
      t = QUOTE_RE.exec(text);
      if (!t) { break; }

      canOpen = canClose = true;
      pos = t.index + 1;
      isSingle = (t[0] === "'");

      // Find previous character,
      // default to space if it's the beginning of the line
      //
      lastChar = 0x20;

      if (t.index - 1 >= 0) {
        lastChar = text.charCodeAt(t.index - 1);
      } else {
        for (j = i - 1; j >= 0; j--) {
          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20
          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'

          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
          break;
        }
      }

      // Find next character,
      // default to space if it's the end of the line
      //
      nextChar = 0x20;

      if (pos < max) {
        nextChar = text.charCodeAt(pos);
      } else {
        for (j = i + 1; j < tokens.length; j++) {
          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20
          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'

          nextChar = tokens[j].content.charCodeAt(0);
          break;
        }
      }

      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));

      isLastWhiteSpace = isWhiteSpace(lastChar);
      isNextWhiteSpace = isWhiteSpace(nextChar);

      if (isNextWhiteSpace) {
        canOpen = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          canOpen = false;
        }
      }

      if (isLastWhiteSpace) {
        canClose = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          canClose = false;
        }
      }

      if (nextChar === 0x22 /* " */ && t[0] === '"') {
        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {
          // special case: 1"" - count first quote as an inch
          canClose = canOpen = false;
        }
      }

      if (canOpen && canClose) {
        // Replace quotes in the middle of punctuation sequence, but not
        // in the middle of the words, i.e.:
        //
        // 1. foo " bar " baz - not replaced
        // 2. foo-"-bar-"-baz - replaced
        // 3. foo"bar"baz     - not replaced
        //
        canOpen = isLastPunctChar;
        canClose = isNextPunctChar;
      }

      if (!canOpen && !canClose) {
        // middle of word
        if (isSingle) {
          token.content = replaceAt(token.content, t.index, APOSTROPHE);
        }
        continue;
      }

      if (canClose) {
        // this could be a closing quote, rewind the stack to get a match
        for (j = stack.length - 1; j >= 0; j--) {
          item = stack[j];
          if (stack[j].level < thisLevel) { break; }
          if (item.single === isSingle && stack[j].level === thisLevel) {
            item = stack[j];

            if (isSingle) {
              openQuote = state.md.options.quotes[2];
              closeQuote = state.md.options.quotes[3];
            } else {
              openQuote = state.md.options.quotes[0];
              closeQuote = state.md.options.quotes[1];
            }

            // replace token.content *before* tokens[item.token].content,
            // because, if they are pointing at the same token, replaceAt
            // could mess up indices when quote length != 1
            token.content = replaceAt(token.content, t.index, closeQuote);
            tokens[item.token].content = replaceAt(
              tokens[item.token].content, item.pos, openQuote);

            pos += closeQuote.length - 1;
            if (item.token === i) { pos += openQuote.length - 1; }

            text = token.content;
            max = text.length;

            stack.length = j;
            continue OUTER;
          }
        }
      }

      if (canOpen) {
        stack.push({
          token: i,
          pos: t.index,
          single: isSingle,
          level: thisLevel
        });
      } else if (canClose && isSingle) {
        token.content = replaceAt(token.content, t.index, APOSTROPHE);
      }
    }
  }
}


module.exports = function smartquotes(state) {
  /*eslint max-depth:0*/
  var blkIdx;

  if (!state.md.options.typographer) { return; }

  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

    if (state.tokens[blkIdx].type !== 'inline' ||
        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
      continue;
    }

    process_inlines(state.tokens[blkIdx].children, state);
  }
};

},{"../common/utils":11}],43:[function(require,module,exports){
// Core state object
//
'use strict';

var Token = require('../token');


function StateCore(src, md, env) {
  this.src = src;
  this.env = env;
  this.tokens = [];
  this.inlineMode = false;
  this.md = md; // link to parser instance
}

// re-export Token class to use in core rules
StateCore.prototype.Token = Token;


module.exports = StateCore;

},{"../token":58}],44:[function(require,module,exports){
// Process autolinks '<protocol:...>'

'use strict';


/*eslint max-len:0*/
var EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;


module.exports = function autolink(state, silent) {
  var url, fullUrl, token, ch, start, max,
      pos = state.pos;

  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

  start = state.pos;
  max = state.posMax;

  for (;;) {
    if (++pos >= max) return false;

    ch = state.src.charCodeAt(pos);

    if (ch === 0x3C /* < */) return false;
    if (ch === 0x3E /* > */) break;
  }

  url = state.src.slice(start + 1, pos);

  if (AUTOLINK_RE.test(url)) {
    fullUrl = state.md.normalizeLink(url);
    if (!state.md.validateLink(fullUrl)) { return false; }

    if (!silent) {
      token         = state.push('link_open', 'a', 1);
      token.attrs   = [ [ 'href', fullUrl ] ];
      token.markup  = 'autolink';
      token.info    = 'auto';

      token         = state.push('text', '', 0);
      token.content = state.md.normalizeLinkText(url);

      token         = state.push('link_close', 'a', -1);
      token.markup  = 'autolink';
      token.info    = 'auto';
    }

    state.pos += url.length + 2;
    return true;
  }

  if (EMAIL_RE.test(url)) {
    fullUrl = state.md.normalizeLink('mailto:' + url);
    if (!state.md.validateLink(fullUrl)) { return false; }

    if (!silent) {
      token         = state.push('link_open', 'a', 1);
      token.attrs   = [ [ 'href', fullUrl ] ];
      token.markup  = 'autolink';
      token.info    = 'auto';

      token         = state.push('text', '', 0);
      token.content = state.md.normalizeLinkText(url);

      token         = state.push('link_close', 'a', -1);
      token.markup  = 'autolink';
      token.info    = 'auto';
    }

    state.pos += url.length + 2;
    return true;
  }

  return false;
};

},{}],45:[function(require,module,exports){
// Parse backticks

'use strict';


module.exports = function backtick(state, silent) {
  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,
      pos = state.pos,
      ch = state.src.charCodeAt(pos);

  if (ch !== 0x60/* ` */) { return false; }

  start = pos;
  pos++;
  max = state.posMax;

  // scan marker length
  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }

  marker = state.src.slice(start, pos);
  openerLength = marker.length;

  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
    if (!silent) state.pending += marker;
    state.pos += openerLength;
    return true;
  }

  matchStart = matchEnd = pos;

  // Nothing found in the cache, scan until the end of the line (or until marker is found)
  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
    matchEnd = matchStart + 1;

    // scan marker length
    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }

    closerLength = matchEnd - matchStart;

    if (closerLength === openerLength) {
      // Found matching closer length.
      if (!silent) {
        token     = state.push('code_inline', 'code', 0);
        token.markup  = marker;
        token.content = state.src.slice(pos, matchStart)
          .replace(/\n/g, ' ')
          .replace(/^ (.+) $/, '$1');
      }
      state.pos = matchEnd;
      return true;
    }

    // Some different length found, put it in cache as upper limit of where closer can be found
    state.backticks[closerLength] = matchStart;
  }

  // Scanned through the end, didn't find anything
  state.backticksScanned = true;

  if (!silent) state.pending += marker;
  state.pos += openerLength;
  return true;
};

},{}],46:[function(require,module,exports){
// For each opening emphasis-like marker find a matching closing one
//
'use strict';


function processDelimiters(state, delimiters) {
  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,
      isOddMatch, lastJump,
      openersBottom = {},
      max = delimiters.length;

  if (!max) return;

  // headerIdx is the first delimiter of the current (where closer is) delimiter run
  var headerIdx = 0;
  var lastTokenIdx = -2; // needs any value lower than -1
  var jumps = [];

  for (closerIdx = 0; closerIdx < max; closerIdx++) {
    closer = delimiters[closerIdx];

    jumps.push(0);

    // markers belong to same delimiter run if:
    //  - they have adjacent tokens
    //  - AND markers are the same
    //
    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
      headerIdx = closerIdx;
    }

    lastTokenIdx = closer.token;

    // Length is only used for emphasis-specific "rule of 3",
    // if it's not defined (in strikethrough or 3rd party plugins),
    // we can default it to 0 to disable those checks.
    //
    closer.length = closer.length || 0;

    if (!closer.close) continue;

    // Previously calculated lower bounds (previous fails)
    // for each marker, each delimiter length modulo 3,
    // and for whether this closer can be an opener;
    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460
    if (!openersBottom.hasOwnProperty(closer.marker)) {
      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];
    }

    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];

    openerIdx = headerIdx - jumps[headerIdx] - 1;

    newMinOpenerIdx = openerIdx;

    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
      opener = delimiters[openerIdx];

      if (opener.marker !== closer.marker) continue;

      if (opener.open && opener.end < 0) {

        isOddMatch = false;

        // from spec:
        //
        // If one of the delimiters can both open and close emphasis, then the
        // sum of the lengths of the delimiter runs containing the opening and
        // closing delimiters must not be a multiple of 3 unless both lengths
        // are multiples of 3.
        //
        if (opener.close || closer.open) {
          if ((opener.length + closer.length) % 3 === 0) {
            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
              isOddMatch = true;
            }
          }
        }

        if (!isOddMatch) {
          // If previous delimiter cannot be an opener, we can safely skip
          // the entire sequence in future checks. This is required to make
          // sure algorithm has linear complexity (see *_*_*_*_*_... case).
          //
          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?
            jumps[openerIdx - 1] + 1 :
            0;

          jumps[closerIdx] = closerIdx - openerIdx + lastJump;
          jumps[openerIdx] = lastJump;

          closer.open  = false;
          opener.end   = closerIdx;
          opener.close = false;
          newMinOpenerIdx = -1;
          // treat next token as start of run,
          // it optimizes skips in **<...>**a**<...>** pathological case
          lastTokenIdx = -2;
          break;
        }
      }
    }

    if (newMinOpenerIdx !== -1) {
      // If match for this delimiter run failed, we want to set lower bound for
      // future lookups. This is required to make sure algorithm has linear
      // complexity.
      //
      // See details here:
      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
      //
      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;
    }
  }
}


module.exports = function link_pairs(state) {
  var curr,
      tokens_meta = state.tokens_meta,
      max = state.tokens_meta.length;

  processDelimiters(state, state.delimiters);

  for (curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      processDelimiters(state, tokens_meta[curr].delimiters);
    }
  }
};

},{}],47:[function(require,module,exports){
// Process *this* and _that_
//
'use strict';


// Insert each marker as a separate text token, and add it to delimiter list
//
module.exports.tokenize = function emphasis(state, silent) {
  var i, scanned, token,
      start = state.pos,
      marker = state.src.charCodeAt(start);

  if (silent) { return false; }

  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }

  scanned = state.scanDelims(state.pos, marker === 0x2A);

  for (i = 0; i < scanned.length; i++) {
    token         = state.push('text', '', 0);
    token.content = String.fromCharCode(marker);

    state.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: marker,

      // Total length of these series of delimiters.
      //
      length: scanned.length,

      // A position of the token this delimiter corresponds to.
      //
      token:  state.tokens.length - 1,

      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end:    -1,

      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open:   scanned.can_open,
      close:  scanned.can_close
    });
  }

  state.pos += scanned.length;

  return true;
};


function postProcess(state, delimiters) {
  var i,
      startDelim,
      endDelim,
      token,
      ch,
      isStrong,
      max = delimiters.length;

  for (i = max - 1; i >= 0; i--) {
    startDelim = delimiters[i];

    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {
      continue;
    }

    // Process only opening markers
    if (startDelim.end === -1) {
      continue;
    }

    endDelim = delimiters[startDelim.end];

    // If the previous delimiter has the same marker and is adjacent to this one,
    // merge those into one strong delimiter.
    //
    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
    //
    isStrong = i > 0 &&
               delimiters[i - 1].end === startDelim.end + 1 &&
               // check that first two markers match and adjacent
               delimiters[i - 1].marker === startDelim.marker &&
               delimiters[i - 1].token === startDelim.token - 1 &&
               // check that last two markers are adjacent (we can safely assume they match)
               delimiters[startDelim.end + 1].token === endDelim.token + 1;

    ch = String.fromCharCode(startDelim.marker);

    token         = state.tokens[startDelim.token];
    token.type    = isStrong ? 'strong_open' : 'em_open';
    token.tag     = isStrong ? 'strong' : 'em';
    token.nesting = 1;
    token.markup  = isStrong ? ch + ch : ch;
    token.content = '';

    token         = state.tokens[endDelim.token];
    token.type    = isStrong ? 'strong_close' : 'em_close';
    token.tag     = isStrong ? 'strong' : 'em';
    token.nesting = -1;
    token.markup  = isStrong ? ch + ch : ch;
    token.content = '';

    if (isStrong) {
      state.tokens[delimiters[i - 1].token].content = '';
      state.tokens[delimiters[startDelim.end + 1].token].content = '';
      i--;
    }
  }
}


// Walk through delimiter list and replace text tokens with tags
//
module.exports.postProcess = function emphasis(state) {
  var curr,
      tokens_meta = state.tokens_meta,
      max = state.tokens_meta.length;

  postProcess(state, state.delimiters);

  for (curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess(state, tokens_meta[curr].delimiters);
    }
  }
};

},{}],48:[function(require,module,exports){
// Process html entity - &#123;, &#xAF;, &quot;, ...

'use strict';

var entities          = require('../common/entities');
var has               = require('../common/utils').has;
var isValidEntityCode = require('../common/utils').isValidEntityCode;
var fromCodePoint     = require('../common/utils').fromCodePoint;


var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
var NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;


module.exports = function entity(state, silent) {
  var ch, code, match, pos = state.pos, max = state.posMax;

  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }

  if (pos + 1 < max) {
    ch = state.src.charCodeAt(pos + 1);

    if (ch === 0x23 /* # */) {
      match = state.src.slice(pos).match(DIGITAL_RE);
      if (match) {
        if (!silent) {
          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
        }
        state.pos += match[0].length;
        return true;
      }
    } else {
      match = state.src.slice(pos).match(NAMED_RE);
      if (match) {
        if (has(entities, match[1])) {
          if (!silent) { state.pending += entities[match[1]]; }
          state.pos += match[0].length;
          return true;
        }
      }
    }
  }

  if (!silent) { state.pending += '&'; }
  state.pos++;
  return true;
};

},{"../common/entities":8,"../common/utils":11}],49:[function(require,module,exports){
// Process escaped chars and hardbreaks

'use strict';

var isSpace = require('../common/utils').isSpace;

var ESCAPED = [];

for (var i = 0; i < 256; i++) { ESCAPED.push(0); }

'\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });


module.exports = function escape(state, silent) {
  var ch, pos = state.pos, max = state.posMax;

  if (state.src.charCodeAt(pos) !== 0x5C/* \ */) { return false; }

  pos++;

  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (ch < 256 && ESCAPED[ch] !== 0) {
      if (!silent) { state.pending += state.src[pos]; }
      state.pos += 2;
      return true;
    }

    if (ch === 0x0A) {
      if (!silent) {
        state.push('hardbreak', 'br', 0);
      }

      pos++;
      // skip leading whitespaces from next line
      while (pos < max) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) { break; }
        pos++;
      }

      state.pos = pos;
      return true;
    }
  }

  if (!silent) { state.pending += '\\'; }
  state.pos++;
  return true;
};

},{"../common/utils":11}],50:[function(require,module,exports){
// Process html tags

'use strict';


var HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;


function isLetter(ch) {
  /*eslint no-bitwise:0*/
  var lc = ch | 0x20; // to lower case
  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
}


module.exports = function html_inline(state, silent) {
  var ch, match, max, token,
      pos = state.pos;

  if (!state.md.options.html) { return false; }

  // Check start
  max = state.posMax;
  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
      pos + 2 >= max) {
    return false;
  }

  // Quick fail on second char
  ch = state.src.charCodeAt(pos + 1);
  if (ch !== 0x21/* ! */ &&
      ch !== 0x3F/* ? */ &&
      ch !== 0x2F/* / */ &&
      !isLetter(ch)) {
    return false;
  }

  match = state.src.slice(pos).match(HTML_TAG_RE);
  if (!match) { return false; }

  if (!silent) {
    token         = state.push('html_inline', '', 0);
    token.content = state.src.slice(pos, pos + match[0].length);
  }
  state.pos += match[0].length;
  return true;
};

},{"../common/html_re":10}],51:[function(require,module,exports){
// Process ![image](<src> "title")

'use strict';

var normalizeReference   = require('../common/utils').normalizeReference;
var isSpace              = require('../common/utils').isSpace;


module.exports = function image(state, silent) {
  var attrs,
      code,
      content,
      label,
      labelEnd,
      labelStart,
      pos,
      ref,
      res,
      title,
      token,
      tokens,
      start,
      href = '',
      oldPos = state.pos,
      max = state.posMax;

  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }
  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }

  labelStart = state.pos + 2;
  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) { return false; }

  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
    //
    // Inline link
    //

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) { break; }
    }
    if (pos >= max) { return false; }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = '';
      }
    }

    // [link](  <href>  "title"  )
    //                ^^ skipping these spaces
    start = pos;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) { break; }
    }

    // [link](  <href>  "title"  )
    //                  ^^^^^^^ parsing link title
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
    if (pos < max && start !== pos && res.ok) {
      title = res.str;
      pos = res.pos;

      // [link](  <href>  "title"  )
      //                         ^^ skipping these spaces
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) { break; }
      }
    } else {
      title = '';
    }

    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
      state.pos = oldPos;
      return false;
    }
    pos++;
  } else {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') { return false; }

    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) { label = state.src.slice(labelStart, labelEnd); }

    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    content = state.src.slice(labelStart, labelEnd);

    state.md.inline.parse(
      content,
      state.md,
      state.env,
      tokens = []
    );

    token          = state.push('image', 'img', 0);
    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];
    token.children = tokens;
    token.content  = content;

    if (title) {
      attrs.push([ 'title', title ]);
    }
  }

  state.pos = pos;
  state.posMax = max;
  return true;
};

},{"../common/utils":11}],52:[function(require,module,exports){
// Process [link](<to> "stuff")

'use strict';

var normalizeReference   = require('../common/utils').normalizeReference;
var isSpace              = require('../common/utils').isSpace;


module.exports = function link(state, silent) {
  var attrs,
      code,
      label,
      labelEnd,
      labelStart,
      pos,
      res,
      ref,
      token,
      href = '',
      title = '',
      oldPos = state.pos,
      max = state.posMax,
      start = state.pos,
      parseReference = true;

  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }

  labelStart = state.pos + 1;
  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) { return false; }

  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
    //
    // Inline link
    //

    // might have found a valid shortcut link, disable reference parsing
    parseReference = false;

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) { break; }
    }
    if (pos >= max) { return false; }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = '';
      }

      // [link](  <href>  "title"  )
      //                ^^ skipping these spaces
      start = pos;
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) { break; }
      }

      // [link](  <href>  "title"  )
      //                  ^^^^^^^ parsing link title
      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
      if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;

        // [link](  <href>  "title"  )
        //                         ^^ skipping these spaces
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) { break; }
        }
      }
    }

    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
      // parsing a valid shortcut link failed, fallback to reference
      parseReference = true;
    }
    pos++;
  }

  if (parseReference) {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') { return false; }

    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) { label = state.src.slice(labelStart, labelEnd); }

    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    state.pos = labelStart;
    state.posMax = labelEnd;

    token        = state.push('link_open', 'a', 1);
    token.attrs  = attrs = [ [ 'href', href ] ];
    if (title) {
      attrs.push([ 'title', title ]);
    }

    state.md.inline.tokenize(state);

    token        = state.push('link_close', 'a', -1);
  }

  state.pos = pos;
  state.posMax = max;
  return true;
};

},{"../common/utils":11}],53:[function(require,module,exports){
// Proceess '\n'

'use strict';

var isSpace = require('../common/utils').isSpace;


module.exports = function newline(state, silent) {
  var pmax, max, ws, pos = state.pos;

  if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false; }

  pmax = state.pending.length - 1;
  max = state.posMax;

  // '  \n' -> hardbreak
  // Lookup in pending chars is bad practice! Don't copy to other rules!
  // Pending string is stored in concat mode, indexed lookups will cause
  // convertion to flat mode.
  if (!silent) {
    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
        // Find whitespaces tail of pending chars.
        ws = pmax - 1;
        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;

        state.pending = state.pending.slice(0, ws);
        state.push('hardbreak', 'br', 0);
      } else {
        state.pending = state.pending.slice(0, -1);
        state.push('softbreak', 'br', 0);
      }

    } else {
      state.push('softbreak', 'br', 0);
    }
  }

  pos++;

  // skip heading spaces for next line
  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }

  state.pos = pos;
  return true;
};

},{"../common/utils":11}],54:[function(require,module,exports){
// Inline parser state

'use strict';


var Token          = require('../token');
var isWhiteSpace   = require('../common/utils').isWhiteSpace;
var isPunctChar    = require('../common/utils').isPunctChar;
var isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;


function StateInline(src, md, env, outTokens) {
  this.src = src;
  this.env = env;
  this.md = md;
  this.tokens = outTokens;
  this.tokens_meta = Array(outTokens.length);

  this.pos = 0;
  this.posMax = this.src.length;
  this.level = 0;
  this.pending = '';
  this.pendingLevel = 0;

  // Stores { start: end } pairs. Useful for backtrack
  // optimization of pairs parse (emphasis, strikes).
  this.cache = {};

  // List of emphasis-like delimiters for current tag
  this.delimiters = [];

  // Stack of delimiter lists for upper level tags
  this._prev_delimiters = [];

  // backtick length => last seen position
  this.backticks = {};
  this.backticksScanned = false;
}


// Flush pending text
//
StateInline.prototype.pushPending = function () {
  var token = new Token('text', '', 0);
  token.content = this.pending;
  token.level = this.pendingLevel;
  this.tokens.push(token);
  this.pending = '';
  return token;
};


// Push new token to "stream".
// If pending text exists - flush it as text token
//
StateInline.prototype.push = function (type, tag, nesting) {
  if (this.pending) {
    this.pushPending();
  }

  var token = new Token(type, tag, nesting);
  var token_meta = null;

  if (nesting < 0) {
    // closing tag
    this.level--;
    this.delimiters = this._prev_delimiters.pop();
  }

  token.level = this.level;

  if (nesting > 0) {
    // opening tag
    this.level++;
    this._prev_delimiters.push(this.delimiters);
    this.delimiters = [];
    token_meta = { delimiters: this.delimiters };
  }

  this.pendingLevel = this.level;
  this.tokens.push(token);
  this.tokens_meta.push(token_meta);
  return token;
};


// Scan a sequence of emphasis-like markers, and determine whether
// it can start an emphasis sequence or end an emphasis sequence.
//
//  - start - position to scan from (it should point at a valid marker);
//  - canSplitWord - determine if these markers can be found inside a word
//
StateInline.prototype.scanDelims = function (start, canSplitWord) {
  var pos = start, lastChar, nextChar, count, can_open, can_close,
      isLastWhiteSpace, isLastPunctChar,
      isNextWhiteSpace, isNextPunctChar,
      left_flanking = true,
      right_flanking = true,
      max = this.posMax,
      marker = this.src.charCodeAt(start);

  // treat beginning of the line as a whitespace
  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;

  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }

  count = pos - start;

  // treat end of the line as a whitespace
  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;

  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));

  isLastWhiteSpace = isWhiteSpace(lastChar);
  isNextWhiteSpace = isWhiteSpace(nextChar);

  if (isNextWhiteSpace) {
    left_flanking = false;
  } else if (isNextPunctChar) {
    if (!(isLastWhiteSpace || isLastPunctChar)) {
      left_flanking = false;
    }
  }

  if (isLastWhiteSpace) {
    right_flanking = false;
  } else if (isLastPunctChar) {
    if (!(isNextWhiteSpace || isNextPunctChar)) {
      right_flanking = false;
    }
  }

  if (!canSplitWord) {
    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);
    can_close = right_flanking && (!left_flanking  || isNextPunctChar);
  } else {
    can_open  = left_flanking;
    can_close = right_flanking;
  }

  return {
    can_open:  can_open,
    can_close: can_close,
    length:    count
  };
};


// re-export Token class to use in block rules
StateInline.prototype.Token = Token;


module.exports = StateInline;

},{"../common/utils":11,"../token":58}],55:[function(require,module,exports){
// ~~strike through~~
//
'use strict';


// Insert each marker as a separate text token, and add it to delimiter list
//
module.exports.tokenize = function strikethrough(state, silent) {
  var i, scanned, token, len, ch,
      start = state.pos,
      marker = state.src.charCodeAt(start);

  if (silent) { return false; }

  if (marker !== 0x7E/* ~ */) { return false; }

  scanned = state.scanDelims(state.pos, true);
  len = scanned.length;
  ch = String.fromCharCode(marker);

  if (len < 2) { return false; }

  if (len % 2) {
    token         = state.push('text', '', 0);
    token.content = ch;
    len--;
  }

  for (i = 0; i < len; i += 2) {
    token         = state.push('text', '', 0);
    token.content = ch + ch;

    state.delimiters.push({
      marker: marker,
      length: 0,     // disable "rule of 3" length checks meant for emphasis
      token:  state.tokens.length - 1,
      end:    -1,
      open:   scanned.can_open,
      close:  scanned.can_close
    });
  }

  state.pos += scanned.length;

  return true;
};


function postProcess(state, delimiters) {
  var i, j,
      startDelim,
      endDelim,
      token,
      loneMarkers = [],
      max = delimiters.length;

  for (i = 0; i < max; i++) {
    startDelim = delimiters[i];

    if (startDelim.marker !== 0x7E/* ~ */) {
      continue;
    }

    if (startDelim.end === -1) {
      continue;
    }

    endDelim = delimiters[startDelim.end];

    token         = state.tokens[startDelim.token];
    token.type    = 's_open';
    token.tag     = 's';
    token.nesting = 1;
    token.markup  = '~~';
    token.content = '';

    token         = state.tokens[endDelim.token];
    token.type    = 's_close';
    token.tag     = 's';
    token.nesting = -1;
    token.markup  = '~~';
    token.content = '';

    if (state.tokens[endDelim.token - 1].type === 'text' &&
        state.tokens[endDelim.token - 1].content === '~') {

      loneMarkers.push(endDelim.token - 1);
    }
  }

  // If a marker sequence has an odd number of characters, it's splitted
  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
  // start of the sequence.
  //
  // So, we have to move all those markers after subsequent s_close tags.
  //
  while (loneMarkers.length) {
    i = loneMarkers.pop();
    j = i + 1;

    while (j < state.tokens.length && state.tokens[j].type === 's_close') {
      j++;
    }

    j--;

    if (i !== j) {
      token = state.tokens[j];
      state.tokens[j] = state.tokens[i];
      state.tokens[i] = token;
    }
  }
}


// Walk through delimiter list and replace text tokens with tags
//
module.exports.postProcess = function strikethrough(state) {
  var curr,
      tokens_meta = state.tokens_meta,
      max = state.tokens_meta.length;

  postProcess(state, state.delimiters);

  for (curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess(state, tokens_meta[curr].delimiters);
    }
  }
};

},{}],56:[function(require,module,exports){
// Skip text characters for text token, place those to pending buffer
// and increment current pos

'use strict';


// Rule to skip pure text
// '{}$%@~+=:' reserved for extentions

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
function isTerminatorChar(ch) {
  switch (ch) {
    case 0x0A/* \n */:
    case 0x21/* ! */:
    case 0x23/* # */:
    case 0x24/* $ */:
    case 0x25/* % */:
    case 0x26/* & */:
    case 0x2A/* * */:
    case 0x2B/* + */:
    case 0x2D/* - */:
    case 0x3A/* : */:
    case 0x3C/* < */:
    case 0x3D/* = */:
    case 0x3E/* > */:
    case 0x40/* @ */:
    case 0x5B/* [ */:
    case 0x5C/* \ */:
    case 0x5D/* ] */:
    case 0x5E/* ^ */:
    case 0x5F/* _ */:
    case 0x60/* ` */:
    case 0x7B/* { */:
    case 0x7D/* } */:
    case 0x7E/* ~ */:
      return true;
    default:
      return false;
  }
}

module.exports = function text(state, silent) {
  var pos = state.pos;

  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
    pos++;
  }

  if (pos === state.pos) { return false; }

  if (!silent) { state.pending += state.src.slice(state.pos, pos); }

  state.pos = pos;

  return true;
};

// Alternative implementation, for memory.
//
// It costs 10% of performance, but allows extend terminators list, if place it
// to `ParcerInline` property. Probably, will switch to it sometime, such
// flexibility required.

/*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
};*/

},{}],57:[function(require,module,exports){
// Clean up tokens after emphasis and strikethrough postprocessing:
// merge adjacent text nodes into one and re-calculate all token levels
//
// This is necessary because initially emphasis delimiter markers (*, _, ~)
// are treated as their own separate text tokens. Then emphasis rule either
// leaves them as text (needed to merge with adjacent text) or turns them
// into opening/closing tags (which messes up levels inside).
//
'use strict';


module.exports = function text_collapse(state) {
  var curr, last,
      level = 0,
      tokens = state.tokens,
      max = state.tokens.length;

  for (curr = last = 0; curr < max; curr++) {
    // re-calculate levels after emphasis/strikethrough turns some text nodes
    // into opening/closing tags
    if (tokens[curr].nesting < 0) level--; // closing tag
    tokens[curr].level = level;
    if (tokens[curr].nesting > 0) level++; // opening tag

    if (tokens[curr].type === 'text' &&
        curr + 1 < max &&
        tokens[curr + 1].type === 'text') {

      // collapse two adjacent text nodes
      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
    } else {
      if (curr !== last) { tokens[last] = tokens[curr]; }

      last++;
    }
  }

  if (curr !== last) {
    tokens.length = last;
  }
};

},{}],58:[function(require,module,exports){
// Token class

'use strict';


/**
 * class Token
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/
function Token(type, tag, nesting) {
  /**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/
  this.type     = type;

  /**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/
  this.tag      = tag;

  /**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/
  this.attrs    = null;

  /**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/
  this.map      = null;

  /**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/
  this.nesting  = nesting;

  /**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/
  this.level    = 0;

  /**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/
  this.children = null;

  /**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/
  this.content  = '';

  /**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/
  this.markup   = '';

  /**
   * Token#info -> String
   *
   * Additional information:
   *
   * - Info string for "fence" tokens
   * - The value "auto" for autolink "link_open" and "link_close" tokens
   * - The string value of the item marker for ordered-list "list_item_open" tokens
   **/
  this.info     = '';

  /**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/
  this.meta     = null;

  /**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/
  this.block    = false;

  /**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/
  this.hidden   = false;
}


/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/
Token.prototype.attrIndex = function attrIndex(name) {
  var attrs, i, len;

  if (!this.attrs) { return -1; }

  attrs = this.attrs;

  for (i = 0, len = attrs.length; i < len; i++) {
    if (attrs[i][0] === name) { return i; }
  }
  return -1;
};


/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/
Token.prototype.attrPush = function attrPush(attrData) {
  if (this.attrs) {
    this.attrs.push(attrData);
  } else {
    this.attrs = [ attrData ];
  }
};


/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/
Token.prototype.attrSet = function attrSet(name, value) {
  var idx = this.attrIndex(name),
      attrData = [ name, value ];

  if (idx < 0) {
    this.attrPush(attrData);
  } else {
    this.attrs[idx] = attrData;
  }
};


/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/
Token.prototype.attrGet = function attrGet(name) {
  var idx = this.attrIndex(name), value = null;
  if (idx >= 0) {
    value = this.attrs[idx][1];
  }
  return value;
};


/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/
Token.prototype.attrJoin = function attrJoin(name, value) {
  var idx = this.attrIndex(name);

  if (idx < 0) {
    this.attrPush([ name, value ]);
  } else {
    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
  }
};


module.exports = Token;

},{}],59:[function(require,module,exports){

'use strict';


/* eslint-disable no-bitwise */

var decodeCache = {};

function getDecodeCache(exclude) {
  var i, ch, cache = decodeCache[exclude];
  if (cache) { return cache; }

  cache = decodeCache[exclude] = [];

  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);
    cache.push(ch);
  }

  for (i = 0; i < exclude.length; i++) {
    ch = exclude.charCodeAt(i);
    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
  }

  return cache;
}


// Decode percent-encoded string.
//
function decode(string, exclude) {
  var cache;

  if (typeof exclude !== 'string') {
    exclude = decode.defaultChars;
  }

  cache = getDecodeCache(exclude);

  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
    var i, l, b1, b2, b3, b4, chr,
        result = '';

    for (i = 0, l = seq.length; i < l; i += 3) {
      b1 = parseInt(seq.slice(i + 1, i + 3), 16);

      if (b1 < 0x80) {
        result += cache[b1];
        continue;
      }

      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {
        // 110xxxxx 10xxxxxx
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);

        if ((b2 & 0xC0) === 0x80) {
          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);

          if (chr < 0x80) {
            result += '\ufffd\ufffd';
          } else {
            result += String.fromCharCode(chr);
          }

          i += 3;
          continue;
        }
      }

      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {
        // 1110xxxx 10xxxxxx 10xxxxxx
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        b3 = parseInt(seq.slice(i + 7, i + 9), 16);

        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);

          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {
            result += '\ufffd\ufffd\ufffd';
          } else {
            result += String.fromCharCode(chr);
          }

          i += 6;
          continue;
        }
      }

      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {
        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        b3 = parseInt(seq.slice(i + 7, i + 9), 16);
        b4 = parseInt(seq.slice(i + 10, i + 12), 16);

        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);

          if (chr < 0x10000 || chr > 0x10FFFF) {
            result += '\ufffd\ufffd\ufffd\ufffd';
          } else {
            chr -= 0x10000;
            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
          }

          i += 9;
          continue;
        }
      }

      result += '\ufffd';
    }

    return result;
  });
}


decode.defaultChars   = ';/?:@&=+$,#';
decode.componentChars = '';


module.exports = decode;

},{}],60:[function(require,module,exports){

'use strict';


var encodeCache = {};


// Create a lookup array where anything but characters in `chars` string
// and alphanumeric chars is percent-encoded.
//
function getEncodeCache(exclude) {
  var i, ch, cache = encodeCache[exclude];
  if (cache) { return cache; }

  cache = encodeCache[exclude] = [];

  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);

    if (/^[0-9a-z]$/i.test(ch)) {
      // always allow unencoded alphanumeric characters
      cache.push(ch);
    } else {
      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
    }
  }

  for (i = 0; i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i];
  }

  return cache;
}


// Encode unsafe characters with percent-encoding, skipping already
// encoded sequences.
//
//  - string       - string to encode
//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
//
function encode(string, exclude, keepEscaped) {
  var i, l, code, nextCode, cache,
      result = '';

  if (typeof exclude !== 'string') {
    // encode(string, keepEscaped)
    keepEscaped  = exclude;
    exclude = encode.defaultChars;
  }

  if (typeof keepEscaped === 'undefined') {
    keepEscaped = true;
  }

  cache = getEncodeCache(exclude);

  for (i = 0, l = string.length; i < l; i++) {
    code = string.charCodeAt(i);

    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result += string.slice(i, i + 3);
        i += 2;
        continue;
      }
    }

    if (code < 128) {
      result += cache[code];
      continue;
    }

    if (code >= 0xD800 && code <= 0xDFFF) {
      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
        nextCode = string.charCodeAt(i + 1);
        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
          result += encodeURIComponent(string[i] + string[i + 1]);
          i++;
          continue;
        }
      }
      result += '%EF%BF%BD';
      continue;
    }

    result += encodeURIComponent(string[i]);
  }

  return result;
}

encode.defaultChars   = ";/?:@&=+$,-_.!~*'()#";
encode.componentChars = "-_.!~*'()";


module.exports = encode;

},{}],61:[function(require,module,exports){

'use strict';


module.exports = function format(url) {
  var result = '';

  result += url.protocol || '';
  result += url.slashes ? '//' : '';
  result += url.auth ? url.auth + '@' : '';

  if (url.hostname && url.hostname.indexOf(':') !== -1) {
    // ipv6 address
    result += '[' + url.hostname + ']';
  } else {
    result += url.hostname || '';
  }

  result += url.port ? ':' + url.port : '';
  result += url.pathname || '';
  result += url.search || '';
  result += url.hash || '';

  return result;
};

},{}],62:[function(require,module,exports){
'use strict';


module.exports.encode = require('./encode');
module.exports.decode = require('./decode');
module.exports.format = require('./format');
module.exports.parse  = require('./parse');

},{"./decode":59,"./encode":60,"./format":61,"./parse":63}],63:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

//
// Changes from joyent/node:
//
// 1. No leading slash in paths,
//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
//
// 2. Backslashes are not replaced with slashes,
//    so `http:\\example.org\` is treated like a relative path
//
// 3. Trailing colon is treated like a part of the path,
//    i.e. in `http://example.org:foo` pathname is `:foo`
//
// 4. Nothing is URL-encoded in the resulting object,
//    (in joyent/node some chars in auth and paths are encoded)
//
// 5. `url.parse()` does not have `parseQueryString` argument
//
// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
//    which can be constructed using other parts of the url.
//


function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.pathname = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = [ '<', '>', '"', '`', ' ', '\r', '\n', '\t' ],

    // RFC 2396: characters not allowed for various reasons.
    unwise = [ '{', '}', '|', '\\', '^', '`' ].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = [ '\'' ].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),
    hostEndingChars = [ '/', '?', '#' ],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    /* eslint-disable no-script-url */
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };
    /* eslint-enable no-script-url */

function urlParse(url, slashesDenoteHost) {
  if (url && url instanceof Url) { return url; }

  var u = new Url();
  u.parse(url, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, slashesDenoteHost) {
  var i, l, lowerProto, hec, slashes,
      rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    lowerProto = proto.toLowerCase();
    this.protocol = proto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = auth;
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) {
      hostEnd = rest.length;
    }

    if (rest[hostEnd - 1] === ':') { hostEnd--; }
    var host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost(host);

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) { continue; }
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    }

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    rest = rest.slice(0, qm);
  }
  if (rest) { this.pathname = rest; }
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '';
  }

  return this;
};

Url.prototype.parseHost = function(host) {
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) { this.hostname = host; }
};

module.exports = urlParse;

},{}],64:[function(require,module,exports){
(function (global){(function (){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],65:[function(require,module,exports){
module.exports=/[\0-\x1F\x7F-\x9F]/
},{}],66:[function(require,module,exports){
module.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/
},{}],67:[function(require,module,exports){
module.exports=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/
},{}],68:[function(require,module,exports){
module.exports=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/
},{}],69:[function(require,module,exports){
'use strict';

exports.Any = require('./properties/Any/regex');
exports.Cc  = require('./categories/Cc/regex');
exports.Cf  = require('./categories/Cf/regex');
exports.P   = require('./categories/P/regex');
exports.Z   = require('./categories/Z/regex');

},{"./categories/Cc/regex":65,"./categories/Cf/regex":66,"./categories/P/regex":67,"./categories/Z/regex":68,"./properties/Any/regex":70}],70:[function(require,module,exports){
module.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/
},{}],71:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-checkconfigupdate
 * @requires module:pulseComponent
 * 
 * Check if the config ON THE SERVER changed
 */
var pulseComponent = require('pulsecomponent');
var pulseConfig = require('pulseConfig');
var eventBus = require('eventBus');

(function () {

  class checkconfigupdateComponent extends pulseComponent.PulseParamAutoPathRefreshingComponent {
    initialize () {
      this.addClass('pulse-nodisplay');
      
      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    validateParameters () {
      this.switchToNextContext();
    }

    displayError (message) {
      // Do nothing
    }

    removeError () {
      // Do nothing
      this.displayError('');
    }

    get refreshRate () {
      // Return here the refresh rate in ms.
      return 1000 * Number(this.getConfigOrAttribute('refreshSeconds', 300));
    }

    getShortUrl () {
      // Return the Web Service URL here without path
      return 'Config/LastUpdate';
    }

    refresh (data) {
      // Update the component
      if (typeof this._updateDateTime == 'undefined') {
        this._updateDateTime = data.UpdateDateTime;
      }
      else {
        let configHasChanged = true;
        if (JSON.stringify(this._updateDateTime) === JSON.stringify(data.UpdateDateTime)) {
          configHasChanged = false;
        }
        if (configHasChanged) {
          let href = window.location.href;
          if ('live' == pulseConfig.getAppContextOrRole()) {
            // reload for live
            window.open(href, '_self');
          }
          else {
            // Display a message
            let messageInfo = {
              'id': 'CONFIG Server',
              'message': 'Configuration on server has changed ',
              'level': 'info',
              'clickToClose': false,
              'reloadURL': href
            };
            eventBus.EventBus.dispatchToAll('showMessageSignal',
              messageInfo);
          }
        }
      }
    }
  }

  pulseComponent.registerElement('x-checkconfigupdate', checkconfigupdateComponent);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulsecomponent":2}],72:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-checkcurrenttime
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');
var pulseConfig = require('pulseConfig');
var eventBus = require('eventBus');

/**
 * Build a custom tag <x-checkcurrenttime> to check currenttime.  
 */
(function () {

  class CheckCurrentTimeComponent extends pulseComponent.PulseParamAutoPathRefreshingComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      // DOM -> never in contructor
      self._content = undefined; // Optional

      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
    }

    initialize () {
      this.addClass('pulse-nodisplay');

      // Update here some internal parameters

      // listeners

      // In case of clone, need to be empty :
      //$(this.element).empty();

      // Create DOM - NO DOM

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    /**
     * Validate the (event) parameters
     */
    validateParameters () {
      this.switchToNextContext();
    }

    // Overload to always refresh value
    get isVisible () {
      return true;
    }

    get refreshRate () {
      // Return here the refresh rate in ms. 
      return 1000 * 60 * 60 * 24; // 1 day
    }

    getShortUrl () {
      // Return the Web Service URL here without path
      let url = 'CurrentTime/';
      return url;
    }

    refresh (data) {
      let now = new Date();
      let serverDate = new Date(data.Utc);

      // Find diff + store
      let diffServerTimeMinusNowMSec = serverDate.getTime() - now.getTime();
      pulseConfig.setGlobal('diffServerTimeMinusNowMSec', diffServerTimeMinusNowMSec);

      // default 30 seconds (can be overload)
      let allowedDiff = this.getConfigOrAttribute('seconds', '30');
      if (Math.abs(diffServerTimeMinusNowMSec) > allowedDiff * 1000) {
        let messageInfo = {
          'id': 'Current Time',
          'message': pulseConfig.pulseTranslate('check.PleaseSyncTime',
            'Please synchonize date and time '),
          'level': 'warning',
          'clickToClose': true
        };
        //messageInfo.id = id;
        // 'permanent' -> NO messageInfo.time
        messageInfo.clickToClose = false;
        eventBus.EventBus.dispatchToAll('showMessageSignal',
          messageInfo);
      }
    }

    // Callback events
  }

  pulseComponent.registerElement('x-checkcurrenttime',
    CheckCurrentTimeComponent);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulsecomponent":2}],73:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-checklogin
 * @requires module:pulseComponent
 */
var pulseComponent = require('pulsecomponent');
var pulseConfig = require('pulseConfig');
var pulseLogin = require('pulseLogin');
var pulseService = require('pulseService');
//var pulseUtility = require('pulseUtility');
var eventBus = require('eventBus');

(function () {

  class CheckLoginComponent extends pulseComponent.PulseParamAutoPathSingleRequestComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      //self._content = undefined;
      self._pendingRefreshToken = false;

      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      /*switch (attr) {
        default:
          break;
      }*/
    }

    initialize () {
      this.addClass('pulse-nodisplay');
      //this.addClass('pulse-text'); // Mandatory for loader
      
      // Listener and dispatchers
      eventBus.EventBus.addGlobalEventListener(this, 'AuthorizationErrorEvent',
        this.onAuthorizationError.bind(this));

      eventBus.EventBus.addGlobalEventListener(this, 'TokenHasChangedEvent',
        this.onTokenHaschanged.bind(this));

      // In case of clone, need to be empty :
      $(this.element).empty();

      // No DOM

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      super.clearInitialization();
    }

    validateParameters () {
      // If connection not allowed - return to page login

      if (!pulseConfig.isLoginPage()) { // If not in page login or validate
        // FOR Pulse Web App - app context or role is mandatory
        if (pulseConfig.isCurrentApp('PulseWebApp')) {
          if ('' == pulseConfig.getAppContextOrRole()) {
            // Clean all cookies linked to login
            pulseLogin.cleanLoginRole();

            // Role or AppContext is mandatory -> go to page login (if not)
            pulseConfig.goToPageLogin();
            return;
          }
        }

        // FOR ALL apps, check login
        this._checkLoginIsValid();
      }

      this.switchToContext('Loaded'); // To stop refresh 

      // this.switchToNextContext();-> to restore if web service is used
    }

    _checkLoginIsValid () {
      let useLogin = pulseConfig.getBool('useLogin', false);
      if (useLogin) {
        if ('' == pulseLogin.getLogin()) {
          this._disconnectAndGoToPageLogin();
          return;
        }
        else {
          // Check Token expiration
          if (this._checkIfTokenIsExpired()) {
            this._disconnectAndGoToPageLogin();
            return;
          }

          // Start timer to check if another page / tab / app asked for deconnection
          this._checkLoginIsValidTimer = setTimeout(
            this._checkLoginIsValid.bind(this),
            60000); // 1 min
        }
      }
    }

    displayError (message) {
      // Nothing
    }

    removeError () {
      // Nothing
    }

    getShortUrl () {
      // Return the Web Service URL here without path
      //return 'Get...' + this.element.getAttribute('myattr');
      return '';
    }

    refresh (data) {
      // Update the component with data which is returned by the web service in case of success
      // For example:
      //$(this._content).html(data.Name);
    }

    /**
     * Event callback in case a config is updated: (re-)start the component
     *
     * @param {*} event
     */
    onConfigChange (event) {
      // Default = do nothing
      // Maybe re start ?
    }

    // Token changed -> prepare timeout for disconnection (useful for static display like reporting)
    onTokenHaschanged (event) {
      if (event.target.kind != 'AccessToken') {
        // Ignore
        return;
      }
      // Check Token expiration
      if (this._checkIfTokenIsExpired()) {
        this._disconnectAndGoToPageLogin();
        return;
      }
    }

    _checkIfTokenIsExpired () {
      let access_token_exp = pulseLogin.getAccessTokenExpiration();
      if (access_token_exp == '') {
        // Nothing to do
        return false;
      }

      let now = new Date();
      let tokenDate = new Date(access_token_exp);

      // Find diff + store
      let diffMSec = tokenDate.getTime() - now.getTime();
      if (diffMSec > 0) {
        return false;
      }
      else {
        return true; // expired
      }
    }

    _disconnectAndGoToPageLogin () {
      // Clean all cookies linked to login
      pulseLogin.cleanLoginRole();

      // Goto page login with an error message to be displayed
      if (!pulseConfig.isLoginPage()) { // If not in page login
        pulseConfig.goToPageLogin();
        return true;
      }
    }

    // Token expired -> GLOBAL refresh token
    onAuthorizationError (event) {
      if (!this._pendingRefreshToken) {
        this._pendingRefreshToken = true;

        let login = pulseLogin.getLogin();
        let refresh_token = pulseLogin.getRefreshToken();

        if (login == '' ||
          refresh_token == '') {
          // Error
          this._renewTokenError.bind(this);
          return;
        }

        let url = this.getConfigOrAttribute('path', '')
          + 'User/RenewToken';

        let timeout = this.timeout;
        pulseService.postAjax(0, url,
          {
            'Login': login,
            'RefreshToken': refresh_token
          },
          timeout,
          this._renewTokenSuccess.bind(this),
          this._renewTokenError.bind(this),
          this._renewTokenFail.bind(this));
      }
    }

    _renewTokenSuccess (token, data) {
      pulseLogin.storeLoginRoleFromRefreshDTO(data, true);
      this._pendingRefreshToken = false;
    }

    _renewTokenError (token, error) {
      pulseConfig.setGlobal('loginError', 'Authentication Error. Please retry');
      // Clean all cookies linked to login
      pulseLogin.cleanLoginRole();

      // Goto page login with an error message to be displayed
      if (!pulseConfig.isLoginPage()) { // If not in page login
        pulseConfig.goToPageLogin();
        return true;
      }
      this._pendingRefreshToken = false;
    }

    _renewTokenFail (token, url, isTimeout, xhrStatus) {
      pulseConfig.setGlobal('loginError', 'Authentication Error. Please retry');
      // Clean all cookies linked to login
      pulseLogin.cleanLoginRole();

      // Goto page login with an error message to be displayed
      if (!pulseConfig.isLoginPage()) { // If not in page login
        pulseConfig.goToPageLogin();
        return true;
      }
      this._pendingRefreshToken = false;
    }

  }

  pulseComponent.registerElement('x-checklogin', CheckLoginComponent);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseLogin":"pulseLogin","pulseService":"pulseService","pulsecomponent":2}],74:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-checkpath
 * @requires module:pulseComponent
 */
var pulseComponent = require('pulsecomponent');
var pulseConfig = require('pulseConfig');
var eventBus = require('eventBus');

(function () {

  class CheckPathComponent extends pulseComponent.PulseParamSingleRequestComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self._content = undefined;

      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
    }

    initialize () {
      this.addClass('pulse-nodisplay');

      //this.addClass('pulse-bigdisplay');

      // Create DOM - Loader (DO NOT REMOVE code => will be used once the global error message will display info)
      // To display BIG LOADING on the whole page - removed FOR THE MOMENT
      // DO NOT REMOVE THESE 2 LINES !!!
      /*let loader = $('<div></div>').addClass('pulse-loader').html('Loading...').css('display', 'none');
      let loaderDiv = $('<div></div>').addClass('pulse-loader-div').append(loader);
      $(this._content).append(loaderDiv);*/
      // Create DOM - Content
      //this._content = $('<div></div>').addClass('pulse-checkpath-content');

      // Listener

      // Initialization OK => switch to the next context
      this.switchToNextContext();
    }

    validateParameters () {
      // Additional checks with attribute param
     
      let skip = this.getConfigOrAttribute('skipWebServiceAddress', 'false');

      if ( skip == true || skip == 'true' ) {
        let mainpath = this.getConfigOrAttribute('mainpath', ''); // Probably ""
        if (mainpath != '') {
          // '/' at the end ?
          let lastChar = mainpath.charAt(mainpath.length - 1);
          if (lastChar != '/') {
            mainpath = mainpath + '/';
          }
          let oldpath = this.getConfigOrAttribute('path', '');
          if (oldpath != mainpath) { // Reload only if different, else endless reload at beginning when server is stopped.
            pulseConfig.setGlobal('path', mainpath); // SessionStorage
            // Warn all components to reload :
            eventBus.EventBus.dispatchToAll('pathChangeEvent', {});
          }
        }
        this.setError('Skip web service path');
      }
      else{
        this.switchToNextContext();
      }
    }

    // Overload to always refresh value
    get isVisible () {
      if (!this._connected) { // == is connected
        return false;
      }
      return true;
    }

    get url () {
      let mainpath = this.getConfigOrAttribute('mainpath', ''); // Probably ""
      if (mainpath == '') {
        let href = window.location.href;
        // Hack for local path (on dev computers)
        if ('file' == href.slice(0, 4)) {
          mainpath = 'https://lctr:5001/';
        }
        else {
          // Search in Page URL : http://lctr/RtdWebApp/...
          let posSlash = href.indexOf('/', 8);  // = more than 7<->length of http://
          if (posSlash != -1) {
            mainpath = href.slice(0, posSlash) + ':5001/'; // https://lctr:5001
            if ( mainpath.indexOf('https') != -1 ) {
              // path do not include 'https'
              if ( mainpath.startsWith('http') ) {
                // Add 's' after http
                mainpath = 'https' + mainpath.slice(4);
              }
            }
          }
        }
      }
      // '/' at the end ?
      let lastChar = mainpath.charAt(mainpath.length - 1);
      if (lastChar != '/') {
        mainpath += '/';
      }
      // Return the Web Service URL here
      return mainpath + 'WebServiceAddress/';
    }

    refresh (data) {
      let previousPath = this.getConfigOrAttribute('path', '');

      let secondarypath = data.Url;
      if (secondarypath.length > 1) {
        // '/' at the end ?
        let lastChar = secondarypath.charAt(secondarypath.length - 1);
        if (lastChar != '/') {
          secondarypath = secondarypath + '/';
        }
      }
      pulseConfig.setGlobal('path', secondarypath); // SessionStorage
      if (secondarypath != previousPath) {
        // Warn all components to reload :
        console.log('dispatch path change event');
        eventBus.EventBus.dispatchToAll('pathChangeEvent', {});
      }
    }

    manageError (data) {
      /* NO Message here, because it can happens if WebServiceAddress is badly configured
      var messageInfo = {
        'id': 'MAINPATH',
        'message': pulseConfig.pulseTranslate('check.PleaseCheckServerOrPath', 'Please check server access (or path)'),
        // Keep or mainpath here. Because it is probably linked to path when the message comes from here --RR
        'level': 'error',
        'time': 20 // seconds to display message
      };
      messageInfo.clickToClose = true;
      eventBus.EventBus.dispatchToAll('showMessageSignal',
        messageInfo);*/

      // In case of error, try to use mainpath defined in config
      let mainpath = this.getConfigOrAttribute('mainpath', ''); // Probably ""
      if (mainpath != '') {
        // '/' at the end ?
        let lastChar = mainpath.charAt(mainpath.length - 1);
        if (lastChar != '/') {
          mainpath = mainpath + '/';
        }
        let oldpath = this.getConfigOrAttribute('path', '');
        if (oldpath != mainpath) { // Reload only if different, else endless reload at beginning when server is stopped.
          pulseConfig.setGlobal('path', mainpath); // SessionStorage
          // Warn all components to reload :
          eventBus.EventBus.dispatchToAll('pathChangeEvent', {});
        }
      }

      super.manageError(data);
    }

    manageFailure (isTimeout, xhrStatus) {
      var messageInfo = {
        'id': 'PATH',
        'message': pulseConfig.pulseTranslate('check.PleaseCheckServerOrPath', 'Please check server access (or path)'),
        // Keep 'or path' here. Because it is probably linked to path when the message comes from here --RR
        'level': 'error',
        'time': 20 // seconds to display message
      };
      messageInfo.clickToClose = true;
      eventBus.EventBus.dispatchToAll('showMessageSignal',
        messageInfo);

      // In case of error, try to use mainpath defined in config
      let mainpath = this.getConfigOrAttribute('mainpath', ''); // Probably ""
      if (mainpath != '') {
        // '/' at the end ?
        let lastChar = mainpath.charAt(mainpath.length - 1);
        if (lastChar != '/') {
          mainpath = mainpath + '/';
        }
        let oldpath = this.getConfigOrAttribute('path', '');
        if (oldpath != mainpath) { // Reload only if different, else endless reload at beginning when server is stopped.
          pulseConfig.setGlobal('path', mainpath); // SessionStorage
          // Warn all components to reload :
          eventBus.EventBus.dispatchToAll('pathChangeEvent', {});
        }
      }

      super.manageFailure(isTimeout, xhrStatus);
    }
  }

  pulseComponent.registerElement('x-checkpath', CheckPathComponent);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulsecomponent":2}],75:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-checkserveraccess
 * @requires module:pulseComponent
 */
var pulseComponent = require('pulsecomponent');
var eventBus = require('eventBus');
var pulseSvg = require('pulseSvg');
var pulseConfig = require('pulseConfig');

(function () {

  class CheckServerAccessComponent extends pulseComponent.PulseParamAutoPathRefreshingComponent {

    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self._databaseIsDisconnected = false;
      self._serverProbablyOff = false;
      this._serverProbablyDisconnected = false;

      return self;
    }


    initialize () {
      this.addClass('pulse-nodisplay');
      
      // In case of clone, need to be empty :
      $(this.element).empty();
      this._databaseIsDisconnected = false;

      // listeners
      eventBus.EventBus.addGlobalEventListener(this, 'serverProbablyDisconnected',
        this.onServerProbablyDisconnectedChange.bind(this));
      eventBus.EventBus.addGlobalEventListener(this, 'databaseProbablyDisconnected',
        this.onDatabaseDisconnectedChange.bind(this));
      eventBus.EventBus.addGlobalEventListener(this, 'pulseMaintenance',
        this.onPulseMaintenance.bind(this));

      // Create DOM - None

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    /**
      * Clear anything that was done during intialization, so that initialize can be called once again.
      * Remove all the dispatchers and listeners.
      * Please note that no state switch is done here
    */
    clearInitialization () {
      // DOM
      $(this.element).empty();

      this._databaseIsDisconnected = false;

      super.clearInitialization();
    }

    reset () { // Optional implementation = called after 'start'
      // Code here to clean the component when the component has been initialized
      // for example after a parameter change
      //this.removeError();
      // Empty this._content

      // this._databaseIsDisconnected = false;... Surtout pas ! le restart passe ici

      this.switchToNextContext();
    }

    /**
     * Validate the (event) parameters
     */
    validateParameters () {
      this.switchToNextContext();
    }

    manageError (data) {
      super.manageError(data);
    }

    displayError (message) {
      // Not here !!! Can be called anywhere else
    }

    displayErrorAndStopAll () {
      // No display but send message for outside display

      let messageInfo = {
        'id': 'NO_SERVER', // same as clear
        'message': pulseConfig.pulseTranslate('check.PleaseCheckServer',
          'Please check server access'), // server OR database
        'level': 'error', // or 'warning', ?
        'clickToClose': false
      };

      if (this._databaseIsDisconnected) {
        messageInfo.message = pulseConfig.pulseTranslate('check.PleaseDatabaseAccess',
          'Please check database access');
      }

      eventBus.EventBus.dispatchToAll('showMessageSignal', messageInfo);

      // Store state
      this._serverProbablyOff = true;
      eventBus.EventBus.dispatchToAll('serverProbablyOffStopRefresh', {});
    }

    removeError () {
      // Do nothing
      //this._databaseIsDisconnected = false; ... Surtout pas ! le restart passe ici
    }

    get refreshRate () {
      return 1000 * Number(this.getConfigOrAttribute('refreshingRate.currentRefreshSeconds', 10));
    }

    get transientErrorDelay () {
      //return Number(1000); // == 1sec // DO NOT USE freezeMinutes == too long *
      let basicFreezeMinutes = this.getConfigOrAttribute('stopRefreshingRate.freezeMinutes', this._defaultTransientErrorDelay / 60 / 1000);
      let fastRefreshRate = 1000 * Number(this.getConfigOrAttribute('refreshingRate.currentRefreshSeconds', 10));
      return (Number(basicFreezeMinutes) * 60 * 1000)
        - 2 * fastRefreshRate; // To refresh faster than other components = avoid long 'Not Connected' display
    }

    getShortUrl () {
      let url = 'Data/Computer/GetLctr?Cache=No'; // was 'Test';
      return url;
    }

    manageSuccess (data) {
      // Hide message
      let messageInfo = {
        'id': 'NO_SERVER' // same as show
      };
      eventBus.EventBus.dispatchToAll('clearMessageSignal', messageInfo);

      // Hide 'Maintenance' - always to be sure !
      pulseSvg.hidePulseMaintenance();

      if (this._databaseIsDisconnected || this._serverProbablyOff) {
        this._databaseIsDisconnected = false;
        this._serverProbablyOff = false;

        // start to load data again (database / server or maintenance END )
        eventBus.EventBus.dispatchToAll('serverProbablyAvailable', {});
      }
      else { // Call here too to avoid frozen display
        // start to load data again (database / server or maintenance END )
        eventBus.EventBus.dispatchToAll('serverProbablyAvailable', {});
      }
      this._serverProbablyDisconnected = false;

      // Stop context
      this.switchToContext('Stop');
    }

    // Callback events

    /**
     * Event bus callback triggered when receivving event server probably diconnected
     *
     * @param {Object} event
     */
    onServerProbablyDisconnectedChange (event) {
      /* DO NOT REMOVE : here is how to find origin of info : */
      /*let target = event.target;
      let url = event.target.url;
      let source = event.target.source;
      let when = event.target.when;*/

      if (false == this._serverProbablyDisconnected) {
        this._serverProbablyDisconnected = true;
        this._serverProbablyDisconnectedSince = new Date();
      }
      else { // = if (this._serverProbablyDisconnected == true)
        let now = new Date();
        let elapsedMSec = now.getTime() - this._serverProbablyDisconnectedSince.getTime();

        // Display after 1 minute == when we are sure that many services failed, for example
        let Min = 1;
        if (elapsedMSec >= Min * 60 * 1000) {
          // Check my self if it is true

          // DO NOT removed comment yet -- 2022 02
          // The following code will be executed if server is REALLY disconnected = manageError
          // Store state
          //this._serverProbablyOff = true;
          // Stop All components
          //eventBus.EventBus.dispatchToAll('serverProbablyOffStopRefresh', {}); -> NO
          //this.displayError(''); // == display message AND Call onServerOffStopRefresh
          this.displayErrorAndStopAll();
        }
        if (this.stateContext == 'Stop') {
          // Start checking again
          this.start();
        }
      }
    }

    /**
     * Event bus callback triggered when receivving event server probably diconnected
     *
     * @param {Object} event
     */
    onDatabaseDisconnectedChange (event) {
      /* DO NOT REMOVE : here is how to find origin of info : */
      /*let target = event.target;
      let url = event.target.url;
      let source = event.target.source;
      let when = event.target.when;*/

      this._databaseIsDisconnected = true;

      //this.displayError(''); // == display message AND Call onServerOffStopRefresh
      this.displayErrorAndStopAll();

      if (this.stateContext == 'Stop') {
        // Start checking again
        this.start();
      } // else continue
    }

    /**
     * Event bus callback triggered when receivving event pulse maintenance
     *
     * @param {Object} event
     */
    onPulseMaintenance (event) {
      /* DO NOT REMOVE : here is how to find origin of info : */
      /*let target = event.target;
      let url = event.target.url;
      let source = event.target.source;
      let when = event.target.when;*/

      // Display 'Maintenance' if not already done
      pulseSvg.showPulseMaintenance();

      // Store state
      this._serverProbablyOff = true;
      // Stop All components
      eventBus.EventBus.dispatchToAll('serverProbablyOffStopRefresh', {});
      if (this.stateContext == 'Stop') {
        // Start checking again
        this.start();
      }  // else continue

    }

    /**
     * Default event callback in case server is off : OVERLOAD - Do nothing
     * 
     * @param {*} event 
     */
    onServerOffStopRefresh (event) {
      // Nothing -> to keep == overload default
      //console.log('checkserveraccess.onServerOffStopRefresh');
    }

    /**
     * Default event callback in case server is available: OVERLOAD - Do nothing
     * 
     * @param {*} event 
     */
    onServerAvailableChange (event) {
      // Nothing -> to keep == overload default
    }

    // Not added, included in previous ones
    // onDatabaseOffStopRefresh
    // onDatabaseAvailableChange 

  }

  pulseComponent.registerElement('x-checkserveraccess', CheckServerAccessComponent);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseSvg":"pulseSvg","pulsecomponent":2}],76:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-checkversion
 * @requires module:pulseComponent
 */
var pulseComponent = require('pulsecomponent');
var pulseUtility = require('pulseUtility');
var pulseConfig = require('pulseConfig');
var eventBus = require('eventBus');

(function () {

  class checkversionComponent extends pulseComponent.PulseParamAutoPathRefreshingComponent {
    initialize () {
      this.addClass('pulse-nodisplay');
      
      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }
    
    validateParameters () {
      this.switchToNextContext();
    }

    displayError (message) {
      // Do nothing
    }

    removeError () {
      // Do nothing
      this.displayError('');
    }

    get refreshRate () {
      // Return here the refresh rate in ms.
      return 60 * 60 * 1000; // Check every hour
    }

    getShortUrl () {
      // Return the Web Service URL here without path
      return 'PulseVersions/Get';
    }

    refresh (data) {
      // Update the component
      if (typeof this._currentVersions == 'undefined') {
        this._currentVersions = data.Versions;
      }
      else {
        let versionsHasChanged = true;
        if (JSON.stringify(this._currentVersions) === JSON.stringify(data.Versions)) {
          versionsHasChanged = false;
        }
        if (versionsHasChanged) { // reload
          let href = window.location.href;
          href = pulseUtility.changeURLParameter(href,
            'pulseVersion', data.Versions.Pulse);

          if ('live' == pulseConfig.getAppContextOrRole()) {
            // direct reload for live
            window.open(href, '_self');
          }
          else {
            // Display a message
            let messageInfo = {
              'id': 'Version',
              'message': 'Version has changed ',
              'level': 'info',
              'clickToClose': false,
              'reloadURL': href
            };
            eventBus.EventBus.dispatchToAll('showMessageSignal',
              messageInfo);
          }
        }
      }
    }
  }

  pulseComponent.registerElement('x-checkversion', checkversionComponent);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseUtility":"pulseUtility","pulsecomponent":2}],77:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-clock
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');


/**
 * Build a custom tag <x-clock> to display an clock component. This tag gets following attribute : 
*  display-seconds : Boolean
*  display-24h : Boolean
 */
(function () {

  class ClockComponent extends pulseComponent.PulseInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      // DOM
      self._textclock = undefined;
      self._content = undefined;


      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        case 'display-seconds':
        case 'display-24h':
          this.start();
          break;
        default:
          break;
      }
    }

    initialize () {
      this.addClass('pulse-text');

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - No Loader / no error

      // Create DOM - Content
      this._textclock = $('<div>00:00:00</div>').addClass('clock-text');
      this._content = $('<div></div>').addClass('clock-div')
        .append(this._textclock);
      $(this.element).append(this._content);

      this._startTime();

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      // Parameters
      // DOM
      $(this.element).empty();
      this._textclock = undefined;
      this._content = undefined;
      
      super.clearInitialization();
    }

    _startTime () {
      let now = moment();

      let stringToDisplay = '';
      let msBeforeNextChange = 1000 - now.millisecond();
      if (this.element.getAttribute('display-seconds') == 'true'
        || this.element.getAttribute('display-seconds') == true) {
        if (this.element.getAttribute('display-24h') == 'true'
          || this.element.getAttribute('display-24h') == true) {
          stringToDisplay = now.format('HH:mm:ss');
        }
        else {
          stringToDisplay = now.format('hh:mm:ss a');
        }
      }
      else { //let stringToDisplay = now.format('LT');
        if (this.element.getAttribute('display-24h') == 'true'
          || this.element.getAttribute('display-24h') == true) {
          stringToDisplay = now.format('HH:mm');
        }
        else {
          stringToDisplay = now.format('hh:mm a');
        }
        msBeforeNextChange += 1000 * (60 - now.second());
      }
      this._textclock.html(stringToDisplay);
      setTimeout(this._startTime.bind(this), msBeforeNextChange);
    }
  }

  pulseComponent.registerElement('x-clock', ClockComponent, ['display-seconds', 'display-24h']);
})();

},{"pulsecomponent":2}],78:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-datepicker
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');
var pulseUtility = require('pulseUtility');

/**
 * Build a custom tag <x-datepicker> to display a date selector. This tag gets following attribute : 
 *  defaultdate : String (ISO)
 *  mindate : String
 *  maxdate : String
 *  disabled
 */
(function () {

  class DatePickerComponent extends pulseComponent.PulseParamInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      // Parameters - Default values
      self._dateInput = undefined;

      self.methods = {
        isValid: self.isValid,
        getISOValue: self.getISOValue,
        getValueAsIs: self.getValueAsIs
      };

      return self;
    }

    //get content () { return this._content; }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        case 'disabled': {
          if (this.isInitialized()) {
            if (this.element.hasAttribute('disabled')
              && (newVal == 'disabled' || newVal == 'true')) {
              this._dateInput[0].disabled = true;
            }
            else {
              this._dateInput[0].disabled = false;
            }
          }
        } break;
        case 'defaultdate':
          if (this.isInitialized()) {
            this._setDefaultDate();
          }
          break;
        case 'maxdate':
          if (this.isInitialized()) {
            this._fillMinMaxDate();
          }
          break;
        case 'mindate':
          if (this.isInitialized()) {
            this._fillMinMaxDate();
          }
          break;
        default:
          console.warn('Unhandled attribute : ' + attr);
          break;
      }
    }

    initialize () {
      //this.addClass('pulse-bigdisplay'); -> No

      // Create DOM - NO Loader
      let dateDiv = $('<div></div>').addClass('datepicker-datediv');
      $(this.element).append(dateDiv);

      // DOM - date
      this._dateInput = $('<input type="date"></input>')
        .addClass('datepicker-input-date');
      dateDiv.append(this._dateInput);

      // if disabled
      if (this.element.hasAttribute('disabled')
        && (this.element.getAttribute('disabled') == 'disabled'
          || this.element.getAttribute('disabled') == 'true')) {
        this._dateInput[0].disabled = true;
      }

      // Fill Date
      this._setDefaultDate();

      // Set min/max date
      this._fillMinMaxDate();

      this._dateInput.change(function () {
        // Restore default if empty
        if ('' == this._dateInput[0].value) {
          this._setDefaultDate();
        }

        // Tell parent if needed
        var event = new Event('change');
        this.element.dispatchEvent(event);

      }.bind(this));

      // NO - Listener and dispatcher

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      // DOM
      $(this.element).empty();

      super.clearInitialization();
    }

    reset () { // Optional implementation
      // Code here to clean the component when the component has been initialized for example after a parameter change
      this.removeError();
      // Empty this._content

      this.switchToNextContext();
    }

    validateParameters () {
      this.switchToNextContext();
    }

    _setDefaultDate () {
      // Set default
      let defaultDate = this.element.hasAttribute('defaultdate')
        ? new Date(this.element.getAttribute('defaultdate'))
        : new Date();

      if (undefined == defaultDate || 'Invalid Date' == defaultDate) {
        defaultDate = new Date();
      }
      let displayedDate = defaultDate.getFullYear() + '-'
        + pulseUtility.leadingZero(defaultDate.getMonth() + 1) + '-'
        + pulseUtility.leadingZero(defaultDate.getDate());
      
      this._dateInput[0].value = displayedDate;
      //this._dateInput[0].setAttribute('value', displayedDate); //'2018-07-22');
      //this._dateInput[0].defaultValue = displayedDate;
    }

    _fillMinMaxDate () {
      if (this.element.hasAttribute('mindate')) {
        // Use it as is because of cut-off mannagement
        let minDate = this.element.getAttribute('mindate');

        /* let minDateTime = new Date(this.element.getAttribute('mindate'));
        let minDate = minDateTime.getFullYear() + '-'
          + pulseUtility.leadingZero(minDateTime.getMonth() + 1) + '-'
          + pulseUtility.leadingZero(minDateTime.getDate());
        */
        this._dateInput[0].setAttribute('min', minDate);
      }
      if (this.element.hasAttribute('maxdate')) {
        let maxDate = this.element.getAttribute('maxdate');
        /*
        let maxDateTime = new Date(this.element.getAttribute('maxdate'));

        let maxDate = maxDateTime.getFullYear() + '-'
          + pulseUtility.leadingZero(maxDateTime.getMonth() + 1) + '-'
          + pulseUtility.leadingZero(maxDateTime.getDate());
        */
        this._dateInput[0].setAttribute('max', maxDate);
      }
    }

    isValid () {
      let crtDate = new Date(this._dateInput[0].value);
      if (this.element.hasAttribute('mindate')) {
        let minDate = new Date(this.element.getAttribute('mindate'));
        if (crtDate < minDate)
          return false;

      }
      if (this.element.hasAttribute('maxdate')) {
        let maxDate = new Date(this.element.getAttribute('maxdate'));
        if (crtDate > maxDate)
          return false;
      }

      return true;
    }

    getISOValue () {
      return pulseUtility.convertDayForWebService(this._dateInput[0].value);
    }

    getValueAsIs () { //'YYYY-MM-DD
      return this._dateInput[0].value;
    }

    // Callback events
  }

  pulseComponent.registerElement('x-datepicker', DatePickerComponent,
    ['defaultdate', 'maxdate', 'mindate', 'disabled']);
})();

},{"pulseUtility":"pulseUtility","pulsecomponent":2}],79:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-datetimepicker
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');
var pulseUtility = require('pulseUtility');

/**
 * Build a custom tag <x-datetimepicker> to display a datetime selector. This tag gets following attribute : 
 *  defaultdatetime : String (ISO)
 *  mindatetime : String
 *  maxdatetime : String
 *  showseconds : Boolean
 *  nullable : Boolean
 *  novaluetext : String
 *  disabled
 */
(function () {

  class DateTimePickerComponent extends pulseComponent.PulseParamInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      // Parameters - Default values
      self._dateInput = undefined;
      self._timeInput = undefined;
      self._inputNullable = undefined;
      self._inputNullableText = undefined;
      self._inputNullableDiv = undefined;

      self.methods = {
        isValid: self.isValid,
        getISOValue: self.getISOValue,
        getValueAsIs: self.getValueAsIs
      };

      return self;
    }

    //get content () { return this._content; }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        case 'disabled': {
          if (this.isInitialized()) {
            this._enabledisableInput();
          }
        } break;
        case 'defaultdatetime':
          if (this.isInitialized()) {
            this._setDefaultDate();
            this._setDefaultTime();
          }
          break;
        case 'maxdatetime':
          if (this.isInitialized()) {
            this._fillMinMaxDate();
            this._fillMinMaxTime();
          }
          break;
        case 'mindatetime':
          if (this.isInitialized()) {
            this._fillMinMaxDate();
            this._fillMinMaxTime();
          }
          break;
        case 'novaluetext':
          if (this._inputNullable) {
            this._inputNullableText.html(newVal); // OK
          }
          break;
        case 'showseconds':
          // Show seconds or not
          if (this.isInitialized()) {
            if (this.element.hasAttribute('showseconds')) {
              this._timeInput[0].setAttribute('step', 1); // 1 sec == show sec
            }
            else {
              this._timeInput[0].setAttribute('step', 60); // 1 min
            }
          }
          break;
        case 'nullable':
          if (this.isInitialized()) {
            if (newVal) {
              this._inputNullableDiv.show();
            }
            else {
              this._inputNullableDiv.hide();
            }
          }
          break;
        default:
          console.warn('Unhandled attribute : ' + attr);
          break;
      }
    }

    initialize () {
      this.addClass('pulse-bigdisplay');

      // Create DOM - NO Loader
      let datetimeDiv = $('<div></div>').addClass('datetimepicker-datetimediv');
      $(this.element).append(datetimeDiv);

      // DOM - date
      this._dateInput = $('<input type="date"></input>')
        .addClass('datetimepicker-input-date');
      this._timeInput = $('<input type="time"></input>')
        .addClass('datetimepicker-input-time');
      datetimeDiv.append(this._dateInput).append(this._timeInput);

      // With or without seconds
      if (this.element.hasAttribute('showseconds')) {
        this._timeInput[0].setAttribute('step', 1); // 1 sec == show sec
      }
      else {
        this._timeInput[0].setAttribute('step', 60); // 1 min
      }

      // DOM - NULLABLE
      this._inputNullable = $('<input type="checkbox" name="datetime-nullable"></input>')
        .addClass('datetimepicker-input-nullable');
      this._inputNullableText = $('<label for="datetime-nullable"></label>')
        .addClass('datetimepicker-input-nullable-label')
        .html((this.element.hasAttribute('novaluetext')) ? this.element.getAttribute('novaluetext') : 'No value');
      this._inputNullableDiv = $('<div"></div>').addClass('datetimepicker-input-nullable-div')
        .append(this._inputNullable).append(this._inputNullableText);
      datetimeDiv.append(this._inputNullableDiv);
      if ((this.element.hasAttribute('nullable')) == false) {
        this._inputNullableDiv.hide();
      }

      // Fill DateTime
      this._setDefaultDate();
      this._setDefaultTime();

      // Set min/max date
      this._fillMinMaxDate();
      this._fillMinMaxTime();

      // if disabled
      this._enabledisableInput();

      this._dateInput.change(function () {
        // Restore default if empty
        if ('' == this._dateInput[0].value) {
          this._setDefaultDate();
        }
        // Manage min/max time
        this._fillMinMaxTime();

        // Tell parent if needed
        var event = new Event('change');
        this.element.dispatchEvent(event);

      }.bind(this));

      this._timeInput.change(function () {
        // Restore default if empty
        if ('' == this._timeInput[0].value) {
          this._setDefaultTime();
        }
        // Tell parent if needed
        if (typeof this._onChangeCallback === 'function')
          this._onChangeCallback();

      }.bind(this));

      // If user click to set datetime to null
      this._inputNullable.change(function () {
        this._enabledisableInput();
        // Tell parent if needed
        if (typeof this._onChangeCallback === 'function')
          this._onChangeCallback();

      }.bind(this));

      // NO - Listener and dispatcher

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      // Parameters

      // DOM
      $(this.element).empty();

      this._inputNullable = undefined;
      this._inputNullableText = undefined;

      super.clearInitialization();
    }

    reset () { // Optional implementation
      // Code here to clean the component when the component has been initialized for example after a parameter change
      this.removeError();
      // Empty this._content

      this.switchToNextContext();
    }

    validateParameters () {
      this.switchToNextContext();
    }

    _enabledisableInput () {
      if (this.element.hasAttribute('disabled')
        && (this.element.getAttribute('disabled') == 'disabled'
          || this.element.getAttribute('disabled') == 'true')) {
        this._dateInput[0].disabled = true;
        this._timeInput[0].disabled = true;
        this._inputNullable[0].disabled = true;
      }
      else {
        if ($(this._inputNullable).is(':checked')) {
          this._dateInput[0].disabled = true;
          this._timeInput[0].disabled = true;
        }
        else {
          this._dateInput[0].disabled = false;
          this._timeInput[0].disabled = false;
        }
        this._inputNullable[0].disabled = false;
      }
    }

    _setDefaultDate () {
      // nullable ?
      if ((this.element.hasAttribute('nullable'))
        && !this.element.hasAttribute('defaultdatetime')) {
        // Set IS NULL
        $(this._inputNullable)[0].checked = true;
      }
      // same as check changed
      this._enabledisableInput();

      // Set default
      let defaultDatetime = this.element.hasAttribute('defaultdatetime')
        ? new Date(this.element.getAttribute('defaultdatetime'))
        : new Date();
      if ('Invalid Date' == defaultDatetime)
        defaultDatetime = new Date();

      let displayedDate = defaultDatetime.getFullYear() + '-'
        + pulseUtility.leadingZero(defaultDatetime.getMonth() + 1) + '-'
        + pulseUtility.leadingZero(defaultDatetime.getDate());

      this._dateInput[0].value = displayedDate;
      //this._dateInput[0].setAttribute('value', displayedDate); //'2018-07-22');
      //this._dateInput[0].defaultValue = displayedDate;
    }

    _setDefaultTime () {
      let defaultDatetime = this.element.hasAttribute('defaultdatetime')
        ? new Date(this.element.getAttribute('defaultdatetime'))
        : new Date();
      if ('Invalid Date' == defaultDatetime)
        defaultDatetime = new Date();

      defaultDatetime.setMilliseconds(0);
      // Remove seconds if not useful
      /*if (!this.element.hasAttribute('showseconds')) {
        defaultDatetime.setSeconds(0);
      }*/

      let displayedTime = defaultDatetime.toLocaleTimeString('en-GB',// And NOT : [],
        { hour: '2-digit', minute: '2-digit', second: '2-digit' });

      // Remove seconds if not useful - 
      if (!this.element.hasAttribute('showseconds')) {
        displayedTime = defaultDatetime.toLocaleTimeString('en-GB',// And NOT : [],
          { hour: '2-digit', minute: '2-digit' });
      }

      // '2-digit' displays only 1 digit for hour... sometimes
      if (1 == displayedTime.indexOf(':')) {
        displayedTime = '0' + displayedTime;
      }

      this._timeInput[0].value = displayedTime; // Fonctionne pour LAT, mais pas Paragon Metal
      //this._timeInput[0].setAttribute('value', displayedTime); //'08:00');
      //this._timeInput[0].defaultValue = displayedTime;
    }

    _fillMinMaxDate () {
      if (this.element.hasAttribute('mindatetime')) {
        let minDatetime = new Date(this.element.getAttribute('mindatetime'));

        let minDate = minDatetime.getFullYear() + '-'
          + pulseUtility.leadingZero(minDatetime.getMonth() + 1) + '-'
          + pulseUtility.leadingZero(minDatetime.getDate());

        this._dateInput[0].setAttribute('min', minDate);
      }
      if (this.element.hasAttribute('maxdatetime')) {
        let maxDatetime = new Date(this.element.getAttribute('maxdatetime'));

        let maxDate = maxDatetime.getFullYear() + '-'
          + pulseUtility.leadingZero(maxDatetime.getMonth() + 1) + '-'
          + pulseUtility.leadingZero(maxDatetime.getDate());

        this._dateInput[0].setAttribute('max', maxDate);
      }
    }

    _fillMinMaxTime () {
      if (this.element.hasAttribute('mindatetime')) {
        // Check if min date >= value
        let minDate = new Date(this._dateInput[0].getAttribute('min'));
        let crtDate = new Date(this._dateInput[0].value);
        if (minDate < crtDate) {
          this._timeInput[0].removeAttribute('min');
        }
        else {
          let minDatetime = new Date(this.element.getAttribute('mindatetime'));
          // Remove ms, not compatible
          minDatetime.setMilliseconds(0);

          // Find & format min time
          let minTime = minDatetime.toLocaleTimeString();
          // Remove seconds if not useful
          if (!this.element.hasAttribute('showseconds')) {
            minTime = minTime.substring(0, 5); // Hide sec, not compatible
          }
          this._timeInput[0].setAttribute('min', minTime);
        }
      }
      if (this.element.hasAttribute('maxdatetime')) {
        // Check if min date >= value
        let maxDate = new Date(this._dateInput[0].getAttribute('max'));
        let crtDate = new Date(this._dateInput[0].value);
        if (crtDate < maxDate) {
          this._timeInput[0].removeAttribute('max');
        }
        else {
          let maxDatetime = new Date(this.element.getAttribute('maxdatetime'));
          // Remove ms, not compatible
          maxDatetime.setMilliseconds(0);

          // Find & format max time
          let maxTime = maxDatetime.toLocaleTimeString();
          // Remove seconds if not useful
          if (!this.element.hasAttribute('showseconds')) {
            maxTime = maxTime.substring(0, 5); // Hide sec, not compatible
          }

          this._timeInput[0].setAttribute('max', maxTime);
        }
      }
    }

    isValid () {
      if ((this.element.hasAttribute('nullable')) && (this._inputNullable.is(':checked'))) {
        return true;
      }

      let crtDateTime = new Date(this._dateInput[0].value + ' ' + this._timeInput[0].value);
      if (this.element.hasAttribute('mindatetime')) {
        let minDatetime = new Date(this.element.getAttribute('mindatetime'));
        if (crtDateTime < minDatetime)
          return false;

      }
      if (this.element.hasAttribute('maxdatetime')) {
        let maxDatetime = new Date(this.element.getAttribute('maxdatetime'));
        if (crtDateTime > maxDatetime)
          return false;
      }

      return true;
    }

    getISOValue () {
      if ((this.element.hasAttribute('nullable')) && (this._inputNullable.is(':checked'))) {
        return null;
      }
      else {
        let crtDateTime = new Date(this._dateInput[0].value + ' ' + this._timeInput[0].value);
        return crtDateTime.toISOString();
      }
    }

    getValueAsIs () { //'YYYY-MM-DD HH:mm:ss 
      return (this._dateInput[0].value + ' ' + this._timeInput[0].value);
    }

    // Callback events
  }

  pulseComponent.registerElement('x-datetimepicker', DateTimePickerComponent,
    ['defaultdatetime', 'maxdatetime', 'mindatetime', 'novaluetext', 'showseconds', 'nullable', 'disabled']);
})();

},{"pulseUtility":"pulseUtility","pulsecomponent":2}],80:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-freetext
 * @requires module:pulseComponent
 * @requires module:pulseRange
 */
var pulseComponent = require('pulsecomponent');
var pulseUtility = require('pulseUtility');
var eventBus = require('eventBus');

(function () {

  class freetextComponent extends pulseComponent.PulseInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self.methods = {
        cleanDisplay: self.cleanDisplay // used by machineselection
      };

      // DOM - not here
      self._content = undefined;

      return self;
    }

    cleanDisplay () {
      $(this._content).empty();
    }

    //get content () { return this._content; } // Optional

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        case 'machine-id':
        case 'group': // Not fully defined yet
          if (this.isInitialized()) {
            // Check 'textchange-context'
            if (this.element.hasAttribute('textchange-context')) {
              let textchangecontext = pulseUtility.getTextChangeContext(this);
              eventBus.EventBus.removeEventListenerBySignal(this,
                'textChangeEvent');
              eventBus.EventBus.addEventListener(this,
                'textChangeEvent', textchangecontext,
                this.onTextChange.bind(this));
            }
            this.start(); // == re load
          } break;
        case 'textchange-context':
          if (this.isInitialized()) {
            let textchangecontext = pulseUtility.getTextChangeContext(this);
            eventBus.EventBus.removeEventListenerBySignal(this,
              'textChangeEvent');
            eventBus.EventBus.addEventListener(this,
              'textChangeEvent', textchangecontext,
              this.onTextChange.bind(this));

            eventBus.EventBus.dispatchToContext('askForTextChangeEvent', textchangecontext);
          }
          //this.start(); // To re-validate parameters
          break;
        default:
          break;
      }
    }

    initialize () {
      this.addClass('pulse-text'); // Mandatory for loader

      // Update here some internal parameters

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - Content
      this._content = $('<div></div>').addClass('freetext-content');
      $(this.element).append(this._content);

      // Create DOM - NO Loader / No message

      // listeners/dispatchers
      if (this.element.hasAttribute('textchange-context')) {
        let textchangecontext = pulseUtility.getTextChangeContext(this);
        eventBus.EventBus.addEventListener(this,
          'textChangeEvent', textchangecontext,
          this.onTextChange.bind(this));

        eventBus.EventBus.dispatchToContext('askForTextChangeEvent', textchangecontext);
      }

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      // Parameters
      // DOM
      $(this.element).empty();

      //this._messageSpan = undefined;
      this._content = undefined;

      super.clearInitialization();
    }

    /**
       * Event bus callback triggered when the text changes
       *
       * @param {Object} event
       */
    onTextChange (event) {
      if ('' == event.target.text) {
        $(this._content).empty();
      }
      else {
        $(this._content).empty();
        $(this._content).append($('<span></span>').html(event.target.text));
      }
    }
  }

  pulseComponent.registerElement('x-freetext', freetextComponent, ['machine-id', 'group', 'textchange-context']);
})();

},{"eventBus":"eventBus","pulseUtility":"pulseUtility","pulsecomponent":2}],81:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-grouparray
 * @requires module:pulseComponent
 * @requires module:pulseRange
 */
var pulseComponent = require('pulsecomponent');
var pulseUtility = require('pulseUtility');
var pulseLogin = require('pulseLogin');
var pulseConfig = require('pulseConfig');
var state = require('state');
var eventBus = require('eventBus');

/*
 ** Attributes :
 - templateid
 - machine
 - group
 - column (getConfigOrAttribute)
 - row (getConfigOrAttribute)
 - canUseRowsToSetHeight
 - allowpagerotation : bool true to start page rotation
 - rotation (getConfigOrAttribute) = rotation delay
 - refreshrate (ELSE rotation*nbPages ELSE 1hr)
 */
(function () {

  class GroupComponent extends pulseComponent.PulseParamAutoPathRefreshingComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      // Default
      self._lastUpdateDate = undefined;

      // DOM -> never in contructor
      self._content = undefined;
      self._dynamic = false;
      self._currentDisplayedPage = 1;
      self._nbPagesTotal = 1;
      self._showHideTimer = null;

      self._machineIdsArray = [];
      self.methods = {
        'getMachinesList': self.getMachinesList
      };

      return self;
    }

    // Overload to always refresh value
    get isVisible () {
      if (!this._connected) { // == is connected
        return false;
      }
      return true;
    }

    /** Get list of machines as string
     */
    getMachinesList () {
      return this._machineIdsArray.join();
    }

    get content () {
      return this._content;
    }

    _displayOrUpdateMachineList () {
      //$(this._content).empty(); No !

      if ((false == this._dynamic)
        && (this._machineIdsArray.length == 0)) {
        let noMachines = $('<div></div>').addClass('no-machines')
          .html('No machine in selection');// I18N ?
        $(this._content).append(noMachines);
      }
      else {
        $(this._content).find('.no-machines').remove();
      }

      // init possible rotation
      this._currentDisplayedPage = 1;

      // Get the box to clone element from DOM
      let boxtocloneid = this.element.getAttribute('templateid');
      if (pulseUtility.isNotDefined(boxtocloneid))
        boxtocloneid = 'boxtoclone';

      // Calculate width for multi-column (and height)
      let column_width = null;
      let row_height = null;
      let nbColumnToDisplay = this.getConfigOrAttribute('column');
      let nbRowToDisplay = this.getConfigOrAttribute('row', 2);
      let canUseRowsToSetHeight = this.getConfigOrAttribute('canUseRowsToSetHeight', 'false');
      let allowpagerotation = this.getConfigOrAttribute('allowpagerotation', 'false');

      if (!pulseUtility.isNotDefined(nbColumnToDisplay)) {
        column_width = 100.0 / nbColumnToDisplay + '%';
        if (allowpagerotation == 'true') { // No page rotation == auto-size
          if ((canUseRowsToSetHeight == 'true') || (canUseRowsToSetHeight == true)) {
            if (!pulseUtility.isNotDefined(nbRowToDisplay)) {
              row_height = 100.0 / nbRowToDisplay + '%';
            }
          }
        }
      }

      // Update the component with data returned by the web service
      function machineIdIsInList (machineId, List) {
        for (let i = 0; i < List.length; i++) {
          if (Number(machineId) == Number(List[i]))
            return true;
        }
        return false;
      }

      // REMOVE machine not in list anymore
      let self = this;
      $(this.element).find('.group-single').each(function () {
        let machineId = $(this).attr('machine-id'); // this = group-single
        if (false == machineIdIsInList(machineId, self._machineIdsArray)) { // self = x-grouparray
          $(this).remove(); // this = group-single
        }
        else {
          $(this).find('*').addClass('disableDeleteWhenDisconnect');
          /* DO NOT used this.element : not defined here ! this == '.group-single' */
        }
      });

      // Reset pages
      for (let i = 1; i <= this._nbPagesTotal; i++) {
        let page_class = 'li-page-' + i;
        $(this.element).find('.' + page_class).removeClass(page_class);
      }

      //$(this.element).find('*').addClass('disableDeleteWhenDisconnect');

      // Update list of machines - Add ROWS
      for (let i = 0; i < this._machineIdsArray.length; i++) {
        let singleid = this._machineIdsArray[i];
        let li;

        // Find if already exists
        let machineRow = $(this._content).find(".group-single[machine-id='" + singleid + "']");
        // NO remove ELSE display can become not smooth enough
        if (machineRow.length != 0) { // if exists
          // disableDeleteWhenDisconnect
          //machineRow[0].find ('*').addClass('disableDeleteWhenDisconnect');

          // Move at end of the list to order all
          //$(this._content).append(machineRow[0]);
          li = machineRow[0];
        }
        else {
          // Else Create NEW = copy the element and its child nodes
          let copy = pulseUtility.cloneWithNewMachineId(boxtocloneid, singleid);
          /*let copy = $('#' + boxtocloneid).clone(true);
          $(copy).removeAttr('id');
          $(copy).attr('machine-id', singleid);
          $(copy).find('*').attr('machine-id', singleid);*/

          // Append the cloned element to the list
          li = $('<li></li>').addClass('group-single');
          li.attr('machine-id', singleid);
          li.append(copy);
        }

        if (nbColumnToDisplay != 0 && nbRowToDisplay != 0) {
          // Add page class to ease page rotation
          let page_class = 'li-page-' + Math.ceil((i + 1) / (nbColumnToDisplay * nbRowToDisplay));
          $(li).addClass(page_class);

          // Set height / width
          if (null != column_width)
            $(li).css({
              'width': column_width
            });
          if (null != row_height)
            $(li).css({
              'height': row_height
            });
        }

        $(this._content).append(li);

        /*if (machineRow.length != 0) { // if exists
          // restoreDeleteWhenDisconnect 
          machineRow[0].find ('*').removeClass('disableDeleteWhenDisconnect');
        }*/
      }
      //$(this.element).find('.disableDeleteWhenDisconnect').removeClass('disableDeleteWhenDisconnect'); // too early

      // Warn fieldlegend : machine list has changed
      if ('false' == this.getConfigOrAttribute('donotwarngroupreload', 'false')) {
        eventBus.EventBus.dispatchToAll('groupIsReloaded', {
          newMachinesList: this._machineIdsArray.join(',')
        });
      }

      this._dealWithRotation();

      // TIMEOUT to be sure that all is cleared
      // (else the mecanism is not working as it should)
      let rotationDelay = Number(this.getConfigOrAttribute('rotation', '90'));
      setTimeout(this._removeDisable.bind(this),
        rotationDelay / 2 * 1000);

    } // _displayOrUpdateMachineList

    _removeDisable () {
      $(this.element).find('.disableDeleteWhenDisconnect')
        .removeClass('disableDeleteWhenDisconnect');
    }

    _dealWithRotation () {
      let nbColumnToDisplay = Number(this.getConfigOrAttribute('column', '3'));
      let nbRowToDisplay = Number(this.getConfigOrAttribute('row', '2'));

      this._currentDisplayedPage = 1; //re-init

      let allowpagerotation = this.getConfigOrAttribute('allowpagerotation', 'false');
      if (allowpagerotation == 'true' &&
        nbColumnToDisplay > 0 &&
        nbRowToDisplay > 0) {

        //this._currentDisplayedPage = 1; //re-init
        let nbMachine = this._machineIdsArray.length;
        this._nbPagesTotal = Math.ceil(nbMachine / (nbColumnToDisplay * nbRowToDisplay));
        if (this._nbPagesTotal == 0)
          this._nbPagesTotal = 1; // To avoid too log refresh rate
      }
      else { // NO rotation
        this._nbPagesTotal = 1;
      }
      this._rotationAndProgressDisplay();
    }

    _rotationAndProgressDisplay () {
      // Clear timer if exist ! To avoid many living timers
      if (this._showHideTimer) {
        clearTimeout(this._showHideTimer);
        this._showHideTimer = null;
      }

      let allowpagerotation = this.getConfigOrAttribute('allowpagerotation', 'false');
      if (allowpagerotation == 'true') {
        this._showHidePages();

        if (this._nbPagesTotal > 1) {
          let rotationDelay = Number(this.getConfigOrAttribute('rotation', '90'));

          // Display pagination and progress line
          $('.pulse-header-rotation-progress').html('<span style="width:0"></span>'); // Initialisation a 0px line
          $('.pulse-header-rotation-progress > span').animate({
            width: '100%'
          }, rotationDelay * 1000, 'linear'); // Increase its width until 100%
          $('#pulse-pagination').html((this._currentDisplayedPage) + ' / ' + this._nbPagesTotal);

          // Prepare next page rotation
          this._currentDisplayedPage++;
          if (this._currentDisplayedPage > this._nbPagesTotal) {
            this._currentDisplayedPage = 1;
          }
          this._showHideTimer = setTimeout(function () {
            this._rotationAndProgressDisplay();
          }.bind(this), rotationDelay * 1000);
        }
        else { // 1 page only
          // Reset rotation
          $('.pulse-header-rotation-progress').html('');
          $('#pulse-pagination').html('');
        }
      }
    }

    _showHidePages () {
      // Hide or show pages
      for (let index_page = 1; index_page <= this._nbPagesTotal; index_page++) {
        let page_class = '.li-page-' + index_page.toString();
        let li = $(this.element).find(page_class);
        if (index_page == this._currentDisplayedPage) {
          // $(li).css('display', 'inline-block'); //NO ! Because of ManagerWiew Page
          $(li).show();
          $(li).find('x-datetimegraduation').load(); // datetimegraduation can not manage 'width' when hidden
          // a best solution is to manage onShow Event.. once it exists
        }
        else {
          $(li).hide();
        }
      } // end for
    }

    /**
     * @override
     * 
     * @param {!string} context - Context
     * @return {!string} key
     */
    getStartKey (context) {
      switch (context) {
        case 'Loaded':
          return 'Standard';
        default:
          return super.getStartKey(context);
      }
    }

    /**
     * @override
     * 
     * @param {!string} context - Context
     * @param {!string} key - Key
     * @returns {!State} Created states
     */
    defineState (context, key) {
      switch (context) {
        case 'Loaded': // == No Refresh until click on button 'Start'
          return new state.StaticState(context, key, this);
        default:
          return super.defineState(context, key);
      }
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        case 'templateid':
        case 'group':
        case 'machine':
        case 'column':
        case 'row':
        case 'canUseRowsToSetHeight':
        case 'allowpagerotation':
          //case 'rotation':
          //case 'refreshrate':
          this.start();
          break;
        default:
          break;
      }
    }

    initialize () {
      this.addClass('pulse-bigdisplay');

      // Update here some internal parameters

      // listeners

      // Empty display if already filled
      $(this.element).empty();

      // Create DOM - Content
      this._content = $('<ol></ol>').addClass('group-main');
      $(this.element)
        .addClass('group')
        .append(this._content);
      // Create DOM - Loader
      let loader = $('<div></div>').addClass('pulse-loader').html('Loading...').css('display', 'none');
      let loaderDiv = $('<div></div>').addClass('pulse-loader-div').append(loader);
      $(this._content).append(loaderDiv);
      // Create DOM - message for error
      this._messageSpan = $('<span></span>')
        .addClass('pulse-message').html('');
      let messageDiv = $('<div></div>')
        .addClass('pulse-message-div')
        .append(this._messageSpan);
      $(this._content).append(messageDiv);

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      // STOP timer
      if (this._showHideTimer) {
        clearTimeout(this._showHideTimer);
        this._showHideTimer = null;
      }

      // Parameters
      // DOM
      $(this.element).empty();

      this.removeError();
      this._messageSpan = undefined;
      this._content = undefined;

      super.clearInitialization();
    }

    /*reset () { // Optional implementation - REMOVED else too many refreshs on LCTR and memory grows endlessly
      // Code here to clean the component when the component has been initialized for example after a parameter change
      /*this.removeError();
      // Empty this._content
      $(this.content).empty();

      // STOP timer
      if (this._showHideTimer) {
        clearTimeout(this._showHideTimer);
        this._showHideTimer = null;
      }

      this.switchToNextContext();
    }*/

    /**
     * Validate the (event) parameters
     */
    validateParameters () {
      let groups = this.getConfigOrAttribute('group');
      let machines = this.getConfigOrAttribute('machine');
      if ((groups == null || groups == '') &&
        (machines == null || machines == '')) {
        /*missingConfigs.push({
          selector: 'x-machineselection, #editmachines',
          message: 'Please select at least one machine before launching the page.'
        }); */
        console.warn('missing attribute groups or machines in x-grouparray');
        // Delayed display :
        //this.setError('Please select a machine'); // delayed error message
        // Immediat display :
        this.switchToKey('Error', () => this.displayError('Please select a machine'), () => this.removeError());
        return;
      }

      // Additional checks with attribute param

      this.switchToNextContext();
    }

    displayError (message) {
      $(this._messageSpan).html(message);

      $('.grouparray-dependant').addClass('grouparray-in-error'); //).hide();

      // STOP timer
      if (this._showHideTimer) {
        clearTimeout(this._showHideTimer);
        this._showHideTimer = null;
      }
    }

    removeError () {
      $(this._messageSpan).html('');

      $('.grouparray-dependant').removeClass('grouparray-in-error'); //.show();
    }

    get refreshRate () {
      // Return here the refresh rate in ms.
      if (this._nbPagesTotal >= 1) {
        let rotationDelay = Number(this.getConfigOrAttribute('rotation', '90'));
        return rotationDelay * this._nbPagesTotal * 1000;
      }
      else if (this.element.hasAttribute('refreshrate')) {
        return 1000 * this.element.getAttribute('refreshrate');
      }
      else {
        return 1000 * 60 * 60; // 1 hr
      }
    }

    /*
      Replace _runAjaxWhenIsVisible when NO url should be called
      return true if something is done, false if _runAjaxWhenIsVisible should be called
    */
    _runAlternateGetData () {
      let groups = this.getConfigOrAttribute('group'); //this.element.getAttribute('groups');
      if ((pulseUtility.isNotDefined(groups)) ||
        (groups == '')) {

        this.removeError();

        this._dynamic = false;
        // Manage list of machines NOW
        let machines = this.getConfigOrAttribute('machine');
        this._machineIdsArray = machines.split(',');
        this._displayOrUpdateMachineList();

        this._lastUpdateDate = Date();
        if (this.element.hasAttribute('textchange-context')) {
          // Send empty string
          eventBus.EventBus.dispatchToContext('textChangeEvent',
            this.element.getAttribute('textchange-context'),
            { text: '' });
        }

        // BECAUSE this._dynamic == false; // STOP calling Ajax request
        this.switchToContext('Loaded');
        // AND NOT this.switchToNextContext();
        return true;
      }
      // else Call WebService
      return false;
    }

    getShortUrl () {
      // Return the Web Service URL here without path
      let groups = this.getConfigOrAttribute('group');
      let url = 'MachinesFromGroups?GroupIds=' + groups;
      // Login is set in global service call
      return url;
    }

    refresh (data) {
      this._displayOrUpdateMachineList();
    }

    manageSuccess (data) {
      /* public List<int> MachineIds { get; set; }
      public int? SortKind { get; set; }
      public string SortKindTip { get; set; }*/
      this.removeError();

      this._machineIdsArray = data.MachineIds;
      this._dynamic = data.Dynamic;
      if (this.getConfigOrAttribute('forcestaticlist') == 'true' ||
        this.getConfigOrAttribute('forcestaticlist') == true) {
        this._dynamic = false;
      }
      this._lastUpdateDate = Date();
      if (this.element.hasAttribute('textchange-context')) {
        let textToSend = '';
        if (this._dynamic) {
          // Format Date and send
          let _lastMoment = pulseUtility.convertDateToMoment(this._lastUpdateDate);
          textToSend = _lastMoment.format('LTS')
        }
        eventBus.EventBus.dispatchToContext('textChangeEvent',
          this.element.getAttribute('textchange-context'),
          { text: textToSend });
      }

      if (false == this._dynamic) {
        this._displayOrUpdateMachineList();

        // STOP calling Ajax request
        this.switchToContext('Loaded');
      }
      else {
        // Success:
        super.manageSuccess(data);
        // or this.switchToNextContext(() => this.refresh(data));
      }
    }

    // Callback events

    /**
     * Event callback in case a config is updated: (re-)start the component
     *
     * @param {*} event
     */
    onConfigChange (event) {
      if ((event.target.config == 'machine')
        || (event.target.config == 'group')) {
        this.start();
      }
      if ((event.target.config == 'row')
        || (event.target.config == 'column')) {
        this._displayOrUpdateMachineList();
      }
      if (event.target.config == 'rotation') {
        this._currentDisplayedPage = 1;
        this._rotationAndProgressDisplay();
      }
    }

  }

  pulseComponent.registerElement('x-grouparray', GroupComponent, ['templateid', 'group', 'machine', 'column', 'row', 'canUseRowsToSetHeight', 'allowpagerotation']);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseLogin":"pulseLogin","pulseUtility":"pulseUtility","pulsecomponent":2,"state":3}],82:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-logindisplay
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');
var pulseConfig = require('pulseConfig');
var pulseLogin = require('pulseLogin');
var pulseSvg = require('pulseSvg');

/**
 * Build a custom tag <x-logindisplay> 
 */
(function () {

  class LoginDisplayComponent extends pulseComponent.PulseInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      // DOM: never in constructor, use the initialize method instead

      return self;
    }


    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
    }

    _fillDisplay () {
      if (pulseConfig.currentRoleOrAppContextIsDefined()) {
        $(this._span).html(pulseConfig.getCurrentUserDisplay());
        $(this._content).show();
      }
      else {
        // Disable the navigation panel, a role must be chosen first
        $(this._content).hide();
      }
    }

    _defineClick () {
      // Logout button
      $(this._content).click(function (e) {
        // Remove the current role
        pulseLogin.cleanLoginRole();

        pulseConfig.goToPageLogin();
      });
    }

    initialize () {
      this.addClass('pulse-text');

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - Loader -> Not needed here

      // Create DOM - Content
      this._span = $('<span></span>').addClass('logindisplay-span');
      this._icon = $('<span></span>').addClass('logindisplay-icon');
      this._content = $('<div></div>').addClass('logindisplay-content')
        .append(this._span).append(this._icon);
      $(this.element).append(this._content);

      this._fillDisplay();

      this._defineClick();

      // Create DOM - message for error -> Not needed here
      
      // Disable inline for reporting - the latest to hope displaying colors always
      if ( this.getConfigOrAttribute('donotuseinline', 'false') == 'false' ){
        // inline icon
        pulseSvg.inlineBackgroundSvg(this._icon);
      }

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    displayError (message) {
      // Code here to display the error message
    }

    removeError () {
      // Code here to remove the error message
    }

    /**
     * Event callback in case a config is updated: (re-)start the component
     *
     * @param {*} event
     */
    onConfigChange (event) {
      // Default = do nothing
      // Example :
      //if ( event.target.config == 'myConfig')
      //  this.start();
    }

  }

  pulseComponent.registerElement('x-logindisplay', LoginDisplayComponent, []);
})();

},{"pulseConfig":"pulseConfig","pulseLogin":"pulseLogin","pulseSvg":"pulseSvg","pulsecomponent":2}],83:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-machinedisplay
 * @requires module:pulseComponent
 * @requires module:pulseUtility
 */
var pulseUtility = require('pulseUtility');
var pulseComponent = require('pulsecomponent');
var eventBus = require('eventBus');

(function () {

  class MachineDisplayComponent extends pulseComponent.PulseParamAutoPathSingleRequestComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self._dataElement = undefined;

      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        case 'group': // Not group-id because of url compatibility
        case 'machine-id':
          this.start();
          break;
        case 'machine-context':
          if (this.isInitialized()) {
            eventBus.EventBus.removeEventListenerBySignal(this, 'machineIdChangeSignal');
            eventBus.EventBus.addEventListener(this,
              'machineIdChangeSignal',
              newVal,
              this.onMachineIdChange.bind(this));
          }
          break;
        default:
          break;
      }
    }

    initialize () {
      this.addClass('pulse-text');

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - Content
      this._dataElement = $('<span></span>').addClass('machinedisplay-data');
      $(this.element).append(this._dataElement);
      // Create DOM - Loader
      let loader = $('<div></div>').addClass('pulse-loader').html('Loading...').css('display', 'none');
      let loaderDiv = $('<div></div>').addClass('pulse-loader-div').append(loader);
      $(this.element).append(loaderDiv);

      // Create DOM - message for error
      this._messageSpan = $('<span></span>')
        .addClass('pulse-message').html('');
      let messageDiv = $('<div></div>')
        .addClass('pulse-message-div')
        .append(this._messageSpan);
      $(this.element).append(messageDiv);

      // Listener and dispatchers
      if (this.element.hasAttribute('machine-context')) {
        eventBus.EventBus.addEventListener(this,
          'machineIdChangeSignal',
          this.element.getAttribute('machine-context'),
          this.onMachineIdChange.bind(this));
      }

      this.switchToNextContext();
    }

    clearInitialization () {
      // Parameters
      // DOM
      $(this.element).empty();

      this._messageSpan = undefined;
      this._dataElement = undefined;

      super.clearInitialization();
    }

    reset () {
      this.removeError();
      $(this._dataElement).html('');

      this.switchToNextContext();
    }

    validateParameters () {
      if (!this.element.hasAttribute('machine-id')) {
        if (!this.element.hasAttribute('group')) {
          if ('' === this.getConfigOrAttribute('group')) {

            if (this.isVisible) { // To avoid displayed error in hidden duplicated part
              console.error('missing attribute machine or group in MachineDisplayComponent.element');
            }
            //this.setError('missing machine-id'); // delayed error message
            this.switchToKey('Error', () => this.displayError('invalid machine or group'), () => this.removeError());
            return;
          }
        }
      }
      this.switchToNextContext();
    }

    getShortUrl () {
      let url = 'Machine/Name';
      if (this.element.hasAttribute('machine-id')) {
        url += '?MachineId=' + this.element.getAttribute('machine-id');
      }
      else {
        let group = '';
        if (this.element.hasAttribute('group')) {
          group = this.element.getAttribute('group');
        }
        else {
          group = this.getConfigOrAttribute('group'); // config first - keep getAttribute before
        }
        url += '?GroupId=' + group;
      }
      return url;
    }

    refresh (data) {
      if (!pulseUtility.isNotDefined(data.Display))
        $(this._dataElement).html(data.Display);
      else
        $(this._dataElement).html(data.Name);

      // string Id
      // string TreeName
      // bool Group // Is it a group ?
    }

    displayError (message) {
      $(this._dataElement).html('');
      $(this._messageSpan).html(message);
    }

    removeError () {
      this.displayError('');
    }

    // Callback events
    onMachineIdChange (event) {
      this.element.setAttribute('machine-id', event.target.newMachineId);
    }
  }

  pulseComponent.registerElement('x-machinedisplay', MachineDisplayComponent, ['group', 'machine-id', 'machine-context']);
})();

},{"eventBus":"eventBus","pulseUtility":"pulseUtility","pulsecomponent":2}],84:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-machineselection
 * @requires module:pulseComponent
 * @requires module:pulseUtility
 * @requires module:pulsecustomdialog
 */
var pulseUtility = require('pulseUtility');
var pulseSvg = require('pulseSvg');
var pulseComponent = require('pulsecomponent');
var pulseCustomDialog = require('pulseCustomDialog');
var pulseLogin = require('pulseLogin');
var pulseConfig = require('pulseConfig');
var eventBus = require('eventBus');


require('x-grouparray/x-grouparray');
require('x-machinedisplay/x-machinedisplay');
require('x-freetext/x-freetext');


/**
 * Build a custom tag <x-machineselection>
 * CAN BE Used by report web app OR pulse web app
 * 
 * Attributes :
 * unique-machine : bool if single machine is mandatory (rarely used)
 * 
 * // Special for reports
 * in-report = present if report version is enabled
 * groupDisplayForm = MACHINESGROUPS
 * groupName. ex = 
 * pulse-machines (storage in localstorage using pulseConfig for pulsewebapp)
 * pulse-groups (storage in localstorage using pulseConfig for pulsewebapp)
 */

(function () {
  class MachineSelectionComponent extends pulseComponent.PulseParamAutoPathSingleRequestComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      // Linked to config :
      self._configMachines = 'machine';
      self._configGroups = 'group';

      // current SELECTION storage (in config or local, before click on OK)
      self._groupSelectionArray = [];
      self._machineSelectionArray = [];
      self._useMachineSelection = false; // machine OR group

      // == data. from web service
      self._groups = [];

      // Map [id] = group or machine display
      // How to use map : https://www.zendevs.xyz/les-nouveaux-objets-set-et-map-en-javascript-es6/
      self._groupDisplays = new Map(); // == from data in web services = [id] displayed
      // Attention, la key de la map est une string, donc has(integer) ne fonctionne pas

      // Page capabilities
      self._uniquemachine = false; // ignored, only for error message

      // DOM default
      self._dialogPage1 = undefined;
      self._categoryList = undefined; // == group selection

      self._dialogPage2 = undefined;
      // Machine selection
      self._machinesSearchDiv = undefined;
      self._machinesList = undefined;
      self._machinesListContainer = undefined;
      // Selection
      self._selectionTitle = undefined;
      self._selectionHeader = undefined;
      self._selectionList = undefined;
      self._selectionListContainer = undefined;
      // Preview
      self._useMachineButton = undefined;
      self._previewHeader = undefined;
      self._previewList = undefined;
      self._previewListContainer = undefined;

      // Error
      self._messageSpan = undefined;
      // DOM : Display in main page, right panel config
      self._editbutton = undefined;
      self._summary = undefined;

      self._dialogId = undefined;
      self.methods = {
        'changeMachineSelection': self.changeMachineSelection,
        //,'getMachineSelection': self.getMachineSelection,
        'fillExternalSummaryDisplay': self.fillExternalSummaryDisplay,
        'getMachinesArray': self.getMachinesArray,
        'getGroupsArray': self.getGroupsArray,
        'getMachinesString': self.getMachinesString,
        'getGroupsString': self.getGroupsString

      };

      if (!this.element.hasAttribute('in-report')) {
        // Clean old storage 2020-12 (can be removed later)
        pulseConfig.setGlobal(this._configMachines, '');
        pulseConfig.setGlobal(this._configGroups, '');
      }

      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        //case 'enableGroups': // Probably in config -> always
        case 'unique-machine': {
          this._uniquemachine = (this.element.hasAttribute('unique-machine')
            && this.element.getAttribute('unique-machine') == 'true');
          this.start();
        } break;
        default:
          break;
      }
    }

    validateParameters () {
      this.switchToNextContext();
    }

    clearInitialization () {
      $(this.element).empty();

      this._editbutton = undefined;
      this._summary = undefined;
      this._messageSpan = undefined;

      super.clearInitialization();
    }

    // return value input - maybe define this function in a common lib
    initParamForReport (divToFill, name, parameterkey, dataType, parameterType,
      defaultValue, value, required, hidden, helptext) {
      $(divToFill).addClass('parameter');
      $(divToFill).append("<input type='hidden' id='name' value='" + name + "' />");
      $(divToFill).append("<input type='hidden' id='parameterkey' value='" + parameterkey + "' />");
      $(divToFill).append("<input type='hidden' id='defaultvalue' value='" + defaultValue + "' />");
      let retInput = $("<input type='hidden' id='value' value='" + value + "' />");
      $(divToFill).append(retInput);
      $(divToFill).append("<input type='hidden' id='datatype' value='" + dataType + "' />");
      $(divToFill).append("<input type='hidden' id='parametertype' value='" + parameterType + "' />");
      $(divToFill).append("<input type='hidden' id='required' value='" + required + "' />");
      $(divToFill).append("<input type='hidden' id='helptext' value='" + helptext + "' />");
      $(divToFill).append("<input type='hidden' id='hidden' value='" + hidden + "' />");
      if (parameterkey == 'WEBAPP') {
        $(divToFill).append("<input type='hidden' id='widget' value='TEXTBOX' />");
        retInput = $("<input type='hidden' id='" + name + "_value' value= />");
        $(divToFill).append(retInput);
      }
      return retInput;
    }

    // Creation of the component (empty)
    initialize () {
      this.addClass('pulse-text'); // Mandatory for loader

      // Parameters
      this._uniquemachine =
        ('true' == this.getConfigOrAttribute('unique-machine', 'false'));

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - Content - By default, button enabled
      this._editbutton = $('<button title="Change machines" role="button" ></button>')
        .addClass('machineselection-editbutton')
        .html('edit')
        .click(
          function () {
            this.changeMachineSelection();
          }.bind(this)
        );
      this._summary = $('<div></div>')
        .addClass('machineselection-summary');
      $(this.element)
        .append(this._editbutton).append(this._summary);

      // Create DOM - Loader
      let loader = $('<div></div>').addClass('pulse-loader').html('Loading...').css('display', 'none');
      let loaderDiv = $('<div></div>').addClass('pulse-loader-div').append(loader);
      $(this.element).append(loaderDiv);
      // Create DOM - message for error
      this._messageSpan = $('<span></span>')
        .addClass('pulse-message').html('');
      let messageDiv = $('<div></div>')
        .addClass('pulse-message-div')
        .append(this._messageSpan);
      $(this.element).append(messageDiv);


      if (this.element.hasAttribute('in-report')) {
        // Hidden div for report
        let reportDiv = $('<div></div>').addClass('pulse-report-hidden');
        $(this.element).append(reportDiv);

        let groupReportDiv = $('<div></div>').addClass('pulse-report-hidden');
        this.initParamForReport(groupReportDiv,
          'PulseGroups', 'GROUPPOS', // name, parameterkey
          'STRING', // dataType = 'STRING'
          'SIMPLE', '', '', // , parameterType, defaultValue, value, 
          'false', 'false', ''); // required, hidden, helptext
        reportDiv.append(groupReportDiv);

        let machineReportDiv = $('<div></div>').addClass('pulse-report-hidden');
        this.initParamForReport(machineReportDiv,
          'PulseMachines', 'MACHINES', // not 'MACHINEPOS', because of history compatibility // name, parameterkey
          'STRING', // dataType = 'STRING'
          'SIMPLE', '', '', // parameterType, defaultValue, value, 
          'false', 'false', ''); // required, hidden, helptext
        reportDiv.append(machineReportDiv);
      }

      this.switchToNextContext();
    }

    displayError (message) {
      //this._disable(message);
    }

    // Overload to always refresh value
    get isVisible () {
      // Si page login = Hidden = Do not call web service
      if (pulseConfig.isLoginPage()) {
        return false;
      }
      // Normal behavior
      if (!this._connected) { // == is connected
        return false;
      }
      return true;
    }

    // Return the Web Service URL here
    getShortUrl () {
      let url = 'Machine/Groups?Zoom=true&MachineList=true';
      // Login is set in global service call
      return url;
    }

    // Update the component with data which is returned by the web service in case of success
    refresh (data) {
      // Store lists of available categories (=groups)
      this._groups = data.GroupCategories;
      this._machinesFromService = data.MachineList;
      this._storeDisplays();

      // Load current selections
      this._loadSelection();

      // Fill categories list (left panel)
      this._fillCategoryList();
      // Fill summary
      this._fillSummaryDisplay();

      // Fill list of machines 
      this._fillMachinesList();
    } // end refresh

    ///////////////////////////////////////////////////////////////
    // public FUNCTIONS FOR UPDATING THE SELECTION = open dialog //
    ///////////////////////////////////////////////////////////////
    changeMachineSelection () {
      this._createDialogIfNotDone();

      // open Dialog
      if (undefined == this._dialogId)
        return;
      pulseCustomDialog.open(this._dialogPage1, this._dialogId);
    }

    //////////////////////////////////////////
    // FUNCTIONS FOR DIALOG                 //
    //////////////////////////////////////////
    _createDialogIfNotDone () {
      if (undefined != this._dialogId)
        return;

      ////////// //////////
      // Page 1  //////////
      this._dialogPage1 = $('<div></div>').addClass('machineSelectionDialogPart1');
      let page1 = $('<div></div>').addClass('machineselection-page1');
      this._dialogPage1.append(page1);

      // FIRST div - for buttons CLEAR - Switch to machien selection
      let div_buttons = $('<div></div>').addClass('machineselection-buttons'); // = main
      // Button CLEAR
      this._clearFilters_button = $('<button></button>')
        .addClass('machineselection-button')
        .addClass('machineselection-clearfilters').html('CLEAR');
      this._clearFilters_button.click(function () {
        this._clearSelection();
      }.bind(this));
      div_buttons.append(this._clearFilters_button);
      // Button switch to group or machine selection ( = with empty selection)
      let div_switch_buttons = $('<div></div>').addClass('machineselection-switch-group-machines');
      // G
      this._switchToGroups_button = $('<button></button>')
        .addClass('machineselection-button')
        .addClass('machineselection-switch-to-groups').html('GROUPS');
      this._switchToGroups_button.click(function () {
        this._groupSelectionArray = [];
        this._machineSelectionArray = [];
        this._switchToGroupSelection();
        this._changeSelectionInCategoryList();
      }.bind(this));
      div_switch_buttons.append(this._switchToGroups_button);
      // M
      this._switchToMachines_button = $('<button></button>')
        .addClass('machineselection-button')
        .addClass('machineselection-switch-to-machines').html('MACHINES');
      this._switchToMachines_button.click(function () {
        this._groupSelectionArray = [];
        this._machineSelectionArray = [];
        this._switchToMachineSelection();
        this._changeSelectionInMachineList();
      }.bind(this));
      div_switch_buttons.append(this._switchToMachines_button);
      // append buttons
      div_buttons.append(div_switch_buttons);
      page1.append(div_buttons);
      // END - FIRST div - for buttons

      // GROUPS
      this._categoryList = $('<div></div>').addClass('machineselection-categorylist');
      page1.append(this._categoryList);

      // MACHINES
      this._machinesList = $('<div></div>').addClass('machineselection-machines-list');
      this._machinesListContainer = $('<div></div>')
        .addClass('machineselection-machines-list-container') // For scroll
        .append(this._machinesList);

      this._machinesSearchDiv = $('<div></div>').addClass('machineselection-machines-search-div');

      this._clearSearchButton = $('<button title="Clear search" role="button"></button>')
        .addClass('buttonDialog')
        .addClass('machineselection-clear-search');
      this._machinesSearchDiv.append(this._clearSearchButton);

      this._inputSearch = $('<input></input>').addClass('machineselection-machines-search-input')
        .attr('type', 'text').attr('placeholder', 'Search...');
      /*let spanSearch = $('<span></span>').addClass('machineselection-machines-search-span')
        .append(this._inputSearch);*/
      this._machinesSearchDiv.append(this._inputSearch);

      // FILL must be one AFTER dialog creation to display icons 
      //this._fillMachinesList();

      page1.append(this._machinesListContainer).append(this._machinesSearchDiv);

      // Use filter
      $(this._inputSearch).on('input', function () {
        this._showHideMachinesInList();
      }.bind(this));

      // Clear filter
      $(this._clearSearchButton).click(function () {
        $(this._inputSearch).val('');
        this._showHideMachinesInList();
      }.bind(this));


      ////////// //////////
      // Page 2  //////////
      this._dialogPage2 = $('<div></div>').addClass('machineSelectionDialogPart2');
      let page2 = $('<div></div>').addClass('machineselection-page2');
      this._dialogPage2.append(page2);

      // SELECTION
      this._selectionTitle = $('<span></span>').addClass('machineselection-title')
        .html('Selected');
      this._selectionHeader = $('<div></div>').addClass('machineselection-selection-header')
        .append(this._selectionTitle);
      this._selectionList = $('<div></div>').addClass('machineselection-selection-list');
      this._selectionListContainer = $('<div></div>')
        .addClass('machineselection-selection-list-container') // For scroll
        .append(this._selectionList);

      page2.append(this._selectionHeader).append(this._selectionListContainer);

      // PREVIEW
      let previewTitle = $('<span></span>').addClass('machineselection-preview-title')
        .html('preview machines');
      this._freeTextLastUpdate = pulseUtility.createjQueryElementWithAttribute('x-freetext', {
        'textchange-context': 'machineselection'
      });
      this._useMachineButton = $('<div></div>').addClass('machineselection-usemachines-button')
        .attr('title', 'Switch to machine selection');
      this._previewHeader = $('<div></div>').addClass('machineselection-preview-header')
        .append(previewTitle).append(this._freeTextLastUpdate).append(this._useMachineButton);
      this._previewList = $('<div></div>').addClass('machineselection-preview-list');
      this._previewListContainer = $('<div></div>')
        .addClass('machineselection-preview-list-container') // For scroll
        .append(this._previewList);

      page2.append(this._previewHeader).append(this._previewListContainer);

      pulseSvg.inlineBackgroundSvg(this._useMachineButton);

      this._useMachineButton.click(function () {
        let grouparrays = $(this._previewList).find('x-grouparray');
        if (grouparrays.length > 0) {
          let machinesList = grouparrays[0].getMachinesList();
          //this._groupSelectionArray = machinesList.split(','); // was [];
          this._machineSelectionArray = machinesList.split(',');
          // Change selection on left display
          this._changeSelectionInMachineList();
          //this._changeSelectionInCategoryList();

          //this._fillSelection(); == done in _switchToMachineSelection
        }
        this._switchToMachineSelection();
      }.bind(this));

      this._fillCategoryList();

      // Create a dialog
      this._dialogId = pulseCustomDialog.initialize(this._dialogPage1, {
        title: this._uniquemachine ? 'Select a machine' : 'Select machines',
        autoClose: false,
        onOpen: function () {
          // Reinitialize selection and view
          // If it can be changed anywhere else :
          // Load current selections
          this._loadSelection();

        }.bind(this),
        onOk: function () {
          if (this._useMachineSelection) {
            if (this._machineSelectionArray.length == 0) {
              pulseCustomDialog.openError(
                this._uniquemachine
                  ? 'Please select one machine.'
                  : 'Please select at least one machine.');
              return;
            }
          }
          else {
            if (this._groupSelectionArray.length == 0) {
              pulseCustomDialog.openError(
                'Please select at least one group');
              return;
            }
            // If 'no machine' in static groups
            if ($(this._previewList).find('.no-machines').length > 0) {
              // Find if static only
              let staticOnly = true;
              for (let iGroup = 0; iGroup < this._groupSelectionArray.length; iGroup++) {
                let groupId = this._groupSelectionArray[iGroup].toString();
                if (this._groupDisplays.has(groupId)) {
                  let displayClass = this._groupDisplays.get(groupId);
                  if (displayClass.dynamic)
                    staticOnly = false;
                }
              } // end for

              if (staticOnly) {
                pulseCustomDialog.openError(
                  'Please select groups including at least one machine.');
                return;
              }
            }
          }
          // Store the new displayed parameters in CONFIG
          this._storeSelection();

          // Update summary from selection
          this._fillSummaryDisplay();

          pulseCustomDialog.close(this._dialogPage1);
        }.bind(this),
        onCancel: function () {
          pulseCustomDialog.close(this._dialogPage1);
        }.bind(this),
        fullScreenOnSmartphone: true,
        fixedHeight: true,
        fullSize: true,
        helpName: 'machineselection'
      });
      pulseCustomDialog.addPage(this._dialogPage1, this._dialogPage2);
      // this._addDragAndDropEvents(); No. Not here !

      // FILL must be one AFTER dialog creation to display icons 
      this._fillMachinesList();

      // Default = useGroupSelection -> list of machines == hidden
      this._switchToGroupSelection();
    }


    ////////////////////////////////////////////////
    // Toggle between machine and group selection //
    ////////////////////////////////////////////////
    _switchToMachineSelection () {
      this._useMachineSelection = true;

      if (this._machinesListContainer == undefined)
        return;
      this._previewHeader.hide();
      this._previewListContainer.hide();

      this._selectionTitle.html('Selected machines');

      this._machinesSearchDiv.show();
      this._machinesListContainer.show();

      this._groupSelectionArray = []; // CLEAR GROUPS !
      // Update check boxes in left panel including _fillSelection, including Clear preview
      this._changeSelectionInCategoryList();
      this._categoryList.hide();

      this._changeSelectionInMachineList();

      this._switchToMachines_button.addClass('selected');
      this._switchToGroups_button.removeClass('selected');
      this._switchToMachines_button.prop('disabled', true);
      this._switchToGroups_button.prop('disabled', false);
    }

    _switchToGroupSelection () {
      this._useMachineSelection = false;

      if (this._machinesListContainer == undefined)
        return;
      this._previewHeader.show();
      this._previewListContainer.show();

      this._selectionTitle.html('Selected groups');

      this._machinesSearchDiv.hide();
      this._machinesListContainer.hide();

      this._categoryList.show();

      this._switchToMachines_button.removeClass('selected');
      this._switchToGroups_button.addClass('selected');
      this._switchToMachines_button.prop('disabled', false);
      this._switchToGroups_button.prop('disabled', true);
    }

    ////////////////
    // ADD EVENTS //
    ////////////////
    _addMoveUpDownEvents () {
      var machineselection = this;

      $(this._selectionList).find('.reorderDownButton').click(function () {
        $(this).parent('.machineselection-selection');
        let draggedOrder = parseInt($(this).parent().parent().css('order'));
        let newOrder = draggedOrder + 1;

        if (machineselection._useMachineSelection) {
          if (machineselection._machineSelectionArray.length > 0) {
            let movedItem = machineselection._machineSelectionArray[draggedOrder];
            machineselection._machineSelectionArray.splice(draggedOrder, 1);
            machineselection._machineSelectionArray.splice(newOrder, 0, movedItem);
          }
        }
        else {
          if (machineselection._groupSelectionArray.length > 0) {
            let movedItem = machineselection._groupSelectionArray[draggedOrder];
            machineselection._groupSelectionArray.splice(draggedOrder, 1);
            machineselection._groupSelectionArray.splice(newOrder, 0, movedItem);
          }
        }
        // Change order in display
        machineselection._fillSelection();
      });

      $(this._selectionList).find('.reorderUpButton').click(function () {
        let draggedOrder = parseInt($(this).parent().parent().css('order'));
        let newOrder = draggedOrder - 1;

        if (machineselection._useMachineSelection) {
          if (machineselection._machineSelectionArray.length > 0) {
            let movedItem = machineselection._machineSelectionArray[draggedOrder];
            machineselection._machineSelectionArray.splice(draggedOrder, 1);
            machineselection._machineSelectionArray.splice(newOrder, 0, movedItem);
          }
        }
        else {
          if (machineselection._groupSelectionArray.length > 0) {
            let movedItem = machineselection._groupSelectionArray[draggedOrder];
            machineselection._groupSelectionArray.splice(draggedOrder, 1);
            machineselection._groupSelectionArray.splice(newOrder, 0, movedItem);
          }
        }
        // Change order in display
        machineselection._fillSelection();
      });
    }

    _addDragAndDropEvents () {
      var machineselection = this;
      var dragSrcEl = null;

      function handleDragStart (e) {
        // Target (this) element is the source node.
        dragSrcEl = this;

        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.outerHTML);

        this.classList.add('dragElem');
      }
      function handleDragOver (e) {
        if (e.preventDefault) {
          e.preventDefault(); // Necessary. Allows us to drop.
        }
        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

        if (e.clientY - this.getBoundingClientRect().top < this.clientHeight / 2) {
          // Insert above
          this.classList.remove('dragOverBottom');
          this.classList.add('dragOverTop');
        }
        else {
          // Insert below
          this.classList.remove('dragOverTop');
          this.classList.add('dragOverBottom');
        }
        return false;
      }

      function handleDragEnter (e) {
        // this / e.target is the current hover target.
      }

      function handleDragLeave (e) {
        // this / e.target is previous target element.
        this.classList.remove('dragOverTop');
        this.classList.remove('dragOverBottom');
      }

      function handleDrop (e) {
        // this/e.target is current target element.

        if (e.stopPropagation) {
          e.stopPropagation(); // Stops some browsers from redirecting.
        }
        // Don't do anything if dropping the same column we're dragging.
        if (dragSrcEl != this) {
          let draggedOrder = parseInt($(dragSrcEl).css('order'));
          let dragToTopOrder = undefined;
          let dragToBottomOrder = undefined;

          let toTop = $(this).hasClass('dragOverTop');
          if (toTop) {
            dragToTopOrder = parseInt($(this).css('order'));
          }
          let toBottom = $(this).hasClass('dragOverBottom');
          if (toBottom) {
            dragToBottomOrder = parseInt($(this).css('order'));
            if (dragToTopOrder == undefined)
              dragToTopOrder = dragToBottomOrder + 1;
          }

          if (dragToTopOrder == undefined && dragToBottomOrder == undefined)
            return; // Never

          // Check top / bottom & unify
          let newOrder;
          if (dragToTopOrder < draggedOrder) { // Move to Top
            newOrder = dragToTopOrder;
          }
          else { // Move To Bottom
            newOrder = parseInt(dragToTopOrder) - 1; //dragToBottomOrder;
          }
          if (machineselection._useMachineSelection) {
            if (machineselection._machineSelectionArray.length > 0) {
              let movedItem = machineselection._machineSelectionArray[draggedOrder];
              machineselection._machineSelectionArray.splice(draggedOrder, 1);
              machineselection._machineSelectionArray.splice(newOrder, 0, movedItem);
            }
          }
          else {
            if (machineselection._groupSelectionArray.length > 0) {
              let movedItem = machineselection._groupSelectionArray[draggedOrder];
              machineselection._groupSelectionArray.splice(draggedOrder, 1);
              machineselection._groupSelectionArray.splice(newOrder, 0, movedItem);
            }
          }
          // Change order in display
          machineselection._fillSelection();
        }

        //this.classList.remove('dragOverTop');
        //this.classList.remove('dragOverBottom');
        return false;
      }

      function handleDragEnd (e) {
        // this/e.target is the source node.
        this.classList.remove('dragOverTop');
        this.classList.remove('dragOverBottom');
      }

      let addEvents = function (elem) {
        elem.setAttribute('draggable', true);

        elem.addEventListener('dragstart', handleDragStart, false);
        elem.addEventListener('dragenter', handleDragEnter, false)
        elem.addEventListener('dragover', handleDragOver, false);
        elem.addEventListener('dragleave', handleDragLeave, false);
        elem.addEventListener('drop', handleDrop, false);
        elem.addEventListener('dragend', handleDragEnd, false);
      }

      $(machineselection._selectionList).find('.machineselection-selection').each(function () {
        addEvents(this);
      });
    }

    ////////////////////////////////////////////////////////////////////////
    // FUNCTIONS FOR UPDATING Machine List AND show/hide machines in list //
    ////////////////////////////////////////////////////////////////////////

    // Fill machines list
    _fillMachinesList () {
      if (this._machinesList == undefined)
        return;
      $(this._machinesList).empty();

      for (let displayClass of this._groupDisplays) {
        if (displayClass[1].singlemachine) {
          let id = displayClass[0];
          let displayStr = displayClass[1].display;

          // Button to add 
          let addButton = $('<div></div>').addClass('machineselection-add-machine-button')
            .attr('machine-id', id);
          let removeButton = $('<div></div>').addClass('machineselection-remove-machine-button')
            .attr('machine-id', id);

          let machSpan = $('<span></span>').addClass('machines-display')
            .html(displayStr);
          let machDiv = $('<div></div>').addClass('machines-div')
            .attr('machine-id', id).append(machSpan)
            .append(addButton).append(removeButton);

          if (displayClass[1].sortpriority != undefined)
            machDiv.css('order', displayClass[1].sortpriority);

          $(this._machinesList).append(machDiv);

          pulseSvg.inlineBackgroundSvg(addButton);
          pulseSvg.inlineBackgroundSvg(removeButton);

          machDiv.click(function (machineselection) { // to avoid closure
            return function () {
              let machid = $(this).attr('machine-id');

              if ($(this).hasClass('selected')) {
                // REMOVE MACHINE
                if (machineselection._machineSelectionArray.includes(machid)) {
                  machineselection._machineSelectionArray =
                    machineselection._machineSelectionArray.filter(
                      function (value, index, arr) {
                        return value != machid;
                      }
                    );
                }
              }
              else {
                // ADD MACHINE
                if (!machineselection._machineSelectionArray.includes(machid))
                  machineselection._machineSelectionArray.push(machid);
              }

              // Always
              // Update left panel
              machineselection._changeSelectionInMachineList();
              // Update right panel
              machineselection._fillSelection();
            }
          }(this));
          //selected ?
          /*
                    addButton.click(function (machineselection) { // to avoid closure
                      return function () {
                        let machid = $(this).attr('machine-id');
                        // ADD MACHINE
                        if (!machineselection._machineSelectionArray.includes(machid))
                          machineselection._machineSelectionArray.push(machid);
          
                        // Update left panel
                        machineselection._changeSelectionInMachineList();
                        // Update right panel
                        machineselection._fillSelection();
                      }
                    }(this));
          
          
                    removeButton.click(function (machineselection) { // to avoid closure
                      return function () {
                        let machid = $(this).attr('machine-id');
                        // REMOVE MACHINE
                        if (machineselection._machineSelectionArray.includes(machid)) {
                          machineselection._machineSelectionArray =
                            machineselection._machineSelectionArray.filter(
                              function (value, index, arr) {
                                return value != machid;
                              }
                            );
                        }
          
                        // Update left panel
                        machineselection._changeSelectionInMachineList();
                        // Update right panel
                        machineselection._fillSelection();
                      }
                    }(this));
                    */
        }
      }
    }

    _showHideMachinesInList () {
      let searchString = $(this._inputSearch)[0].value;
      // Use as filter

      let machinesDiv = $(this._machinesList).find('.machines-div');
      for (let i = 0; i < machinesDiv.length; i++) {
        let machineDisplay = $(machinesDiv[i]).find('.machines-display').html();
        if (machineDisplay.toLowerCase().includes(searchString.toLowerCase())) {
          $(machinesDiv[i]).show();
        }
        else {
          $(machinesDiv[i]).hide();
        }
      }
    }

    _changeSelectionInMachineList () {
      if (this._dialogPage1 == undefined)
        return;

      // Remove all selections
      $(this._machinesList).find('.machines-div.selected').removeClass('selected');

      // Add current selection
      for (let i = 0; i < this._machineSelectionArray.length; i++) {
        let machid = this._machineSelectionArray[i];

        let machDivs = $(this._machinesList).find('.machines-div[machine-id=' + machid + ']');
        if (machDivs.length > 0) {// Always
          machDivs.addClass('selected');
        }
      }

      // Change preview in right panel
      //this._fillSelection();
    }

    ///////////////////////////////////////////////////////////////
    // FUNCTIONS FOR UPDATING THE SELECTION : storage -> display //
    ///////////////////////////////////////////////////////////////

    _fillSelection () {// -> to fill right panel (Warning ! Change _fillSummaryDisplay accordingly)
      if (this._selectionList == undefined)
        return;
      $(this._selectionList).empty();

      let arrayToDisplay;
      if (false == this._useMachineSelection)
        arrayToDisplay = this._groupSelectionArray;
      else
        arrayToDisplay = this._machineSelectionArray;

      if (arrayToDisplay.length == 0) {
        let noSel = $('<span></span>').addClass('no-selection')
          .html('No selection');
        this._selectionList.append(noSel);

        // Update preview = empty
        this._fillMachinePreview();
        return;
      }

      for (let iGroup = 0; iGroup < arrayToDisplay.length; iGroup++) {
        let groupId = arrayToDisplay[iGroup].toString();

        let selection = $('<div></div>').addClass('machineselection-selection')
          .attr('groupId', groupId);

        if (!this._groupDisplays.has(groupId))
          continue; // Probably error when loading
        let displayClass = this._groupDisplays.get(groupId);

        let highlight = $('<div></div>').addClass('reorderHighlight');
        let upButton = $('<div></div>').addClass('reorderUpButton');         // smartphone ?
        let downButton = $('<div></div>').addClass('reorderDownButton');     // smartphone ?
        let reorderButton = $('<div></div>').addClass('reorderButton');

        let row = $('<div></div>').addClass('selection-position');
        row.append(highlight).append(upButton).append(downButton)
          .append(reorderButton);

        let spanDisplay = $('<span></span>').addClass('selection-display')
          .html(displayClass.display);
        let removeButton = $('<div></div>').addClass('remove-button')
          .attr('groupId', groupId);
        row.append(spanDisplay).append(removeButton);
        if (displayClass.singlemachine) {
          let spanMachine = $('<span></span>').addClass('machineselection-machine-label')
            .html('M');
          row.append(spanMachine);
        }
        else {
          let spanGroup = $('<span></span>').addClass('machineselection-group-label')
            .html('G');
          row.append(spanGroup);
        }
        if (displayClass.dynamic) {
          let spanDynamic = $('<span></span>').addClass('machineselection-dynamic-label')
            .html('DYNAMIC');
          row.append(spanDynamic);
        }
        selection.append(row);

        $(selection).css('order', iGroup);
        this._selectionList.append(selection);

        pulseSvg.inlineBackgroundSvg(upButton);
        pulseSvg.inlineBackgroundSvg(downButton);
        //pulseSvg.inlineBackgroundSvg(reorderButton); // Is PNG... not possible for the moment

        pulseSvg.inlineBackgroundSvg(removeButton);

        removeButton.click(function (machineselection) { // to avoid closure
          return function () {
            let group = $(this).attr('groupid');

            if (false == machineselection._useMachineSelection) {
              // remove group
              machineselection._groupSelectionArray =
                machineselection._groupSelectionArray.filter(
                  function (value, index, arr) {
                    return value != group;
                  }
                );
              // Change selection on left display
              machineselection._changeSelectionInCategoryList();
              // Update (nb of selection) -> useful when unchecked !
              let selectedCategory = $(machineselection._dialogPage1).find('input[groupid=' + group + ']');
              let parentsCategories = $(selectedCategory).parents('.machineselection-category');
              for (let iCat = 0; iCat < parentsCategories.length; iCat++)
                machineselection._updateNumberOfSelections(parentsCategories[iCat]);
            }
            else {
              // remove machine
              machineselection._machineSelectionArray =
                machineselection._machineSelectionArray.filter(
                  function (value, index, arr) {
                    return value != group;
                  }
                );

              machineselection._changeSelectionInMachineList();
            }
            // Update right panel
            machineselection._fillSelection();
          }
        }(this));

      } // and for 
      this._addDragAndDropEvents();
      this._addMoveUpDownEvents();

      this._fillMachinePreview();
    }

    _fillMachinePreview () {
      this._previewList.empty();
      this._freeTextLastUpdate[0].cleanDisplay();

      if (false == this._useMachineSelection) {
        // and REAL fill
        if (this._groupSelectionArray.length > 0) {
          // .hidden-content
          let singleMachine = pulseUtility.createjQueryElementWithAttribute('x-machinedisplay', {});
          let toClone = $('<div id=machinetoclone></div').addClass('preview-machine-position').append(singleMachine);
          let hidden = $('<div></div').addClass('hidden-content').append(toClone);
          this._previewList.append(hidden);

          // group to display many times hidden content
          let grouparray = pulseUtility.createjQueryElementWithAttribute('x-grouparray', {
            'templateid': 'machinetoclone',
            'group': this._groupSelectionArray.join(),
            //'machine': this._machineSelectionArray.join(), -> No NEVER !
            'canUseRowsToSetHeight': false,
            'allowpagerotation': 'false',
            'rotation': 10, // sec = refreshrate
            'row': 999, // To avoid displaying only some rows
            'textchange-context': 'machineselection',
            'donotwarngroupreload': 'true' // to avoid unwanted field legend reload
          });
          this._previewList.append(grouparray);
        }
      }
    }

    ///////////////////////////////////////////////////////
    // FUNCTIONS FOR UPDATING THE SELECTION : attributes //
    ///////////////////////////////////////////////////////

    // Array -> CONFIG
    _storeSelection () {
      if (false == this._useMachineSelection) {
        // Update machines list
        let grouparrays = $(this._previewList).find('x-grouparray');
        if (grouparrays.length > 0) {
          let machinesList = grouparrays[0].getMachinesList();
          this._machineSelectionArray = machinesList.split(',');
        }
        else {
          this._machineSelectionArray = [];
        }
      }
      else { // Store machines only
        // Warning ! Do not copy using '=' !
        this._groupSelectionArray = [].concat(this._machineSelectionArray);
      }


      let joinedMachines = this._machineSelectionArray.join();
      let joinedGroups = this._groupSelectionArray.join();
      if (!this.element.hasAttribute('in-report')) {
        // store machines
        pulseConfig.set(this._configMachines, joinedMachines, true);

        // Store groups
        if ((joinedGroups == joinedMachines)
          || (this._groupSelectionArray == []))
          pulseConfig.set(this._configGroups, '', true);
        else
          pulseConfig.set(this._configGroups, joinedGroups, true);

        // Config changed : warn xtags
        eventBus.EventBus.dispatchToAll('configChangeEvent',
          { 'config': this._configMachines });
        // Do nearly the same as previous line
        eventBus.EventBus.dispatchToAll('configChangeEvent',
          { 'config': this._configGroups });

        // Check LEGEND display - should be somewhere else, but where ?
        $('.legend-content').resize();
      }
      else {
        // For report only. But can be always
        this.element.setAttribute('pulse-machines', joinedMachines);
        this.element.setAttribute('pulse-groups', joinedGroups);
      }
    }

    _getSelectedIndexes (attribute) {
      let arr = [];
      let arrString = this.getConfigOrAttribute(attribute, '')
      if (arrString != '') {
        arr = arrString.split(',');
      }
      return arr;
    }

    // CONFIG -> this._groupSelectionArray / this._machineSelectionArray
    _loadSelection () {
      let joinedMachines = "";
      let joinedGroups = "";

      if (!this.element.hasAttribute('in-report')) {
        // get CONFIG + store here - PWA version
        this._groupSelectionArray = this._getSelectedIndexes(this._configGroups, false);
        this._machineSelectionArray = this._getSelectedIndexes(this._configMachines, false);

        if (this._groupSelectionArray.length == 0) {
          // Warning ! Do not copy using = !
          this._groupSelectionArray = [].concat(this._machineSelectionArray);
        }

        joinedMachines = this._machineSelectionArray.join();
        joinedGroups = this._groupSelectionArray.join();
      }
      else {
        // load initial data - for report use
        if (this.element.hasAttribute('pulse-machines')) {
          joinedMachines = this.element.getAttribute('pulse-machines');
        }
        if (this.element.hasAttribute('pulse-groups')) {
          joinedGroups = this.element.getAttribute('pulse-groups');
        }

        if (joinedGroups == "") {
          // Copy
          joinedGroups = joinedMachines;
        }

        if (joinedGroups == "") {
          // Empty
          this._groupSelectionArray = [];
        }
        else {
          this._groupSelectionArray = joinedGroups.split(',');
        }

        if (joinedMachines == "") {
          // Empty
          this._machineSelectionArray = [];
        }
        else {
          this._machineSelectionArray = joinedMachines.split(',');
        }
      }

      if (joinedGroups == joinedMachines
        && this._machineSelectionArray.length != 0) {
        this._switchToMachineSelection();

        this._changeSelectionInMachineList();
        this._fillSelection();
      }
      else {
        this._switchToGroupSelection();

        // Update check boxes in left panel including _fillSelection
        this._changeSelectionInCategoryList(true);
        this._changeSelectionInMachineList();
      }
    }

    _clearSelection () {
      $(this._dialogPage1).find('input:checkbox').prop('checked', false);
      //this._switchToGroupSelection(); // Show / Hide -> Not anymore

      this._groupSelectionArray = [];
      this._machineSelectionArray = [];

      // Update check boxes in left panel including _fillSelection
      this._changeSelectionInCategoryList();
      // And selection in machine list
      this._changeSelectionInMachineList();
    }

    _updateNumberOfSelections (mainCategory) {
      let selections = $(mainCategory).find('input:checkbox');
      let nbSel = 0;
      for (let iSel = 0; iSel < selections.length; iSel++) {
        if (selections[iSel].checked) {
          nbSel++;
        }
      }
      if (nbSel == 0) {
        $(mainCategory).children('.machineselection-category-row').find('.number-of-selections').html('');
      }
      else {

        $(mainCategory).children('.machineselection-category-row').find('.number-of-selections').html('(' + nbSel + ')');
      }
    }

    ///////////////////////////////////////////////////////////////////////
    _storeDisplays () {
      this._groupDisplays.clear();

      let storeSubGroups = function (machineselection, groups) {
        for (let iGroup = 0; iGroup < groups.length; iGroup++) {
          if (groups[iGroup].Display != '') {
            machineselection._groupDisplays.set(groups[iGroup].Id.toString(), {
              display: groups[iGroup].Display,
              dynamic: (groups[iGroup].Dynamic == true), // unknown => false
              singlemachine: (groups[iGroup].SingleMachine == true),
              sortpriority: groups[iGroup].SortPriority
            });

            // Add Sub Sub groups
            if (!pulseUtility.isNotDefined(groups[iGroup].Zoom)) {
              storeSubGroups(machineselection, groups[iGroup].Zoom);
            }
          }
        }
      }

      for (let catIndex = 0; catIndex < this._groups.length; catIndex++) {
        let groups = this._groups[catIndex].Groups;
        if (groups != null) {
          storeSubGroups(this, groups);
        }
      }

      // Check in this._machinesFromService = data.MachineList if machines are missing
      for (let machIndex = 0; machIndex < this._machinesFromService.length; machIndex++) {
        let mach = this._machinesFromService[machIndex];
        if (!this._groupDisplays.has(mach.Id.toString())) {
          // if not exists - ADD (Should rarely happen)
          this._groupDisplays.set(mach.Id.toString(), {
            display: mach.Display,
            dynamic: false,
            singlemachine: true,
            sortpriority: mach.DisplayPriority
          });
          console.warn('x-machineselection : machine '
            + mach.Display + ' is not in groups');
        }
      }

    }

    ///////////////////////////////////////////////////////////////////////
    // FUNCTIONS FOR DISPLAYING groups and selection in left panel       //
    ///////////////////////////////////////////////////////////////////////
    _fillCategoryList () {
      if (this._categoryList == undefined)
        return; // Can happen before dialog creation

      let getSubGroups = function (machineselection, container, groups, isMain) {

        let nbSubGroups = 0;
        for (let i = 0; i < groups.length; i++) {
          if (groups[i].Display != '') {
            // Show / Hide Icon
            let svgShow = $('<div></div>').addClass('show-sub');
            let svgHide = $('<div></div>').addClass('hide-sub');
            let showHide = $('<div></div>').addClass('machineselection-subcategory-visibility')
              //.addClass('closed') not here
              .append(svgShow).append(svgHide);
            pulseSvg.inlineBackgroundSvg(svgShow);
            pulseSvg.inlineBackgroundSvg(svgHide);

            // display / (x) / check / showHide / isSub
            let spanDisplay = $('<span></span>').addClass('category-display')
              .html(groups[i].TreeName);
            let nbSel = $('<span></span>').addClass('number-of-selections').html('');
            let checkbox = $('<input type="checkbox" groupid="' + groups[i].Id + '" dynamic="' + groups[i].Dynamic + '">');
            let divRow = $('<div></div>').addClass('machineselection-category-row')
              .append(spanDisplay).append(nbSel);
            if (isMain)
              divRow.addClass('is-main');
            divRow.append(showHide).append(checkbox);
            if (groups[i].Dynamic) {
              let spanDynamic = $('<span></span>').addClass('machineselection-dynamic-label')
                .html('DYNAMIC');
              divRow.append(spanDynamic);
            }
            let category = $('<div></div>').addClass('machineselection-category').append(divRow);

            // Collapse / Expand machine categories
            showHide.click(function () {
              if ($(this).hasClass('closed')) {
                $(this).removeClass('closed');
                $(this).addClass('opened');

                $(this).closest('.machineselection-category')
                  .children('.machineselection-category-content').toggle();
              }
              else if ($(this).hasClass('opened')) {
                $(this).removeClass('opened');
                $(this).addClass('closed');

                $(this).closest('.machineselection-category')
                  .children('.machineselection-category-content').toggle();
              }
            });

            // click on checkbox
            checkbox.change(function (machineselection) { // to avoid closure
              return function () {
                machineselection._switchToGroupSelection();

                let group = $(this).attr('groupid');
                let isChecked = $(this).is(':checked');
                if (isChecked) {
                  // add group if not exists
                  if (!machineselection._groupSelectionArray.includes(group))
                    machineselection._groupSelectionArray.push(group);
                }
                else {
                  // remove group
                  machineselection._groupSelectionArray =
                    machineselection._groupSelectionArray.filter(
                      function (value, index, arr) {
                        return value != group;
                      }
                    );
                }
                // Find all displays for groupid
                let changedCategory = $(machineselection._dialogPage1).find('input[groupid=' + group + ']');
                // Check/Uncheck similar groups
                changedCategory.prop('checked', isChecked);

                for (let iChanged = 0; iChanged < changedCategory.length; iChanged++) {
                  // Update (nb of selection) here AND in parents
                  let parentsCat = $(changedCategory[iChanged]).parents('.machineselection-category');
                  for (let iParent = 0; iParent < parentsCat.length; iParent++)
                    machineselection._updateNumberOfSelections(parentsCat[iParent]);
                }
                //if (false == machineselection._useMachineSelection) ???
                // Update right panel
                machineselection._fillSelection();
              }
            }(machineselection));

            // Add Sub Sub groups in li
            if (!pulseUtility.isNotDefined(groups[i].Zoom)) {
              let hiddenSubGroup = $('<div></div>').addClass('machineselection-category-content');
              let nbSubSubGroups = getSubGroups(machineselection, hiddenSubGroup, groups[i].Zoom);
              if (nbSubSubGroups > 0) {
                category.append(hiddenSubGroup);
                //if (nbSubSubGroups >= 2) {
                category.addClass('expandable');
                hiddenSubGroup.css('display', 'none');
                showHide.addClass('closed');
                /*}
                else {
                  showHide.empty();
                  showHide.addClass('noChild');
                }*/
              }
            }
            else {
              showHide.empty();
              showHide.addClass('noChild');
            }

            container.append(category);
            nbSubGroups++;
          }
        }
        return nbSubGroups;
      }

      this._categoryList.empty();

      // Real list
      let fullListToScroll = $('<div></div>').addClass('machineselection-categorylist-full');
      let list = '';
      for (let catIndex = 0; catIndex < this._groups.length; catIndex++) {
        let groups = this._groups[catIndex].Groups;
        let omitCat = this._groups[catIndex].OmitGroupCategory;
        if (groups != null && groups.length > 0) {
          if (!pulseUtility.isNotDefined(omitCat) && omitCat == true
            && groups.length == 1 && groups[0].Display != '') {
            // Ignore ONE LEVEL
            let category = $('<div></div>').addClass('machineselection-category');
            let nbSubGroups = getSubGroups(this, category, groups, true);
            if (nbSubGroups == 1)
              fullListToScroll.append(category);

          }
          else {
            // Show / Hide Icon
            let svgShow = $('<div></div>').addClass('show-sub');
            let svgHide = $('<div></div>').addClass('hide-sub');
            let showHide = $('<div></div>').addClass('machineselection-subcategory-visibility')
              //.addClass('closed') Not here
              .append(svgShow).append(svgHide);
            pulseSvg.inlineBackgroundSvg(svgShow);
            pulseSvg.inlineBackgroundSvg(svgHide);

            //
            let span = $('<span></span>').addClass('category-display')
              .html(this._groups[catIndex].Display); // TreeName = not defined
            let nbSel = $('<span></span>').addClass('number-of-selections').html('');
            let divHeader = $('<div></div>')
              .addClass('machineselection-category-row').addClass('is-main')
              .append(span).append(nbSel).append(showHide);
            let category = $('<div></div>').addClass('machineselection-category')
              .append(divHeader);

            // Collapse / Expand machine categories
            showHide.click(function () {
              if ($(this).hasClass('closed')) {
                $(this).removeClass('closed');
                $(this).addClass('opened');

                $(this).closest('.machineselection-category')
                  .children('.machineselection-category-content').toggle();
              }
              else if ($(this).hasClass('opened')) {
                $(this).removeClass('opened');
                $(this).addClass('closed');

                $(this).closest('.machineselection-category')
                  .children('.machineselection-category-content').toggle();
              }
            });

            let hiddenSubGroup = $('<div style="display:none;"></div>').addClass('machineselection-category-content');
            let nbSubGroups = getSubGroups(this, hiddenSubGroup, groups);
            if (nbSubGroups > 0) {
              category.append(hiddenSubGroup);
              category.addClass('expandable');
              showHide.addClass('closed');
            }
            fullListToScroll.append(category);
          }
        }
      }
      fullListToScroll.append(list);

      this._categoryList.append(fullListToScroll);
    }

    // _groupSelectionArray -> fill check boxes accordingly
    // (andOpen == true) -> open selection
    _changeSelectionInCategoryList (andOpen) {
      if (this._dialogPage1 == undefined)
        return;

      // Remove all checks
      $(this._dialogPage1).find('input:checkbox').prop('checked', false);

      // Add current selection
      for (let i = 0; i < this._groupSelectionArray.length; i++) {
        let group = this._groupSelectionArray[i];
        let selectedCategory = $(this._dialogPage1).find('input[groupid=' + group + ']');
        if (selectedCategory.length == 0) {
          // Error in config ! -> 
          console.warn('Check group configuration for ' + group);
          // Remove group from selection
          this._groupSelectionArray.splice(i, 1);
          // Re-start this method
          this._changeSelectionInCategoryList(andOpen);
          // Exit
          return;
        }
        else {
          selectedCategory.prop('checked', true);

          for (let iCat = 0; iCat < selectedCategory.length; iCat++) {
            if (andOpen == true) {
              // Open parent
              $(selectedCategory[iCat]).parents('.machineselection-category')
                .find('.machineselection-category-content').show();
              // Change ShowHide icon
              $(selectedCategory[iCat]).parents('closed')
                .addClass('opened').removeClass('closed');
            }
          }
        }
      }
      // Update (nb of selection) for ALL categories
      let parentsCat = $(this._dialogPage1).find('.machineselection-category');
      for (let iParent = 0; iParent < parentsCat.length; iParent++)
        this._updateNumberOfSelections(parentsCat[iParent]);

      // Change preview in right panel
      this._fillSelection();
    }

    /////////////////////////////////////////////////////////
    // FUNCTIONS FOR DISPLAYING selected machines / groups //
    /////////////////////////////////////////////////////////
    // this._machines && this._categories -> this._summary
    _fillSummaryDisplay () { // Inpired from _fillSelection
      if (this._summary == undefined)
        return;
      $(this._summary).empty();

      let ul = $('<div></div>');

      let arrayToDisplay;
      if (false == this._useMachineSelection)
        arrayToDisplay = this._groupSelectionArray;
      else
        arrayToDisplay = this._machineSelectionArray;

      let oneGroupIsAdded = false;
      for (let iGroup = 0; iGroup < arrayToDisplay.length; iGroup++) {
        let groupId = arrayToDisplay[iGroup].toString();
        let display = 'No machine selection';
        if (this._groupDisplays.has(groupId)) {
          let displayClass = this._groupDisplays.get(groupId);
          display = displayClass.display;
        }
        let li = $('<div></div>');
        let span = $('<span></span>').html(display);
        li.append(span);
        ul.append(li);
        oneGroupIsAdded = true;
      }

      // Missing config or not :
      if (!oneGroupIsAdded) {
        //if (false == this._useMachineSelection) {
        /*this._summary.html(
          (this._uniquemachine)
            ? 'No machines selected'
            : 'All machines selected');*/
        this._summary.html('No machines selected');
        this._summary.addClass('missing-config');
        $(this.element).parent().addClass('missing-config');
        $(this.element).parent().parent().addClass('missing-config');
        /*}
        else {
          this._summary.html('No group selected');
          this._summary.addClass('missing-config');
          $(this.element).parent().addClass('missing-config');
          $(this.element).parent().parent().addClass('missing-config');
        }*/
      }
      else {
        this._summary.append(ul);

        this._summary.removeClass('missing-config');
        $(this.element).parent().removeClass('missing-config');
        $(this.element).parent().parent().removeClass('missing-config');
      }
    }

    /////////////////////////////////////////////////////////////
    // EXTERNAL FUNCTION TO DISPLAY selected machines / groups //
    /////////////////////////////////////////////////////////////
    // summary = existing div
    fillExternalSummaryDisplay (summary) { // Inpired from _fillSelection
      if (summary == undefined)
        return;
      $(summary).empty();

      let ul = $('<div></div>');

      let arrayToDisplay;
      if (false == this._useMachineSelection)
        arrayToDisplay = this._groupSelectionArray;
      else
        arrayToDisplay = this._machineSelectionArray;

      let oneGroupIsAdded = false;
      for (let iGroup = 0; iGroup < arrayToDisplay.length; iGroup++) {
        let groupId = arrayToDisplay[iGroup];
        let display = 'No machine selection';
        if (this._groupDisplays.has(groupId)) {
          let displayClass = this._groupDisplays.get(groupId);
          display = displayClass.display;
        }
        let li = $('<div></div>');
        let span = $('<span></span>').html(display);
        li.append(span);
        ul.append(li);
        oneGroupIsAdded = true;
      }

      // Missing config or not :
      if (!oneGroupIsAdded) {
        summary.html('No machines selected');
        summary.addClass('missing-config');
      }
      else {
        summary.append(ul);
        summary.removeClass('missing-config');
      }
    }

    /////////////////////////////////////////////////////////////
    // EXTERNAL FUNCTIONS TO get selected machines / groups    //
    /////////////////////////////////////////////////////////////
    getMachinesArray () {
      return ([].concat(this._machineSelectionArray));
    }
    getGroupsArray () {
      return ([].concat(this._groupSelectionArray));
    }
    getMachinesString () {
      return this._machineSelectionArray.join();
    }
    getGroupsString () {
      return this._groupSelectionArray.join();
    }

  }

  pulseComponent.registerElement('x-machineselection', MachineSelectionComponent, ['unique-machine']);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseCustomDialog":"pulseCustomDialog","pulseLogin":"pulseLogin","pulseSvg":"pulseSvg","pulseUtility":"pulseUtility","pulsecomponent":2,"x-freetext/x-freetext":80,"x-grouparray/x-grouparray":81,"x-machinedisplay/x-machinedisplay":83}],85:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-markdowntext
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');
//var pulseUtility = require('pulseUtility');

(function () {

  class markDownTextComponent extends pulseComponent.PulseInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self.methods = {
        setText: self.setText // used by reporting
      };

      // DOM - not here
      self._content = undefined;

      return self;
    }

    setText (textToDisplay) {
      $(this._content).empty();

      if (textToDisplay == null) {
        console.warn('Please FILL markdown text ! ');
      }
      else {
        // See use here : https://www.npmjs.com/package/markdown-it
        var MarkdownIt = require('markdown-it');
        let md = new MarkdownIt();
        let result = md.render(textToDisplay);

        $(this._content).append(
          $('<div></div>').addClass('markdowntext-maindiv').html(result)
        );
      }
    }

    //get content () { return this._content; } // Optional

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      /*
      switch (attr) {
        case 'machine-id':
          break;
        default:
          break;
      }
      */
    }

    initialize () {
      this.addClass('pulse-text'); // Mandatory for loader

      // Update here some internal parameters

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - Content
      this._content = $('<div></div>').addClass('markdowntext-content');
      $(this.element).append(this._content);

      // Create DOM - NO Loader / No message

      // listeners/dispatchers / None

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      // Parameters
      // DOM
      $(this.element).empty();

      //this._messageSpan = undefined;
      this._content = undefined;

      super.clearInitialization();
    }

  }

  pulseComponent.registerElement('x-markdowntext', markDownTextComponent, []);
})();

},{"markdown-it":7,"pulsecomponent":2}],86:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-message
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');
var pulseConfig = require('pulseConfig');
var pulseSvg = require('pulseSvg');
var pulseUtility = require('pulseUtility');
var eventBus = require('eventBus');

/**
 * Build a custom tag <x-message> to display a floating message.
 *  
 * Listen messages on context : 'MESSAGE'
 * 
 * var messageInfo = {
        'id': {String} to allow remove and avoid duplicated messages 
        'message': {String} 'Message to display',
        'time' : {Integer} time duration to display the message in second. (default permanent)
        'level': {String} 'error' | 'warning' | 'info'| 'default'
        'clickToClose' {Boolean} : Tells if user may click on panel to close it. Default = false
        'reloadURL' {String} : New URL to use to reload page. Default = no reload
        'internalLAT': internal message to explain where it comes from
      };
   eventBus.EventBus.dispatchToAll('showMessageSignal', messageInfo);
 */
(function () {

  class MessageComponent extends pulseComponent.PulseParamInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self._content = undefined;
      self._timerId = null;

      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
    }

    initialize () {
      // Listener and dispatchers
      eventBus.EventBus.addGlobalEventListener(this,
        'showMessageSignal',
        this.onShowMessage.bind(this));
      eventBus.EventBus.addGlobalEventListener(this,
        'clearMessageSignal',
        this.onClearMessage.bind(this));

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - Content
      this._content = $('<div></div>').addClass('xmessage');
      // Create DOM - No Loader
      // Create DOM - No message for error

      $(this.element).append(this._content);

      // Check if login error exists
      let err = pulseConfig.get('loginError', '');
      if (err != '') {
        // Display
        let messageInfo = {
          'id': 'LOGIN_ERROR',
          'message': err,
          'level': 'error',
          'clickToClose': true
        };
        // Same as : eventBus.EventBus.dispatchToAll('showMessageSignal', messageInfo);
        this.showMessage(messageInfo);

        // Remove tmp storage
        pulseConfig.setGlobal('loginError', '');
      }

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      // STOP timer
      if (this._timerId) {
        clearTimeout(this._timerId);
        this._timerId = null;
      }

      // Parameters
      // DOM
      $(this.element).empty();

      //this._messageSpan = undefined;
      this._content = undefined;

      super.clearInitialization();
    }


    validateParameters () {
      this.switchToNextContext();
    }

    /**
     * @function showMessage
     * 
     * @param data including show header for details
     *
     */
    showMessage (data) {
      console.log('component x-message showMessage function!');
      let notFound = true;
      if (!pulseUtility.isNotDefined(data.id)) {
        // if a message with same id already exists, get it and replace text
        let allAlerts = $('.message-alert');
        for (let i = 0; i < allAlerts.length; i++) {
          if (allAlerts[i].hasAttribute('message-id'))
            if (allAlerts[i].getAttribute('message-id') == data.id) {
              notFound = false;

              let elem = allAlerts[i];
              if (data.message) {
                //elem.html(data.message.replace(/\n/g, '<br />'));
                let msgspan = $(elem).find('.message-span');
                if (msgspan.length == 0) {
                  msgspan = $('<span></span>').addClass('message-span');
                  elem.append(msgspan);
                }
                $(msgspan).html(data.message.replace(/\n/g, '<br />'));
              }

              if (data.internalLAT) {
                let internspan = $(elem).find('.hidden-span');
                if (internspan.length == 0) {
                  internspan = $('<span></span>').addClass('hidden-span');
                  elem.append(internspan);
                }
                $(internspan).html(data.internalLAT.replace(/\n/g, '<br />'));
              }
            }
        }
      }
      if (notFound) {
        // if not found create new
        let elem = $('<div></div>').addClass('message-alert');

        // Unique Id
        let elemId = 'pulseMessage' + new Date().getTime() + '' + parseInt(Math.random() * 10000, 10);
        elem.id = elemId;
        $(this._content).append(elem);

        //let closeButton = $('<span></span>').addClass('message-closebtn');
        //onclick="this.parentElement.style.display='none';"
        //elem.append(closeButton);

        if (data.message) {
          let msgspan = $('<span></span>').addClass('message-span');
          msgspan.html(data.message.replace(/\n/g, '<br />'));
          elem.append(msgspan);
          //elem.html(data.message.replace(/\n/g, '<br />'));
        }
        
        if (data.internalLAT) {
          let internspan = $('<span></span>').addClass('hidden-span');
          internspan.html(data.internalLAT.replace(/\n/g, '<br />'));
          elem.append(internspan);
        }              

        let className = 'xmessage-default';
        switch (data.level) {
          case 'error':
            className = 'xmessage-error';
            break;
          case 'warning':
            className = 'xmessage-warning';
            break;
          case 'info':
            className = 'xmessage-info';
            break;
          default:
            className = 'xmessage-default';
        }

        elem.addClass(className);

        if (data.id)
          elem.attr('message-id', data.id);

        if (data.clickToClose == true) {
          elem.addClass('closable');
          elem.bind('click', function () {
            $(this).remove();
          });
          // Button "close"
          var closeBtn = $('<div></div>').addClass('message-close');
          elem.append(closeBtn);      
          pulseSvg.inlineBackgroundSvg(closeBtn);    
        }

        if (!pulseUtility.isNotDefined(data.reloadURL)) {
          let button = $('<a></a>').addClass('message-reload-button').html('Reload');
          button.attr('href', data.reloadURL);
          /*button.bind('click', function () {
            // RELOAD
            window.open(data.reloadURL, '_self');
          });*/
          elem.append(button);
        }

        if (data.time) {
          var alert = elem;
          this._timerId = setTimeout(function () {
            $(alert).remove();
          }, data.time * 1000);
        }
      }
    }

    clearMessage (id) {
      if (id) {
        // if a message with same id already exists, remove it
        let allAlerts = $('.message-alert');
        for (let i = 0; i < allAlerts.length; i++) {
          if (allAlerts[i].hasAttribute('message-id'))
            if (allAlerts[i].getAttribute('message-id') == id) {
              let elem = allAlerts[i];
              $(elem).remove();
            }
        }
      }
    }

    clearAllMessage () {
      $('message-alert').remove();
    }

    // Callback events
    onShowMessage (event) {
      let data = event.target;
      this.showMessage(data);
    }

    onClearMessage (event) {
      let data = event.target;
      this.clearMessage(data.id);
    }
  }

  pulseComponent.registerElement('x-message', MessageComponent);
})();

},{"eventBus":"eventBus","pulseConfig":"pulseConfig","pulseSvg":"pulseSvg","pulseUtility":"pulseUtility","pulsecomponent":2}],87:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-modificationmanager
 * @requires module:pulseComponent
 */

var pulseComponent = require('pulsecomponent');
var pulseUtility = require('pulseUtility');
var pulseService = require('pulseService');
var eventBus = require('eventBus');
var pulseRange = require('pulseRange');

/**
 * Build a custom tag <x-modificationmanager> with 0 attribute
 */
(function () {

  class SingleModification {
    /**
       * Constructor
       * @param {modif} == revisionid,range,kind,machineid,initModifications,pendingModifications}
       * @param {modificationManager} == parent
       */
    constructor(modif, modificationManager, path) {
      this.modif = modif;
      this._modificationManager = modificationManager;
      this._path = path;

      this._possibleNbFails = 150; // == 150 seconds before ignoring in case of error
      this._refreshRate = 1000; // 1 second

      // log : NEW modification
      console.log('modificationmanager : NEW (mach=' + modif.machineid
        + ',kind=' + modif.kind + ',rev=' + modif.revisionid);
      //+ ',range=' + this.modif.ranges[0]; -> NO becausse range.toString is badly defined

      // Tell all xtags
      eventBus.EventBus.dispatchToAll('modificationEvent', modif);

      this.methods = { // To prepare export
        addModification: this.addModification,
        getModifications: this.getModifications
      }; 

      this._askWebService();
    }

    /**
   * Ask web service for modifications
   * @param {!Object} modif 
   */
    _askWebService () {
      let url = this._path
        + 'GetPendingModificationsFromRevision?Id=' + this.modif.revisionid;

      let thisModif = this;
      pulseService.runAjaxSimple(url,
        this._getPendingModificationSuccess.bind(thisModif),
        this._getPendingModificationError.bind(thisModif),
        this._getPendingModificationFail.bind(thisModif));
    }

    /**
     * Web service - success
     * @param {!Object} data 
     */
    _getPendingModificationSuccess (data) {
      if (this.modif.initModifications == undefined) {
        this.modif.initModifications = data.Number;
      }
      if (this.modif.pendingModifications != data.Number) {
        // log : modification change
        console.log('modificationmanager : CHANGE pending='
          + this.modif.pendingModifications + '->' + data.Number
          + ' /total=' + this.modif.initModifications
          + ' (mach=' + this.modif.machineid
          + ', kind=' + this.modif.kind + ', rev=' + this.modif.revisionid);
        //+ ',range=' + this.modif.ranges[0]; -> NO becausse range.toString is badly defined
        this.modif.pendingModifications = data.Number;
      }

      //  ALWAYS Send Message
      eventBus.EventBus.dispatchToAll('modificationEvent', this.modif);

      // Re-start timer
      if (data.Number == 0) { // No more modif
        // Kill me
        this._modificationManager.removeModification(this.modif.revisionid);
        // log : end of modification
        console.log('modificationmanager : END (mach=' + this.modif.machineid
          + ',kind=' + this.modif.kind + ',rev=' + this.modif.revisionid);
        //+ ',range=' + this.modif.ranges[0]; -> NO becausse range.toString is badly defined
      }
      else { // Continue modif
        setTimeout(function () {
          this._askWebService();
        }.bind(this), this._refreshRate);
      }
    }

    
    _getPendingModificationError (data) {
      if (this._possibleNbFails <= 0) {
        // Kill me
        this._modificationManager.removeModification(this.modif.revisionid);
      }
      else {
        this._possibleNbFails--;
        // Restart timer
        setTimeout(function () {
          this._askWebService();
        }.bind(this), this._refreshRate);
      }
    }
    /**
     * Web service - error OR fail
     * @param {!String} url 
     * @param {!Boolean} isTimeout, 
     * @param {!Object} xhrStatus 
     */
    _getPendingModificationFail (url, isTimeout, xhrStatus) {
      if (this._possibleNbFails <= 0) {
        // Kill me
        this._modificationManager.removeModification(this.modif.revisionid);
      }
      else {
        this._possibleNbFails--;
        // Restart timer
        setTimeout(function () {
          this._askWebService();
        }.bind(this), this._refreshRate);
      }
    }

  } // end class SingleModification


  class ModificationManagerComponent extends pulseComponent.PulseParamInitializedComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self.methods = {
        addModification: self.addModification,
        getModifications: self.getModifications
      };

      // Map [revisionid] = SingleModification
      // How to use map : https://www.zendevs.xyz/les-nouveaux-objets-set-et-map-en-javascript-es6/
      self._mapOfModifications = new Map();

      return self;
    }

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
    }

    initialize () {
      // Attributes
      // Listener and dispatchers

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create NO DOM -> revisionprogress... will display if needed

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    clearInitialization () {
      super.clearInitialization();
    }

    validateParameters () {
      // Additional checks with attribute param

      this.switchToNextContext();
    }

    displayError (message) {
      // Nothing
    }

    removeError () {
      // Nothing
    }

    /*
     * Add a modification to check - private method
     *
     * @param {!integer} revisionid - Id of the revision (access to modifications in database)
     * @param {!integer} kind - can be 'reason', 'MST', 'serialnumber'...
     * @param {!integer} machineid
     * @param {![pulseRange:Range]} arrayofpulseRange - Range of the modification
     * @returns {!Boolean} true = success
     */
    addModification (revisionid, kind, machineid, arrayOfPulseRanges) {
      let modif = {
        revisionid: revisionid,
        machineid: machineid,
        kind: kind,
        ranges: arrayOfPulseRanges,
        initModifications: undefined, // pending modifications the first time
        pendingModifications: undefined
      };
      let singleModif = new SingleModification(modif, this, this.getConfigOrAttribute('path', ''));
      this._mapOfModifications.set(revisionid, singleModif);
      return true;
    }

    /**
     * Remove a modification 
     *
     * @param {!integer} revisionid - Id of the revision (access to modifications in database)
     * @returns {!Boolean} true = success
     */
    removeModification (revisionid) {
      this._mapOfModifications.delete(revisionid);
      return true;
    }

    /**
     * Get existing modifications
     *
     * @param {!integer} kind - can be 'reason', 'mos', 'serialnumber'...
     * @param {!integer} machineid
     * @param {!pulseRange:Range} range - optional range (modif.ranges[i] should be included in this range)
     * @returns {!Object} list of modifications
     */
    getModifications (kind, machineid, range) {
      let returnedMap = new Map();

      for (let modif of this._mapOfModifications) {
        if ((modif[1].modif.kind == kind)
          && (modif[1].modif.machineid == machineid)) {
          let addModif = false;
          for (let i = 0; i < modif[1].modif.ranges.length; i++) {
            if ((pulseUtility.isNotDefined(range)
              || !(pulseRange.intersects(modif[1].modif.ranges[i], range)).isEmpty())) {
              addModif = true;
            }
          }
          if (addModif)
            returnedMap.set(modif[0], modif[1].modif);
        }
      }
      return returnedMap;
    }

    // Callback events
    /**
     * Event callback in case a config is updated: (re-)start the component
     *
     * @param {*} event
     */
    onConfigChange (event) {
      // Default = do nothing
    }
  }

  pulseComponent.registerElement('x-modificationmanager', ModificationManagerComponent);
})();

},{"eventBus":"eventBus","pulseRange":"pulseRange","pulseService":"pulseService","pulseUtility":"pulseUtility","pulsecomponent":2}],88:[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @module x-reportdatetime
 * @requires module:pulseComponent
 * 
 */
var pulseComponent = require('pulsecomponent');
var pulseRange = require('pulseRange');
var pulseUtility = require('pulseUtility');

require('x-datepicker/x-datepicker');
require('x-datetimepicker/x-datetimepicker');

/**
 * Build a custom tag <x-reportdatetime>
 * Used by report web app
 * 
 * Parameters :
 * groupDisplayForm = DATERANGE
 * groupName. ex = 
 * dataType = DATE or DATETIME
 * webapp. Ex : Last_1_day IN
 * webappname IN
 * mindate IN
 * mindatename IN
 * maxdate IN
 * maxdatename IN
 */

(function () {

  class ReportDateTimeComponent extends pulseComponent.PulseParamAutoPathSingleRequestComponent {
    /**
     * Constructor
     * 
     * @param  {...any} args 
     */
    constructor(...args) {
      const self = super(...args);

      self._content = undefined;

      self.methods = {
        isValid: self.isValid,
        getValueAsIs: self.getValueAsIs,
        getMinValueAsIs: self.getMinValueAsIs,
        getMaxValueAsIs: self.getMaxValueAsIs,
        getWebAppRange: self.getWebAppRange
        //,getWebAppRangeFromMinMax: self.getWebAppRangeFromMinMax // static
      };

      // DOM: never in constructor, use the initialize method instead

      return self;
    }

    //get content () { return this._content; } // Optional

    attributeChangedWhenConnectedOnce (attr, oldVal, newVal) {
      super.attributeChangedWhenConnectedOnce(attr, oldVal, newVal);
      switch (attr) {
        case 'groupDisplayForm':
          this.start(); // restart the component. == validate + send ajax request
          break;
        case 'groupName':
          this.start(); // restart the component. == validate + send ajax request
          break;
        case 'dataType':
          this.reset(); // Call initialize again
          break;
        case 'webapp':
          this._setSelectionFromWebApp(newVal);
          // show / hide is done by change selection - not needed here
          //this.start(); // validate + send ajax request when needed - done by change selection
          break;
        case 'mindate': {
          let isDateTime = (this.element.getAttribute('dataType') == 'DATETIME');
          $(this._minDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate', newVal);
        } break;
        case 'maxdate': {
          let isDateTime = (this.element.getAttribute('dataType') == 'DATETIME');
          $(this._maxDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate', newVal);
        } break;
        default:
          break;
      }
    }

    _setSelectionFromWebApp (val) {
      // show / hide is done by change selection - not needed here

      let isDateTime = (this.element.getAttribute('dataType') == 'DATETIME');
      let parts = val.split("_");
      this._selectTypeCB(parts[0]);
      switch (parts[0]) {
        case ('since'): {
          if (parts.length >= 2) {
            $(this._minDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate', parts[1]);
          }
        } break;
        case ('past'): {
          if (parts.length >= 3) {
            $(this._pastNb)[0].value = parts[1];
            this._selectPastCB(parts[2]);
          }
        } break;
        case ('current'): {
          if (parts.length >= 3) {
            this._selectCurrentCB(parts[1] + '_' + parts[2]);
          }
        } break;
        case ('explicit'): {
          if (parts.length >= 3) {
            $(this._minDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate', parts[1]);
            $(this._maxDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate', parts[2]);
          }
          else { // Exemple : in report made from another report
            if (this.element.hasAttribute('mindate')) {
              $(this._minDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate',
                this.element.getAttribute('mindate'));
            }
            if (this.element.hasAttribute('maxdate')) {
              $(this._maxDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate',
                this.element.getAttribute('maxdate'));
            }
          }
        } break;
        // Never default ? NO !!! Can happen when min and max are given + change parameters
        default: {
          if (this.element.hasAttribute('mindate')) {
            $(this._minDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate',
              this.element.getAttribute('mindate'));
          }
          if (this.element.hasAttribute('maxdate')) {
            $(this._maxDTP).attr(isDateTime ? 'defaultdatetime' : 'defaultdate',
              this.element.getAttribute('maxdate'));
          }
        }
      }
    }

    _setChangeSel () {
      this._typeSelectCB[0].addEventListener('change', this.onChangeSel.bind(this), false);
      this._pastNb[0].addEventListener('change', this.onChangeSel.bind(this), false);
      this._pastUnitCB[0].addEventListener('change', this.onChangeSel.bind(this), false);
      this._currentCB[0].addEventListener('change', this.onChangeSel.bind(this), false);
    }

    _selectItemByValue (elmnt, value) {
      for (let i = 0; i < elmnt.options.length; i++) {
        if (elmnt.options[i].value === value) {
          elmnt.selectedIndex = i;
          break;
        }
      }
    }
    _selectTypeCB (value) {
      this._selectItemByValue(this._typeSelectCB[0], value);
    }
    _selectPastCB (value) {
      this._selectItemByValue(this._pastUnitCB[0], value);
    }
    _selectCurrentCB (value) {
      this._selectItemByValue(this._currentCB[0], value);
    }


    _fillTypeCB () {
      // Combobox
      $(this._typeSelectCB).empty();

      let optionCB = $('<option value=explicit></option>').html("From... to...");
      this._typeSelectCB.append(optionCB);
      optionCB = $('<option value=since></option>').html("Since...");
      this._typeSelectCB.append(optionCB);
      optionCB = $('<option value=past></option>').html("Past");
      this._typeSelectCB.append(optionCB);
      optionCB = $('<option value=current></option>').html("Current");
      this._typeSelectCB.append(optionCB);
    }

    _fillPastCB () {
      // Combobox
      $(this._pastUnitCB).empty();

      let optionCB = $('<option value=hour></option>').html("hour(s)")
        .addClass('hide-for-full-day');
      this._pastUnitCB.append(optionCB);
      optionCB = $('<option value=shift></option>').html("shift(s)")
        .addClass('hide-for-full-day');
      this._pastUnitCB.append(optionCB);
      optionCB = $('<option value=day selected></option>').html("day(s)");
      this._pastUnitCB.append(optionCB);
      optionCB = $('<option value=week></option>').html("week(s)");
      this._pastUnitCB.append(optionCB);
      optionCB = $('<option value=month></option>').html("month(s)");
      this._pastUnitCB.append(optionCB);
      optionCB = $('<option value=quarter></option>').html("quarter(s)");
      this._pastUnitCB.append(optionCB);
      optionCB = $('<option value=year></option>').html("year(s)");
      this._pastUnitCB.append(optionCB);

      // Remove hours and shifts if dates are required -> done using CSS !
      /*if (isDate) {
        $("#WebAppParamsDateTime_unit option[value='hour']").remove();
        $("#WebAppParamsDateTime_duration option[value='1_hour']").remove();
        $("#WebAppParamsDateTime_unit option[value='shift']").remove();
        $("#WebAppParamsDateTime_duration option[value='1_shift']").remove();
      }*/
    }

    _fillCurrentCB () {
      // Combobox
      $(this._currentCB).empty();

      let optionCB = $('<option value=1_hour></option>').html("1 hour")
        .addClass('hide-for-full-day');
      this._currentCB.append(optionCB);
      optionCB = $('<option value=1_shift></option>').html("1 shift")
        .addClass('hide-for-full-day');
      this._currentCB.append(optionCB);
      optionCB = $('<option value=1_day selected></option>').html("today");
      this._currentCB.append(optionCB);
      optionCB = $('<option value=2_day></option>').html("today + yesterday");
      this._currentCB.append(optionCB);
      optionCB = $('<option value=1_week></option>').html("1 week");
      this._currentCB.append(optionCB);
      optionCB = $('<option value=2_week></option>').html("1 weeks");
      this._currentCB.append(optionCB);
      optionCB = $('<option value=1_month></option>').html("1 month");
      this._currentCB.append(optionCB);
      optionCB = $('<option value=1_quarter></option>').html("1 quarter");
      this._currentCB.append(optionCB);
      optionCB = $('<option value=1_year></option>').html("1 year");
      this._currentCB.append(optionCB);

    }

    // return value input
    initParamForReport (divToFill, name, parameterkey, dataType, parameterType,
      defaultValue, value, required, hidden, helptext) {
      $(divToFill).addClass('parameter');
      $(divToFill).append("<input type='hidden' id='name' value='" + name + "' />");
      $(divToFill).append("<input type='hidden' id='parameterkey' value='" + parameterkey + "' />");
      $(divToFill).append("<input type='hidden' id='defaultvalue' value='" + defaultValue + "' />");
      let retInput = $("<input type='hidden' id='value' value='" + value + "' />");
      $(divToFill).append(retInput);
      $(divToFill).append("<input type='hidden' id='datatype' value='" + dataType + "' />");
      $(divToFill).append("<input type='hidden' id='parametertype' value='" + parameterType + "' />");
      $(divToFill).append("<input type='hidden' id='required' value='" + required + "' />");
      $(divToFill).append("<input type='hidden' id='helptext' value='" + helptext + "' />");
      $(divToFill).append("<input type='hidden' id='hidden' value='" + hidden + "' />");
      if (parameterkey == 'WEBAPP') {
        $(divToFill).append("<input type='hidden' id='widget' value='TEXTBOX' />");
        retInput = $("<input type='hidden' id='" + name + "_value' value= />");
        $(divToFill).append(retInput);
      }
      return retInput;
      /*
        <input type="hidden" id="widget" value="DATEBOX" />
  <input type="hidden" id="name" value="${scalarParameter.name}" />
  
  <x-datepicker id='${scalarParameter.name}_value'></x-datepicker>
      */
    }

    initialize () {
      this.addClass('pulse-text'); // Mandatory for loader
      //pulse-text / pulse-icon / pulse-lastbar / pulse-slotbar / pulse-piegauge / pulse-bigdisplay

      // Listener and dispatchers

      // In case of clone, need to be empty :
      $(this.element).empty();

      // Create DOM - Content - added in parameterGroupContent no-left-border
      this._content = $('<div></div>').addClass('pulse-report-content');
      $(this.element)
        .addClass('pulse-report-datetime')
        .append(this._content);

      let isDateTime = (this.element.getAttribute('dataType') == 'DATETIME');
      if (isDateTime) {
        this._content.addClass('pulse-report-isdatetime');
      } else {
        this._content.addClass('pulse-report-isdate');
      }

      // First row 'pulse-report-datetime-main-sel-div'

      // explicit / since / past / current
      this._typeSelectCB = $('<select class="pulse-report-datetime-type-CB" ></select>');
      this._fillTypeCB();

      // past details - ex : 1 + day
      this._pastNb = $('<input type="number" value="1" min="1" max="365"></input>')
        .addClass('pulse-report-datetime-past-number');
      this._pastUnitCB = $('<select></select>').addClass('pulse-report-datetime-past-unit-CB');
      this._fillPastCB();

      // current details
      this._currentCB = $('<select></select>').addClass('pulse-report-datetime-current-CB');
      this._fillCurrentCB();

      // WebAppParamsDateTime_row1
      let typeMainSelDiv = $('<div></div>').addClass('pulse-report-datetime-main-sel-div')
        .append(this._typeSelectCB).append(this._pastNb).append(this._pastUnitCB).append(this._currentCB);

      $(this._content).append(typeMainSelDiv);

      // DIV for min / max / loader / error 
      let minMaxDiv = $('<div></div>').addClass('pulse-report-datetime-min-max-div');

      // Create DOM - Loader
      let loader = $('<div></div>').addClass('pulse-loader').html('Loading...').css('display', 'none');
      let loaderDiv = $('<div></div>').addClass('pulse-loader-div').append(loader);
      $(minMaxDiv).append(loaderDiv);

      // Create DOM - message for error
      this._messageSpan = $('<span></span>').addClass('pulse-message').html('');
      let messageDiv = $('<div></div>').addClass('pulse-message-div')
        .append(this._messageSpan);
      $(minMaxDiv).append(messageDiv);

      // MIN / MAX - same position as loader AND error message - WebAppParamsDateTime_row3
      this._minDTP = pulseUtility.createjQueryElementWithAttribute(
        isDateTime ? 'x-datetimepicker' : 'x-datepicker', {
        'showseconds': "true"
      });

      this._minDTP.addClass('pulse-report-datetime-min-DTP');
      //.addClass('parameter'); // Used by reporting to retrieve scalarparameter
      let minDiv = $('<div></div>').addClass('pulse-report-datetime-min-div')
        .append(this._minDTP);

      this._maxDTP = pulseUtility.createjQueryElementWithAttribute(
        isDateTime ? 'x-datetimepicker' : 'x-datepicker', {
        'showseconds': "true"
      });
      this._maxDTP.addClass('pulse-report-datetime-max-DTP');
      //.addClass('parameter'); // Used by reporting to retrieve scalarparameter
      let maxDiv = $('<div></div>').addClass('pulse-report-datetime-max-div')
        .append(this._maxDTP);

      minMaxDiv.append(minDiv).append(maxDiv);
      $(this._content).append(minMaxDiv);

      // Remove the left border of the group
      $(this.element).parent().addClass('no-left-border');

      // Show / Hide for consistancy
      let rangeType = this._typeSelectCB[0].options[this._typeSelectCB[0].selectedIndex].value;
      this._showHide(rangeType);

      // On change selection => change display
      this._setChangeSel();

      // Get Attributes => change selection
      if (this.element.hasAttribute('webapp')) {
        let webAppValue = this.element.getAttribute('webapp');
        this._setSelectionFromWebApp(webAppValue);
      }

      // Hidden div for report
      let minReportDiv = $('<div></div>').addClass('pulse-report-hidden');
      this.initParamForReport(minReportDiv,
        this.element.getAttribute('mindatename'), 'MINDATE', // name, parameterkey
        this.element.getAttribute('dataType'), // dataType = 'DATE':'DATETIME'
        'SIMPLE', '', '', // , parameterType, defaultValue, value, 
        'false', 'false', ''); // required, hidden, helptext
      minMaxDiv.append(minReportDiv);

      let maxReportDiv = $('<div></div>').addClass('pulse-report-hidden');
      this.initParamForReport(maxReportDiv,
        this.element.getAttribute('maxdatename'), 'MAXDATE', // name, parameterkey
        this.element.getAttribute('dataType'), // dataType = 'DATE':'DATETIME'
        'SIMPLE', '', '', // parameterType, defaultValue, value, 
        'false', 'false', ''); // required, hidden, helptext
      minMaxDiv.append(maxReportDiv);

      let webappReportDiv = $('<div></div>').addClass('pulse-report-hidden');
      this._webAppValue = this.initParamForReport(webappReportDiv,
        this.element.getAttribute('webappname'), 'WEBAPP', // name, parameterkey
        'STRING', // dataType
        'SIMPLE', '', '', // parameterType, defaultValue, value, 
        'false', 'true', ''); // required, hidden, helptext
      minMaxDiv.append(webappReportDiv);

      // Initialization OK => switch to the next context
      this.switchToNextContext();
      return;
    }

    /**
      * Clear anything that was done during intialization, so that initialize can be called once again.
      * Remove all the dispatchers and listeners.
      * Please note that no state switch is done here
    */
    clearInitialization () {
      // Parameters

      // DOM
      $(this.element).empty();
      this._content = undefined;

      super.clearInitialization();
    }

    reset () { // Optional implementation
      // Code here to clean the component when the component has been initialized for example after a parameter change
      this.removeError();
      // Empty this._content

      this.switchToNextContext();
    }

    validateParameters () {
      if (!this.element.hasAttribute('groupDisplayForm')) {
        console.error('missing attribute groupDisplayForm in reportdatetime.element');
        // Delayed display :
        //this.setError('missing display form');
        // or
        // Immediat display :
        this.switchToKey('Error', () => this.displayError('invalid groupDisplayForm'), () => this.removeError());
        return;
      }
      if (!this.element.hasAttribute('groupName')) {
        console.error('missing attribute groupName in reportdatetime.element');
        // Delayed display :
        //this.setError('missing groupName');
        // or
        // Immediat display :
        this.switchToKey('Error', () => this.displayError('invalid groupName'), () => this.removeError());
        return;
      }
      if (!this.element.hasAttribute('dataType')) {
        console.error('missing attribute dataType in reportdatetime.element');
        // Delayed display :
        //this.setError('missing dataType');
        // or
        // Immediat display :
        this.switchToKey('Error', () => this.displayError('invalid dataType'), () => this.removeError());
        return;
      }

      this.switchToNextContext();
    }


    /**
     * @override
     */
    manageError (data) {
      super.manageError(data);
    }

    /**
     * @override
     */
    manageFailure (isTimeout, xhrStatus) {
      super.manageFailure(isTimeout, xhrStatus);
    }

    /**
     * @override
     */
    displayError (text) {
      if (typeof text == 'undefined') {
        return; // No message to display, do not display any error
      }
      if (typeof this._messageSpan !== 'undefined') {
        $(this._messageSpan).html(text);
      }
    }

    removeError () {
      // Code here to remove the error message. Only required if displayError is implemented
      // For example:
      this.displayError('');
    }

    // Overload to always refresh value
    get isVisible () {
      return true;
    }

    _showHide (rangeType) {

      if (rangeType == 'past') {
        this._pastNb.show();
        this._pastUnitCB.show();
      }
      else {
        this._pastNb.hide();
        this._pastUnitCB.hide();
      }

      if (rangeType == 'current') {
        this._currentCB.show();
      }
      else {
        this._currentCB.hide();
      }

      switch (rangeType) {
        case ('since'): {
          // only from visible + enabled
          //$(this._minDTP).show();
          //$(this._minDTP).enable();
          this._minDTP.prop('disabled', false);

          $(this._maxDTP).hide();
        } break;
        case ('explicit'): {
          // visible + enabled
          $(this._maxDTP).show();

          //$(this._minDTP).enable();
          this._minDTP.prop('disabled', false);
          this._maxDTP.prop('disabled', false);
          //$(this._maxDTP).enable();
        } break;
        case ('current'):
        case ('past'):
        default: {
          {
            // visible + disabled
            $(this._maxDTP).show();

            this._minDTP.prop('disabled', true);
            this._maxDTP.prop('disabled', true);
            //$(this._minDTP).disable();
            //$(this._maxDTP).disable();
          } break;
        }
      }
    }

    _storeWebAppValue () {
      let webapprange = this.getWebAppRange();
      $(this._webAppValue).attr('value', webapprange);
    }

    /** Replace _runAjaxWhenIsVisible when NO url should be called
     *  return true if something is done, false if _runAjaxWhenIsVisible should be called
     */
    _runAlternateGetData () {
      let rangeType = this._typeSelectCB[0].options[this._typeSelectCB[0].selectedIndex].value;
      this._showHide(rangeType); // Always here

      if (rangeType == 'explicit' || rangeType == 'since') {
        this._storeWebAppValue();
        // (_minDateMoment, _maxDateMoment); -> need to be read
        this.switchToContext('Loaded'); // to STOP calling Ajax request
        return true;
      }
      else {
        // Call web service
        return false;
      }
    }

    getShortUrl () {
      let rangeType = this._typeSelectCB[0].options[this._typeSelectCB[0].selectedIndex].value;
      if (rangeType == 'past') {
        let number = $(this._pastNb)[0].value;
        let unit = this._pastUnitCB[0].options[this._pastUnitCB[0].selectedIndex].value;
        return 'Time/PastRange/' + number + '_' + unit;
      }
      else {
        let crt = this._currentCB[0].options[this._currentCB[0].selectedIndex].value;
        return 'Time/CurrentRange/' + crt;
      }
    }

    refresh (data) {
      // Update the component with data returned by the web service in case of success
      let isDateTime = (this.element.getAttribute('dataType') == 'DATETIME');
      if (isDateTime) {
        // "YYYY-MM-DDTHH:mm:ss"
        let r = pulseRange.createStringRangeFromString(data.UtcDateTimeRange);
        $(this._minDTP).attr('defaultdatetime', r.lower);
        $(this._maxDTP).attr('defaultdatetime', r.upper);
      }
      else {
        // YYYY-MM-DD
        let r = pulseRange.createStringRangeFromString(data.DayRange);
        $(this._minDTP).attr('defaultdate', r.lower);
        $(this._maxDTP).attr('defaultdate', r.upper);
      }

      this._storeWebAppValue();
    }

    // Callback events

    onChangeSel () {
      // Show / Hide
      let rangeType = this._typeSelectCB[0].options[this._typeSelectCB[0].selectedIndex].value;
      this._showHide(rangeType);

      // Reload if necessary
      switch (rangeType) {
        case ('current'):
        case ('past'): {
          // Force re-load
          this.start();
        } break;
        case ('since'):
        case ('explicit'):
        default: {
          this._storeWebAppValue();
          // Do nothing more
        }
      }
    }

    // External methods
    isValid () { // cf _callback_validate_settings () {
      if (!this._beginDTP[0].isValid()) {
        //pulseCustomDialog.openError('Start date/time is not valid.');
        return false;
      }
      if (!this._endDTP[0].isValid()) {
        //pulseCustomDialog.openError('End date/time is not valid.');
        return false;
      }
      if (null == this._endDTP[0].getISOValue()) {
        //pulseCustomDialog.openError('End date/time is not valid.');
        return false;
      }

      let beginDateTime = new Date(this._beginDTP[0].getISOValue());
      let endDateTime = new Date(this._endDTP[0].getISOValue());

      // Check the range
      if (endDateTime) {
        if (endDateTime < beginDateTime) {
          //pulseCustomDialog.openError('End date/time is before start date/time.');
          return false;
        }
        else {
          if (beginDateTime < endDateTime) {
            // Do nothing = it is OK
          }
          else {
            //pulseCustomDialog.openError('Empty period.');
            return false;
          }
        }
      }
      return true;
    } // end isValid

    getValueAsIs (name) {
      if (this.element.getAttribute('mindatename') == name) {
        return this.getMinValueAsIs();
      }
      if (this.element.getAttribute('maxdatename') == name) {
        return this.getMaxValueAsIs();
      }
      return '';
    }

    getMinValueAsIs () { //'YYYY-MM-DD HH:mm:ss 
      return this._minDTP[0].getValueAsIs();
    }

    getMaxValueAsIs () { //'YYYY-MM-DD HH:mm:ss 
      return this._maxDTP[0].getValueAsIs();
    }

    getWebAppRange () {
      let rangeType = this._typeSelectCB[0].options[this._typeSelectCB[0].selectedIndex].value;

      let retVal = rangeType + '_';
      switch (rangeType) {
        case ('since'): {
          retVal += this.getMinValueAsIs();
        } break;
        case ('explicit'): {
          retVal += this.getMinValueAsIs() + '_' + this.getMaxValueAsIs();
        } break;
        case ('current'): {
          retVal += this._currentCB[0].options[this._currentCB[0].selectedIndex].value;
        } break;
        case ('past'): {
          let number = this._pastNb[0].value;
          let unit = this._pastUnitCB[0].options[this._pastUnitCB[0].selectedIndex].value;
          retVal += number + '_' + unit;
        } break;
        default: {
          // Never
        }
      }
      return retVal;
    }
    //_storeWebAppValue
    // Get "WebAppParamsDate" from "PulseMinDate", "PulseMaxDate"
    /*
    static getWebAppRangeFromMinMax(min, max) {      
      let retVal = 'explicit_' + min + '_' + max;
      return retVal;
    }
    */

  }

  pulseComponent.registerElement('x-reportdatetime', ReportDateTimeComponent,
    ['groupDisplayForm', 'groupName', 'dataType', 'webapp', 'mindate', 'maxdate',
      'mindatename', 'maxdatename', 'webappname']);
  // mindatename','maxdatename' == PulseMinDate / PulseMaxDate
})();

},{"pulseRange":"pulseRange","pulseUtility":"pulseUtility","pulsecomponent":2,"x-datepicker/x-datepicker":78,"x-datetimepicker/x-datetimepicker":79}],"eventBus":[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/* Singleton class to manage events sent between pulse components */

var EventBusClass = {};
EventBusClass = function () {
  this.listeners = {};
  this.globalListeners = {};
};
EventBusClass.prototype = {
  /**
    * Add a signal listener for a given context on event bus for 1 component=scope
    *
    * @function addEventListener
    * @param {Object} scope listener scope (= this in callback = xtag class)
    * @param {String} signal generic name of signal to listen on event bus
    * @param {String} context context concern by signal sent (ex:period-context)
    * @param {Method} callback callback to call
  */
  addEventListener: function (scope, signal, context, callback) {
    // hope (context != 'undefined' && context != '') {
    if (typeof this.listeners[signal] == 'undefined') {
      this.listeners[signal] = {};
    }
    if (typeof this.listeners[signal][context] == 'undefined') {
      this.listeners[signal][context] = [];
    }
    this.listeners[signal][context].push({ scope: scope, callback: callback });
    console.log(`${scope.getInfo ? scope.getInfo() : ''}: add listener event=${signal}_${context}`);
  },
  /**
    * Add a signal listener for all contexts on event bus for 1 component=scope
    *
    * @function addGlobalEventListener
    * @param {Object} scope listener scope (= this in callback)
    * @param {String} signal generic name of signal to listen on event bus
    * @param {Method} callback callback to call
  */
  addGlobalEventListener: function (scope, signal, callback) {
    // global listener = for all contexts
    if (typeof this.globalListeners[signal] == 'undefined') {
      this.globalListeners[signal] = [];
    }
    this.globalListeners[signal].push({ scope: scope, callback: callback });
    console.log(`${scope.getInfo ? scope.getInfo() : ''}: add global listener signal=${signal} DONE`);
  },
  /**
    * Remove all signal listeners for all contexts on event bus for 1 component=scope
    *
    * @function removeEventListenerBySignal
    * @param {Object} scope listener scope (= this in callback)
    * @param {String} signal generic name of signal to listen on event bus
  */
  removeEventListenerBySignal: function (scope, signal) {
    if (typeof this.listeners[signal] != 'undefined') {
      for (let context in this.listeners[signal]) {
        // For ALL founded contexts : remove listeners
        if (typeof this.listeners[signal][context] != 'undefined') {
          let newArray = [];
          for (let i = 0; i < this.listeners[signal][context].length; i++) {
            let listener = this.listeners[signal][context][i];
            if (listener.scope != scope) {
              newArray.push(listener);
            }
            else {
              console.log(`${scope.getInfo ? scope.getInfo() : ''}: remove listener signal=${signal} context=${context}`);
            }
          }
          this.listeners[signal][context] = newArray;
        }
      }
    }
    // Global listeners
    if (typeof this.globalListeners[signal] != 'undefined') {
      let newArray = [];
      for (let i = 0; i < this.globalListeners[signal].length; i++) {
        let listener = this.globalListeners[signal][i];
        if (listener.scope != scope) {
          newArray.push(listener);
        }
        else {
          console.log(`${scope.getInfo ? scope.getInfo() : ''}: remove global listener signal=${signal}`);
        }
      }
      this.globalListeners[signal] = newArray;
    }
    //console.log(`${scope.getInfo ? scope.getInfo() : ''}: remove listeners by signal=${signal} DONE`);
  },

  /**
  * Remove all signal listeners for all contexts on event bus for 1 component=scope
  *
  * @function removeEventListenerByScope
  * @param {Object} scope listener scope (= this in callback)
  */
  removeEventListenerByScope: function (scope) {
    for (let signal in this.listeners) {
      for (let context in this.listeners[signal]) {
        // For ALL founded signal + contexts : remove listeners
        if (typeof this.listeners[signal][context] != 'undefined') {
          let newArray = [];
          for (let i = 0; i < this.listeners[signal][context].length; i++) {
            let listener = this.listeners[signal][context][i];
            if (listener.scope != scope) {
              newArray.push(listener);
            }
            else {
              console.log(`${scope.getInfo ? scope.getInfo() : ''}: remove listener signal=${signal} context=${context}`);
            }
          }
          this.listeners[signal][context] = newArray;
        }
      }
    }
    // Global listeners
    for (let signal in this.globalListeners) {
      let newArray = [];
      for (let i = 0; i < this.globalListeners[signal].length; i++) {
        let listener = this.globalListeners[signal][i];
        if (listener.scope != scope) {
          newArray.push(listener);
        }
        else {
          console.log(`${scope.getInfo ? scope.getInfo() : ''}: remove global listener signal=${signal}`);
        }
      }
      this.globalListeners[signal] = newArray;
    }
    //console.log(`${scope.getInfo ? scope.getInfo() : ''}: remove (all) listeners DONE`);
  },
  /**
    * Dispatch a signal for a given context on event bus
    *
    * @function dispatchToContext
    * @param {String} signal generic name of signal to dispatch to on event bus
    * @param {String} context context concern by signal sent (ex:period-context)
    * @param {Object} target main information to give to listeners
  */
  dispatchToContext: function (signal, context, target) {
    console.log(`dispatch to listeners signal=${signal} context=${context}`);
    let event = {
      /*signal: signal,
      context: context,
      type: signal + '_' + context,*/
      target: target
    };
    let args = [];
    var numOfArgs = arguments.length;
    for (var i = 0; i < numOfArgs; i++) {
      args.push(arguments[i]);
    }
    args = args.length > 3 ? args.splice(3, args.length - 1) : [];
    args = [event].concat(args);
    if (typeof this.listeners[signal] != 'undefined') {
      if (typeof this.listeners[signal][context] != 'undefined') {
        let numOfCallbacks = this.listeners[signal][context].length;
        for (let i = 0; i < numOfCallbacks; i++) {
          let listener = this.listeners[signal][context][i];
          if (listener && listener.callback) {
            listener.callback.apply(listener.scope, args);
          }
        }
      }
    }
    // WARNING :
    // Global listeners DO NOT receive this event with context to allow "local" communication.
    // For example : page Running (no context) + Details
  },
  /**
    * Dispatch a signal to GLOBAL context on event bus
    *
    * @function dispatchToGlobalOnly
    * @param {String} signal generic name of signal to dispatch to on event bus
    * @param {Object} target main information to give to listeners
  */
  dispatchToGlobalOnly: function (signal, target) {
    let event = {
      /*signal: signal,
      context: '',
      type: signal,*/
      target: target
    };
    let args = [];
    var numOfArgs = arguments.length;
    for (var i = 0; i < numOfArgs; i++) {
      args.push(arguments[i]);
    }
    args = args.length > 2 ? args.splice(2, args.length - 1) : [];
    args = [event].concat(args);
    // + global
    if (typeof this.globalListeners[signal] != 'undefined') {
      let numOfCallbacks = this.globalListeners[signal].length;
      for (let i = 0; i < numOfCallbacks; i++) {
        let listener = this.globalListeners[signal][i];
        if (listener && listener.callback) {
          listener.callback.apply(listener.scope, args);
        }
      }
    }
  },
  /**
    * Dispatch a signal to ALL contexts on event bus
    *
    * @function dispatchToAll
    * @param {String} signal generic name of signal to dispatch to on event bus
    * @param {Object} target main information to give to listeners
  */
  dispatchToAll: function (signal, target) {
    let event = {
      /*signal: signal,
      context: '',
      type: signal,*/
      target: target
    };
    let args = [];
    var numOfArgs = arguments.length;
    for (var i = 0; i < numOfArgs; i++) {
      args.push(arguments[i]);
    }
    args = args.length > 2 ? args.splice(2, args.length - 1) : [];
    args = [event].concat(args);
    if (typeof this.listeners[signal] != 'undefined') {
      for (let context in this.listeners[signal]) {
        // For ALL founded contexts : dispatch
        if (typeof this.listeners[signal][context] != 'undefined') {
          let numOfCallbacks = this.listeners[signal][context].length;
          for (let i = 0; i < numOfCallbacks; i++) {
            let listener = this.listeners[signal][context][i];
            if (listener && listener.callback) {
              listener.callback.apply(listener.scope, args);
            }
          }
        }
      }
    }
    // + global
    if (typeof this.globalListeners[signal] != 'undefined') {
      let numOfCallbacks = this.globalListeners[signal].length;
      for (let i = 0; i < numOfCallbacks; i++) {
        let listener = this.globalListeners[signal][i];
        if (listener && listener.callback) {
          listener.callback.apply(listener.scope, args);
        }
      }
    }
  },
};

exports.EventBus = new EventBusClass();

},{}],"pulseConfig":[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @file access configuration.
 */

/**
* @module pulseConfig
* @requires pulseUtility
* @requires pulseLogin
*/
var pulseUtility = require('pulseUtility');
var pulseLogin = require('pulseLogin');


////////// ////////// //////////
// TRANSLATION                //
////////// ////////// //////////

/**
 * function called to find a translation
 * @param {String} key Key linked to a translation 
 * @param {String} defaultTranslation Translation returned if the key is not found
 * @return {String} string to display
 */
exports.pulseTranslate = function (key, defaultTranslation) {
  let result = defaultTranslation;

  // Translations accessible?
  if (!pulseUtility.isNotDefined(PULSE_TRANSLATION)) {
    let translation = PULSE_TRANSLATION;
    let listOfKeys = key.split('.');
    for (let i = 0; i < listOfKeys.length; i++) {
      translation = translation[listOfKeys[i]];
      if ((pulseUtility.isNotDefined(translation)) || ('' === translation))
        break;
      if (i == (listOfKeys.length - 1))
        result = translation;
    }
  }

  return result;
};

////////// ////////// //////////
// Local Functions            //
////////// ////////// //////////

var getAppName = function () {
  /* This could be found in URL - BUT can not, because of hardcoded script in template.html (case sensitive, other app...) 
  More : in we read app name in URL, it will be more difficult to share data between app, for exemple machines 
  */
  return LEM_CONFIG_DEFAULT.appName;
}

var getPageName = exports.getPageName = function () {
  let href = window.location.href; // ".../pagename.html"
  var posReq = href.lastIndexOf('?');
  if (posReq != -1) {
    href = href.slice(0, posReq); // To ignore all after ?
  }
  var posPt = href.lastIndexOf('.');
  var posSlash = href.lastIndexOf('/');
  let pageName = '';
  if ((posPt != -1) && (posSlash != -1)) { // Found both
    pageName = href.slice(posSlash + 1, posPt);
  }

  return pageName;
};


//var isCurrentApp = 
exports.isCurrentApp = function (appName) {
  // Find app name
  let app = getAppName();
  if (app == appName) {
    return true;
  }
  return false;
};

var getAppContextOnly = exports.getAppContextOnly = function () {
  // get AppContext in URL
  let appCtxConfig = getURLConfig('AppContext');
  if (appCtxConfig.found) {
    return appCtxConfig.value;
  }

  return '';
}

var getAppContextOrRole = exports.getAppContextOrRole = function () {
  // get AppContext in URL
  let appCtxConfig = getURLConfig('AppContext');
  if (appCtxConfig.found) {
    return appCtxConfig.value;
  }

  // If not found, get role
  return pulseLogin.getRole();
}

var getLoginAppContextOrRole = exports.getLoginAppContextOrRole = function () {
  let login = pulseLogin.getLogin();
  if (login != '') {
    return login;
  }

  // get AppContext in URL
  let appCtxConfig = getURLConfig('AppContext');
  if (appCtxConfig.found) {
    return appCtxConfig.value;
  }

  // If not found, get role
  return pulseLogin.getRole();
}

////////// ////////// //////////
// "SEARCH IN CONFIG" METHODS //
////////// ////////// //////////

var getURLConfig = function (key) {
  let retVal = { found: false, value: '' };
  let href = window.location.href;
  // To find config LIKE production.thresholdNbOfPieces, SPLIT
  let listOfKeys = key.split('.');
  if (listOfKeys.length >= 1) {
    let lastKey = listOfKeys[listOfKeys.length - 1];
    let allValues;
    if ('machine' == lastKey) {
      allValues = pulseUtility.getALLMachineIdParameterValue(href); // For Compatibility
    }
    else {
      allValues = pulseUtility.getURLParameterValues(href, lastKey);
    }
    if (allValues != null && allValues.length != 0) {
      if (allValues.length == 1) {
        retVal.value = allValues[0];
        retVal.found = true;
      }
      else {
        retVal.value = allValues;
        retVal.found = true;
      }
    }
  }
  return retVal;
};

var getLocalConfig = function (key, login, pageName) {
  let retVal = { found: false, value: '' };
  if (key == 'path') {
    if (typeof sessionStorage != 'undefined') {
      let item = sessionStorage.getItem(key);
      if (item != null) {
        retVal.value = JSON.parse(item);
        if (Array.isArray(retVal.value)) {
          // reset
          retVal.value = '';
          // Remove from local storage error
          console.warn('Config Strange array for key=' + key);
        }
        else {
          retVal.found = true;
          return retVal;
        }
      }
    }
  }
  if (typeof localStorage == 'undefined') {
    console.warn('Config can not read local storage ');
  }
  else {
    // Find app name
    let app = getAppName();

    // Get GLOBAL
    let keyString = 'PULSE.' + app + '.' + key;
    let item = localStorage.getItem(keyString);
    if (item != null) {
      retVal.value = JSON.parse(item);
      if (Array.isArray(retVal.value)) {
        // reset
        retVal.value = '';
        // Remove from local storage error
        console.warn('Config remove array ' + keyString);
        //reset(keyString);
        localStorage.removeItem(keyString);
      }
      else {
        retVal.found = true;
        return retVal;
      }
    }
    // Get by login + page
    keyString = 'PULSE.' + app + '.' + login + '.' + pageName + '.' + key;
    item = localStorage.getItem(keyString);
    if (item != null) {
      retVal.value = JSON.parse(item); // Parse is not mandatory. But can be done
      if (Array.isArray(retVal.value)) {
        // reset
        retVal.value = '';
        // Remove from local storage error
        console.warn('Config remove array ' + keyString);
        //reset(keyString);
        localStorage.removeItem(keyString);
      }
      else {
        retVal.found = true;
        return retVal;
      }
    }
    // Get by login only (was role)
    keyString = 'PULSE.' + app + '.' + login + '.' + key;
    item = localStorage.getItem(keyString);
    if (item != null) {
      retVal.value = JSON.parse(item); // Parse is not mandatory. But can be done
      if (Array.isArray(retVal.value)) {
        // reset
        retVal.value = '';
        // Remove from local storage error
        console.warn('Config remove array ' + keyString);
        //reset(keyString);
        localStorage.removeItem(keyString);
      }
      else {
        retVal.found = true;
        return retVal;
      }
    }
  }
  return retVal;
};

var getRolePageConfig = function (key, role, pageName) {
  let retVal = { found: false, value: '' };
  if ((!pulseUtility.isNotDefined(role)) && (role != '')
    && (!pulseUtility.isNotDefined(pageName)) && (pageName != '')) {
    // Get New config (old is removed 2018-11)
    if (typeof PULSE_DEFAULT_CONFIG == 'undefined') {
      console.warn('PULSE_DEFAULT_CONFIG is undefined');
      return retVal;
    }
    // SEARCH in NEW role CONFIG
    if ((typeof PULSE_DEFAULT_CONFIG.rolespages != 'undefined')
      && (PULSE_DEFAULT_CONFIG.rolespages !== undefined)) {
      if ((typeof PULSE_DEFAULT_CONFIG.rolespages[role] != 'undefined')
        && (PULSE_DEFAULT_CONFIG.rolespages[role] !== undefined)) {
        let cfg = PULSE_DEFAULT_CONFIG.rolespages[role][pageName];
        if (!pulseUtility.isNotDefined(cfg)) {
          let listOfKeys = key.split('.');
          for (let i = 0; i < listOfKeys.length; i++) {
            cfg = cfg[listOfKeys[i]];
            if ((pulseUtility.isNotDefined(cfg)) || ('' === cfg)) {
              break; // To exit for
            }
            if (i == (listOfKeys.length - 1)) {
              retVal.found = true;
              retVal.value = cfg;
              return retVal;
            }
          }
        }
      }
    }
  }

  return retVal;
};

var getRoleConfig = function (key, role, pageName) {
  let retVal = { found: false, value: '' };
  if (typeof PULSE_DEFAULT_CONFIG == 'undefined') {
    console.warn('PULSE_DEFAULT_CONFIG is undefined - normal for docs');
    return retVal;
  }

  if ((!pulseUtility.isNotDefined(role)) && (role != '')) {
    // SEARCH in NEW role CONFIG
    if ((typeof PULSE_DEFAULT_CONFIG.roles != 'undefined')
      && (PULSE_DEFAULT_CONFIG.roles !== undefined)) {
      let cfg = PULSE_DEFAULT_CONFIG.roles[role];
      if (!pulseUtility.isNotDefined(cfg)) {
        let listOfKeys = key.split('.');
        for (let i = 0; i < listOfKeys.length; i++) {
          cfg = cfg[listOfKeys[i]];
          if ((pulseUtility.isNotDefined(cfg)) || ('' === cfg)) {
            break; // To exit for
          }
          if (i == (listOfKeys.length - 1)) {
            retVal.found = true;
            retVal.value = cfg;
            return retVal;
          }
        }
      }
    }
  }
  return retVal;
}

var getPageConfig = function (key, role, pageName) {
  let retVal = { found: false, value: '' };
  if (typeof PULSE_DEFAULT_CONFIG == 'undefined') {
    console.warn('PULSE_DEFAULT_CONFIG is undefined');
    return retVal;
  }

  if ((!pulseUtility.isNotDefined(pageName)) && (pageName != '')) {
    // Search the key for the current pages
    if ((typeof PULSE_DEFAULT_CONFIG.pages != 'undefined')
      && (PULSE_DEFAULT_CONFIG.pages !== undefined)) {
      let cfg = PULSE_DEFAULT_CONFIG.pages[pageName];
      if (!pulseUtility.isNotDefined(cfg)) {
        let listOfKeys = key.split('.');
        for (let i = 0; i < listOfKeys.length; i++) {
          cfg = cfg[listOfKeys[i]];
          if ((pulseUtility.isNotDefined(cfg)) || ('' === cfg)) {
            break; // To exit for
          }
          if (i == (listOfKeys.length - 1)) {
            retVal.found = true;
            retVal.value = cfg;
            return retVal;
          }
        }
      }
    }
  }
  return retVal;
};

var getAppConfig = function (key, role, pageName) {
  let retVal = { found: false, value: '' };
  if (typeof PULSE_DEFAULT_CONFIG == 'undefined') {
    console.warn('PULSE_DEFAULT_CONFIG is undefined');
    return retVal;
  }

  // Search the key in the global section
  if ((typeof PULSE_DEFAULT_CONFIG != 'undefined')
    && (PULSE_DEFAULT_CONFIG !== undefined)) {
    let cfg = PULSE_DEFAULT_CONFIG.general;
    if (!pulseUtility.isNotDefined(cfg)) {
      let listOfKeys = key.split('.');
      for (let i = 0; i < listOfKeys.length; i++) {
        cfg = cfg[listOfKeys[i]];
        if (pulseUtility.isNotDefined(cfg)) {
          return retVal;
        }
        if ('' === cfg) {
          return retVal;
        }
        if (i == (listOfKeys.length - 1)) {
          retVal.found = true;
          retVal.value = cfg;
          return retVal;
        }
      }
    }
  }
  return retVal;
}

/** Get configuration using all paramaters
 * 
 * @memberof module:pulseConfig
 * @function getComponentDefaultConfig
 * @param key key to check
 * @return {String} configuration to use
 */
var getComponentDefaultConfig = function (key) {
  let retVal = { found: false, value: '' };
  if ((pulseUtility.isNotDefined(key)) || (key === '')) {
    // LOG ERROR here
    return retVal;
  }
  let cfg = tagConfig;
  if (!pulseUtility.isNotDefined(cfg)) {
    let listOfKeys = key.split('.');
    for (let i = 0; i < listOfKeys.length; i++) {
      cfg = cfg[listOfKeys[i]];
      if ((pulseUtility.isNotDefined(cfg)) || (cfg === '')) {
        return retVal;
      }
    }
    retVal.found = true;
    retVal.value = cfg;
    return retVal;
  }
  return retVal;
};
////////// ////////// //////////
// END of Local Functions     //
////////// ////////// //////////


/** Get configuration using all paramaters
 * 
 * @memberof module:pulseConfig
 * @function getFullConfig
 * @param key key to check
 * @param defaultValue default Value
 * @param onlyDefault - if true, don't take into account the overrides (url or localstorage)
 * @param {String} pageName - specific page, if needed
 * @param {String} role - hidden param, role if should be used
 * @return {String} configuration to use
 */
var getFullConfig = function (key, defaultValue, onlyDefault, pageName, role) {
  // Find role
  if (role == null)
    role = getAppContextOrRole(); // WAS getRole(); //LATER : maybe use login if exist ?

  let login = getLoginAppContextOrRole();

  let config = { found: false, value: defaultValue };

  // Find page name
  if (pageName == null)
    pageName = getPageName();

  // Are the overrides taken into account?
  if (onlyDefault == null || onlyDefault == false) {
    try {
      // Search the value in the current URL
      config = getURLConfig(key);
      if (config.found) { return config; }
    }
    catch (error) {
      console.error('getFullConfig - getURLConfig error for key=' + key + ' Default=' + defaultValue);
    }

    try {
      // Search the value in the localstorage, related to the current app
      config = getLocalConfig(key, login, pageName);
      if (config.found) { return config; }
    }
    catch (error) {
      console.error('getFullConfig - getLocalConfig error for key=' + key + ' Default=' + defaultValue);
    }
  }

  try {
    // Search role/page config
    config = getRolePageConfig(key, role, pageName);
    if (config.found) { return config; }
  }
  catch (error) {
    console.error('getFullConfig - getRolePageConfig error for key=' + key + ' Default=' + defaultValue);
  }

  try {
    // Search role config
    config = getRoleConfig(key, role, pageName);
    if (config.found) { return config; }
  }
  catch (error) {
    console.error('getFullConfig - getRoleConfig error for key=' + key + ' Default=' + defaultValue);
  }

  try {
    // Search page config
    config = getPageConfig(key, role, pageName);
    if (config.found) { return config; }
  }
  catch (error) {
    console.error('getFullConfig - getPageConfig error for key=' + key + ' Default=' + defaultValue);
  }

  try {
    // Search App config (general)
    config = getAppConfig(key, role, pageName);
    if (config.found) { return config; }
  }
  catch (error) {
    console.error('getFullConfig - getAppConfig error for key=' + key + ' Default=' + defaultValue);
  }

  try {
    // Return default (tagConfig = PWC config)
    config = getComponentDefaultConfig(key);
    if (config.found) { return config; }
  }
  catch (error) {
    console.error('getFullConfig - getComponentDefaultConfig error for key=' + key + ' Default=' + defaultValue);
  }

  //if NOT found (probably for AppContext), search in role
  let realRole = pulseLogin.getRole();
  if (role != realRole)
    return getFullConfig(key, defaultValue, onlyDefault, pageName, realRole);

  // Default = not found
  return config;
};

/** Get a configuration with no specific type, read in this order:
 * - in the url
 * - in localStorage of the web page
 * - in role+page configuration
 * - in role configuration
 * - in page configuration
 * - global default value - tagConfig
 * - value specified in the argument "defaultValue"
 * 
 *  /!\ Use it only for complex objects /!\
 * 
 * @memberof module:pulseConfig
 * @function get
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 * @param {String} page - specific page, if needed
 */
var get = exports.get = function (key, defaultValue, page) {
  // Get config
  let listOfKeys = key.split('.'); // Ex: 'ANY_tagName.realKey'
  if (listOfKeys.length > 1) { // Find overload first
    let lastKey = listOfKeys[listOfKeys.length - 1];
    let config = getFullConfig(lastKey, defaultValue, false, page);
    if (config.found)
      return config.value;
  }

  // FULL tag.key to find default component config
  let config = getFullConfig(key, defaultValue, false, page);
  if (config.found)
    return config.value;

  return defaultValue;
};

/** Get a configuration returned as a BOOLEAN
 * 
 * @memberof module:pulseConfig
 * @function getBool
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 * @param {String} page - specific page, if needed
 */
exports.getBool = function (key, defaultValue, page) {
  let tmp = get(key, defaultValue, page);
  return (tmp == true || tmp == 'true' || tmp == '1' || tmp == 1);
};

/** Get a configuration returned as an INTEGER
 * 
 * @memberof module:pulseConfig
 * @function getInt
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 * @param {String} page - specific page, if needed
 */
exports.getInt = function (key, defaultValue, page) {
  let tmp = get(key, defaultValue, page);
  return parseInt(tmp, 10);
}

/** Get a configuration returned as an FLOAT
 * 
 * @memberof module:pulseConfig
 * @function getFloat
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 * @param {String} page - specific page, if needed
 */
exports.getFloat = function (key, defaultValue, page) {
  let tmp = get(key, defaultValue, page);
  return parseFloat(tmp);
}

/** Get a configuration returned as a STRING
 * 
 * @memberof module:pulseConfig
 * @function getString
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 * @param {String} page - specific page, if needed
 */
var getString = exports.getString = function (key, defaultValue, page) {
  let tmp = get(key, defaultValue, page);
  if (tmp == undefined || tmp == null)
    tmp = '';
  return String(tmp);
}

/** Get a configuration returned as an ARRAY
 * 
 * @memberof module:pulseConfig
 * @function getArray
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 * @param {String} page - specific page, if needed
 */
var getArray =
  exports.getArray = function (key, defaultValue, page) {
    let tmp = get(key, defaultValue, page);
    if (tmp == null)
      return [];

    if (!Array.isArray(tmp)) {
      if (typeof tmp == 'string')
        return tmp.split(',');

      return [tmp];
    }
    // OK for roles in config file / KO for localstorage
    console.log('pulseConfig.get found ARRAY for key=' + key);
    return tmp;
  }

/** Get the defualt value with no specific type, read in this order
 * - in custom local definition (depending on the role first)
 * - default value for the current page
 * - global default value
 * - value specified in the argument "defaultValue"
 * 
 *  /!\ Use it only for complex objects /!\
 * 
 * @memberof module:pulseConfig
 * @function getDefault
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 */
var getDefault = exports.getDefault = function (key, defaultValue) {
  // Get config
  let listOfKeys = key.split('.'); // Ex: 'ANY_tagName.realKey'
  if (listOfKeys.length > 1) { // Find overload first
    let lastKey = listOfKeys[listOfKeys.length - 1];
    let config = getFullConfig(lastKey, defaultValue, true);
    if (config.found) {
      return config.value;
    }
  }
  // FULL tag.key to find default component config
  let config = getFullConfig(key, defaultValue, true);
  if (config.found) {
    return config.value;
  }
  return defaultValue;
};

/** Get a default configuration returned as a BOOLEAN
 * 
 * @memberof module:pulseConfig
 * @function getDefaultBool
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 */
exports.getDefaultBool = function (key, defaultValue) {
  let tmp = getDefault(key, defaultValue);
  return (tmp == true || tmp == 'true' || tmp == '1' || tmp == 1);
};

/** Get a default configuration returned as an INTEGER
 * 
 * @memberof module:pulseConfig
 * @function getDefaultInt
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 */
exports.getDefaultInt = function (key, defaultValue) {
  let tmp = getDefault(key, defaultValue);
  return parseInt(tmp, 10);
}

/** Get a default configuration returned as an FLOAT
 * 
 * @memberof module:pulseConfig
 * @function getDefaultFloat
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 */
exports.getDefaultFloat = function getDefaultFloat (key, defaultValue) {
  let tmp = getDefault(key, defaultValue);
  return parseFloat(tmp);
}

/** Get a default configuration returned as a STRING
 * 
 * @memberof module:pulseConfig
 * @function getDefaultString
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 */
exports.getDefaultString = function (key, defaultValue) {
  let tmp = getDefault(key, defaultValue);
  if (tmp == undefined || tmp == null)
    tmp = '';
  return String(tmp);
}

/** Get a default configuration returned as an ARRAY
 * 
 * @memberof module:pulseConfig
 * @function getDefaultArray
 * @param {!String} key - key to check
 * @param {String} defaultValue - default Value
 */
exports.getDefaultArray = function (key, defaultValue) {
  let tmp = getDefault(key, defaultValue);
  if (tmp == null)
    return [];
  if (!Array.isArray(tmp))
    return [tmp];
  return tmp;
}


/** Set GLOBAL configuration for the WHOLE app
 * For example : role, theme, machine...
 * Special session storage for path
 * 
 * @memberof module:pulseConfig
 * @function setGlobal (no role, no page)
 * @param key - key to fill
 * @param value - value associated to the key
 */
var setGlobal = exports.setGlobal = function (key, value) {
  // Find app name
  let app = getAppName();

  // STORE
  if (key == 'path') {
    // STORE
    if (typeof sessionStorage != 'undefined') {
      if (value === '') { // Keep '===' because '==' fails when false
        sessionStorage.removeItem(key);
      }
      else {
        sessionStorage.setItem(key, JSON.stringify(value));
      }
    }
    return;
  }

  if (typeof localStorage != 'undefined') {
    let keyString = 'PULSE.' + app + '.' + key;
    if (value === '') { // Keep '===' because '==' fails when false
      localStorage.removeItem(keyString);
    }
    else {
      if (Array.isArray(value)) { // Avoid array in local storage to keep compatibility with url / attributes == string
        let str = value.join();
        localStorage.setItem(keyString, JSON.stringify(str));
      }
      else {
        localStorage.setItem(keyString, JSON.stringify(value));
      }
    }
  }
  else {
    console.warn('Config can not set local storage (' + key + ')');
  }
}

/** Set configuration (in local storage)
 * 
 * @memberof module:pulseConfig
 * @function set
 * @param key - key to fill
 * @param value - value associated to the key
 * @param ignorePageName - if true, we should store by role only (default false)
 * @param global - if true, the configuration will be global for all pages
 */
var set = exports.set = function (key, value, ignorePageName) {
  /* TODO : probably add an error for role, theme, path */
  if (key == 'role' || key == 'theme' || key == 'path') {
    console.error(`Config.set should not be call with key = ${key}`);
    setGlobal(key, value);
    return;
  }

  // STORE
  if (typeof localStorage != 'undefined') {
    // Find app name / role / page
    let app = getAppName();
    //let role = getAppContextOrRole(); // WAS getRole();
    let login = getLoginAppContextOrRole();

    let keyString;
    if (ignorePageName) {
      // Determine the prefix
      keyString = 'PULSE.' + app + '.' + login + '.' + key;
    }
    else {
      let pageName = getPageName();
      // Determine the prefix
      keyString = 'PULSE.' + app + '.' + login + '.' + pageName + '.' + key;
    }

    if (value === '') { // Keep '===' because '==' fails when false
      localStorage.removeItem(keyString);
    }
    else {
      if (Array.isArray(value)) { // Avoid array in local storage to keep compatibility with url / attributes == string
        let str = value.join();
        localStorage.setItem(keyString, JSON.stringify(str));
      }
      else {
        localStorage.setItem(keyString, JSON.stringify(value));
      }
    }
  }
  else {
    console.warn('Config can not set value in local storage  (' + key + ')');
  }
}

/** Clear local configuration
 * 
 * @memberof module:pulseConfig
 * @function reset
 * @param key - key to clear
 */
exports.reset = function (key) {
  // Local
  set(key, '');
  // by role
  setGlobal(key, '', true);
  // Global
  setGlobal(key, '');
}

////////// ////////// //////////
// is login page              //
////////// ////////// //////////

exports.isLoginPage = function () {
  if ('login' == getPageName()) {
    return true;
  }
  if ('validate' == getPageName()) {
    return true;
  }
  return false;
}

/** Clear local configuration
 * 
 * @memberof module:pulseConfig
 * @function goToPageLogin
 */
exports.goToPageLogin = function () {
  let pwa_path = getString('pulsewebapppath', '');
  let newfullURL = window.location.href;
  if ('' == pwa_path) {
    newfullURL = pulseUtility.changePageName(window.location.href, 'login');
  }
  else {
    newfullURL = pwa_path + '/login.html';

    // Add 'path' if exists in url :
    let tmpPath = pulseUtility.getURLParameterValues(window.location.href, 'path');
    if (tmpPath.length > 0) {
      newfullURL = pulseUtility.changeURLParameter(newfullURL, 'path', tmpPath[0]);
    }
    let tmpMainPath = pulseUtility.getURLParameterValues(window.location.href, 'mainpath');
    if (tmpMainPath.length > 0) {
      newfullURL = pulseUtility.changeURLParameter(newfullURL, 'mainpath', tmpMainPath[0]);
    }
    // Remove Code if exists (validate page)
    let tmpCode = pulseUtility.getURLParameterValues(window.location.href, 'code');
    if (tmpCode.length > 0) {
      newfullURL = pulseUtility.removeURLParameter(newfullURL, 'code');
    }
  }

  window.location.href = newfullURL;
}

/** Clear local configuration
 * 
 * @memberof module:pulseConfig
 * @function goToPageLogin
 */
exports.goToFirstPage = function (role) {
  // Go to firstPage (if defined)
  let roles = getArray('roles');

  // Browse all roles
  for (let iRole = 0; iRole < roles.length; iRole++) {
    let aRole = roles[iRole];
    if (role == aRole.role) {
      // role found == aRole.display;
      if (pulseUtility.isNotDefined(aRole.firstPage)) { // Maybe add soon
        // go to home
        let fullURL = window.location.pathname;
        let newfullURL = fullURL.substring(0, fullURL.lastIndexOf('/') + 1) + 'home.html';

        // Add 'path' if exists in url :
        let tmpPath = pulseUtility.getURLParameterValues(window.location.href, 'path');
        if (tmpPath.length > 0) {
          newfullURL = pulseUtility.changeURLParameter(newfullURL, 'path', tmpPath[0]);
        }
        let tmpMainPath = pulseUtility.getURLParameterValues(window.location.href, 'mainpath');
        if (tmpMainPath.length > 0) {
          newfullURL = pulseUtility.changeURLParameter(newfullURL, 'mainpath', tmpMainPath[0]);
        }

        window.location.href = newfullURL;
      }
      else { // go to firstPage
        let firstPage = aRole.firstPage;
        //let fullURL = window.location.pathname;
        //let newfullURL = fullURL.substring(0, fullURL.lastIndexOf('/') + 1) + firstPage + '.html';
        let newfullURL = pulseUtility.changePageName(window.location.pathname, firstPage);

        // Add 'path' if exists in url :
        let tmpPath = pulseUtility.getURLParameterValues(window.location.href, 'path');
        if (tmpPath.length > 0) {
          newfullURL = pulseUtility.changeURLParameter(newfullURL, 'path', tmpPath[0]);
        }
        let tmpMainPath = pulseUtility.getURLParameterValues(window.location.href, 'mainpath');
        if (tmpMainPath.length > 0) {
          newfullURL = pulseUtility.changeURLParameter(newfullURL, 'mainpath', tmpMainPath[0]);
        }

        window.location.href = newfullURL;
      }
    }
  }
}


////////// ////////// //////////
// login / user / context     //
////////// ////////// //////////

//var currentRoleOrAppContextIsDefined = 
exports.currentRoleOrAppContextIsDefined = function () {
  let roles = getArray('roles');
  let currentRole = getAppContextOrRole(); // WAS getRole();
  for (let i = 0; i < roles.length; i++) {
    if (roles[i].role == currentRole) {
      return true;
    }
  }
  return false;
}

// get login / role or appContext display according to what is available
//var getCurrentUserDisplay = 
exports.getCurrentUserDisplay = function () {
  let roles = getArray('roles');

  // App Context
  let appContext = getAppContextOnly();
  if (appContext != '') {
    for (let i = 0; i < roles.length; i++) {
      if (roles[i].role == appContext) {
        if (roles[i].display != null) {
          return roles[i].display;
        }
        else {
          break;
        }
      }
    }
  }

  // Or login
  let login = pulseLogin.getLoginDisplay();
  if (login != '') {
    return login;
  }

  // Or role
  let currentRole = pulseLogin.getRole();
  for (let i = 0; i < roles.length; i++) {
    if (roles[i].role == currentRole) {
      if (roles[i].display != null) {
        return roles[i].display;
      }
      else {
        break;
      }
    }
  }

  return '';
}

////////// ////////// //////////
//                            //
////////// ////////// //////////
},{"pulseLogin":"pulseLogin","pulseUtility":"pulseUtility"}],"pulseCustomDialog":[function(require,module,exports){
(function (global){(function (){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
* @module pulseCustomDialog
* @requires pulseUtility
* @requires pulseSvg
*/

var pulseUtility = require('pulseUtility');
var pulseSvg = require('pulseSvg');

var pulseCustomDialog = function () {
  // Convenient object to store and get data attached to a dialog
  var _dataManager = pulseUtility.createDataManager('customDialogId');

  // List of open dialogs
  var _openIds = [];

  var _displayNavigation = function (selector) {
    var id = _dataManager.getId(selector);
    var dialogId = 'customDialog' + id;
    var data = _dataManager.get(id);

    // Extract parameters defining the element visibility
    var currentPage = data['currentPage'];
    var pageCount = data['pageCount'];
    var cancelButton = data['attributes']['cancelButton']; // can be null, "hidden"
    var previousButton = data['attributes']['previousButton']; // can be null, "hidden"
    var nextButton = data['attributes']['nextButton']; // can be null, "hidden"
    var okButton = data['attributes']['okButton']; // can be null, "hidden"
    var multiPage = data['attributes']['multiPage']; // can be "auto" / null, "on", "off"

    // First and/or last page?
    $('#' + dialogId).toggleClass('customDialogFirstPage', currentPage == 0);
    $('#' + dialogId).toggleClass('customDialogLastPage', currentPage == pageCount - 1);

    // Hidden buttons?
    $('#' + dialogId).toggleClass('customDialogNoCancel', cancelButton == 'hidden');
    $('#' + dialogId).toggleClass('customDialogNoPrevious', previousButton == 'hidden');
    $('#' + dialogId).toggleClass('customDialogNoNext', nextButton == 'hidden');
    $('#' + dialogId).toggleClass('customDialogNoOk', okButton == 'hidden');

    // Multipage state
    $('#' + dialogId).toggleClass('customDialogMultiPageOn', multiPage == 'on');
    $('#' + dialogId).toggleClass('customDialogMultiPageOff', multiPage == 'off');

    // Set current page
    for (var i = 0; i < pageCount; i++)
      $('#' + dialogId + ' .customDialogPage' + i).toggleClass('customDialogCurrentPage', i == currentPage);
  };

  /*
  * Close a prepared dialog
  * selector: the div containing the dialog
  */
  var close = function (selector) {
    var id = _dataManager.getId(selector);
    var attributes = _dataManager.get(id)['attributes'];

    var dialogId = 'customDialog' + id;

    // onClose?
    if (attributes['onClose'] != null)
      attributes['onClose']();

    $('#' + dialogId).removeClass('customDialogEnabled');

    // autoDelete?
    if (attributes['autoDelete'] != null && attributes['autoDelete'] == true) {
      $('#' + dialogId).remove();
      _dataManager.reset(id);
    }

    var index = _openIds.indexOf(id);
    if (index > -1) {
      _openIds.splice(index, 1)

      if (_openIds.length > 0) {
        // Unblur the previous dialog
        $('#customDialog' + _openIds[_openIds.length - 1]).css('filter', 'blur(0)');
      }
      else {
        // Unblur behind the first dialog
        $('.pulse-header').css('filter', 'blur(0)');
        $('#pulse-inner').css('filter', 'blur(0)');
      }
    }
  };

  /*
  * Call "cancel" of a dialog
  */
  var cancel = function (selector) {
    var id = _dataManager.getId(selector);
    var attributes = _dataManager.get(id)['attributes'];

    // onCancel?
    if (attributes['onCancel'] != null)
      attributes['onCancel']();

    // autoClose?
    if ((attributes['autoClose'] != null && attributes['autoClose'] == true) || (attributes['onCancel'] == null)) // If no autoClose AND no method Cancel : X should close dialog
      close(selector);
  };

  /*
  * Call "ok" of a dialog
  */
  var ok = function (selector) {
    var id = _dataManager.getId(selector);
    var attributes = _dataManager.get(id)['attributes'];

    // onOk?
    if (attributes['onOk'] != null)
      attributes['onOk']();

    // autoClose?
    if (attributes['autoClose'] != null && attributes['autoClose'] == true)
      close(selector);
  };

  /*
  * Call "previous" of a dialog
  */
  var previous = function (selector) {
    var id = _dataManager.getId(selector);
    var currentPage = _dataManager.get(id)['currentPage'];
    if (currentPage > 0)
      _dataManager.set(id, 'currentPage', currentPage - 1);
    _displayNavigation(selector);
  };

  /*
  * Call "next" of a dialog
  */
  var next = function (selector) {
    var id = _dataManager.getId(selector);
    var pageCount = _dataManager.get(id)['pageCount'];
    var currentPage = _dataManager.get(id)['currentPage'];
    if (currentPage < pageCount - 1)
      _dataManager.set(id, 'currentPage', currentPage + 1);
    _displayNavigation(selector);
  };

  /*
  * Display a defined page of a dialog
  */
  var goToPage = function (selector, nb) {
    var id = _dataManager.getId(selector);
    var pageCount = _dataManager.get(id)['pageCount'];
    if (nb < pageCount && nb >= 0)
      _dataManager.set(id, 'currentPage', nb);
    _displayNavigation(selector);
  };

  var _createDialog = function (attributes) {
    // Create an id
    var id = _dataManager.createNewId();
    var dialogId = 'customDialog' + id;

    // Options
    var closeButton = (attributes['closeButton'] != 'hidden');
    var fullScreenOnSmartphone = (attributes['fullScreenOnSmartphone'] == true);
    var bigSize = (attributes['bigSize'] == true);
    var fullSize = (attributes['fullSize'] == true);
    var smallSize = (attributes['smallSize'] == true);
    var helpName = attributes['helpName'];

    // Create a dialog
    $('body').append(
      "<div id='" + dialogId + "' class='customDialog'>" +
      "<div class='customDialogShadow'></div>" +
      "<div class='customDialogWindow" + (fullScreenOnSmartphone ? ' customDialogWindowFullScreenOnSmartphone' : '') +
      (fullSize ? ' fullSize' : (bigSize ? ' bigSize' : (smallSize ? ' smallSize' : ''))) + "'>" +
      "<div class='customDialogHeader'>" +
      (closeButton ? "<div class='customDialogCloseBox' title='Close dialog'></div>" : '') +
      (helpName ? "<div class='customDialogHelpBox' title='Help file' helpname='" + helpName + "'></div>" : '') +
      "<div class='customDialogTitle'>" + attributes['title'] + '</div>' +
      '</div>' +
      "<div class='customDialogContent'></div>" +
      "<div class='customDialogButtons'>" +
      "<button class='customDialogCancel buttonDialog' title='Cancel' role='button'></button>" +
      "<button class='customDialogPrevious buttonDialog' title='Previous' role='button'></button>" +
      "<button class='customDialogNext buttonDialog' title='Next' role='button'></button>" +
      "<button class='customDialogOk buttonDialog' title='Ok' role='button'></button>" +
      '</div>' +
      '</div>' +
      '</div>');
    _dataManager.initializeIdAttribute('#' + dialogId, id);

    pulseSvg.inlineBackgroundSvg('#' + dialogId + ' .customDialogCancel');
    pulseSvg.inlineBackgroundSvg('#' + dialogId + ' .customDialogPrevious');
    pulseSvg.inlineBackgroundSvg('#' + dialogId + ' .customDialogNext');
    pulseSvg.inlineBackgroundSvg('#' + dialogId + ' .customDialogOk');
    pulseSvg.inlineBackgroundSvg('#' + dialogId + ' .customDialogCloseBox');
    pulseSvg.inlineBackgroundSvg('#' + dialogId + ' .customDialogHelpBox');

    // Number of pages
    _dataManager.set(id, 'attributes', attributes);
    _dataManager.set(id, 'currentPage', 0);
    _dataManager.set(id, 'pageCount', 0);

    // Add callbacks
    $('#' + dialogId + ' .customDialogCloseBox').click(function () { cancel('#' + dialogId); });
    $('#' + dialogId + ' .customDialogCancel').click(function () { cancel('#' + dialogId); });
    $('#' + dialogId + ' .customDialogPrevious').click(function () { previous('#' + dialogId); });
    $('#' + dialogId + ' .customDialogNext').click(function () { next('#' + dialogId); });
    $('#' + dialogId + ' .customDialogOk').click(function () { ok('#' + dialogId); });

    $('.customDialogHelpBox').click(function () {
      //let helpName = this.getAttribute('helpname');
      let pathname = window.location.pathname;
      let pdfPath = pathname.substring(0, pathname.lastIndexOf('/') + 1) + 'help/' + helpName + '.pdf';
      // Open help file (if exists)
      function _fileExists (url) {
        if (url) {
          var req = new XMLHttpRequest();
          req.open('HEAD', url, false); // head is faster than GET
          req.send();
          return req.status == 200;
        } else {
          return false;
        }
      }
      if (_fileExists(pdfPath)) {
        window.open(pdfPath, 'resizable,scrollbars');
      }
      else {
        //pulseCustomDialog.openInfo('File not found !'); // impossible in dialog :(
        window.alert('File not found !');
      }
    });

    // Max height or height of the dialog
    if (attributes['fixedHeight'] == true) {
      $(window).on('resize', function () {
        $('#' + dialogId + ' .customDialogContent > div').css('height', (($(this).height() - 70) * (fullSize ? 0.99 : (bigSize ? 0.75 : 0.6))) + 'px');
      });
    }
    else {
      $(window).on('resize', function () {
        $('#' + dialogId + ' .customDialogContent > div').css('max-height', (($(this).height() - 70) * (fullSize ? 0.99 : (bigSize ? 0.75 : 0.6))) + 'px');
      });
    }

    // Vertical position of the dialog
    $(window).on('resize', function () {
      $('#' + dialogId + ' .customDialogWindow').css('top', (($(this).height() - $('#' + dialogId + ' .customDialogWindow').height()) * 0.3) + 'px');
    });

    return id;
  };

  /*
   * Add a page to a prepared dialog
   * selector: the div containing the dialog
   * pageSelector: the div that will be the new page
   */
  var addPage = function (selector, pageSelector) {
    // Id of the dialog
    var id = _dataManager.getId(selector);

    // Number of pages
    var pageCount = _dataManager.get(id)['pageCount'];
    var blockToInsert = $(pageSelector).detach().addClass('customDialogPage' + pageCount);
    blockToInsert.appendTo('#customDialog' + id + ' .customDialogContent');
    _dataManager.initializeIdAttribute(pageSelector, id);

    // Update data
    _dataManager.set(id, 'pageCount', pageCount + 1);

    // Dimensions of a page
    $('#customDialog' + id + ' .customDialogContent > div').css('width', (100 / (pageCount + 1)) + '%');
    var attributes = _dataManager.get(id)['attributes'];
    var bigSize = (attributes['bigSize'] == true);
    var fullSize = (attributes['fullSize'] == true);
    if (attributes['fixedHeight'] == true)
      $('#customDialog' + id + ' .customDialogContent > div')
        .css('height', (($(window).height() - 70) * (fullSize ? 0.99 : (bigSize ? 0.75 : 0.6))) + 'px');
    else
      $('#customDialog' + id + ' .customDialogContent > div')
        .css('max-height', (($(window).height() - 70) * (fullSize ? 0.99 : (bigSize ? 0.75 : 0.6))) + 'px');

    // Adapte the navigation buttons
    _displayNavigation(selector);
  };

  /* Create a dialog with initialize and addpage
   * Attributes:
   * - title
   * - cancelButton / previousButton / nextButton / okButton: can be set to "hidden"
   * - multipage: can be set to "auto" (default), "on", "off"
   * - onOpen, onOk, onCancel, onClose: functions that can be triggered
   * - autoClose: true / false (default), close automatically the dialog
   * - autoDelete: true / false (default), remove automatically the html associated to the dialog
   * - fixedHeight: true / false (default), force "full" height otherwise can be smaller
   * - bigSize: true / false (default), width 90% on big screen
   * - fullSize: true / false (default), width 99% on big screen
   * - fullScreenOnSmartphone: true / false (default), activate the full screen on smartphone
   *
   * Return the div name of the dialog
   */
  var initialize = function (selector, attributes) {
    if (attributes == null)
      attributes = {};

    // Create a new dialog
    var id = _createDialog(attributes);

    // Add a page
    addPage('#customDialog' + id, selector);

    return 'customDialog' + id;
  };

  var setAttribute = function (selector, key, value) {
    // Id of the dialog
    var id = _dataManager.getId(selector);

    // Update data
    var attributes = _dataManager.get(id)['attributes'];
    attributes[key] = value;
    _dataManager.set(id, 'attributes', attributes);

    // Possibly update the title
    if (key == 'title') {
      $('#customDialog' + id + ' .customDialogTitle').html(value);
    }
  };

  // Open common dialogs (info, warning, error, question)
  var _addCommonPage = function (id, message, icon) {
    var dialogId = 'customDialog' + id;
    var pageId = dialogId + 'content';
    $('body').append(
      "<div id='" + pageId + "'>" +
      "<div class='customDialogIcon customDialogIcon" + icon + "'></div>" +
      "<div class='customDialogMessage'>" + message + '</div>' +
      '</div>');
    addPage('#' + dialogId, '#' + pageId);

    // Keep after addPage to kkep color
    pulseSvg.inlineBackgroundSvg('#' + pageId + ' .customDialogIcon');
  };

  /*
  * Open a prepared dialog
  * selector: the div containing the dialog
  * knownDialogId : dialog id if known - else bug: open machine selection page twice => blur
  */
  var open = function (selector, knownDialogId) {
    _displayNavigation(selector);
    var id = _dataManager.getId(selector);
    var attributes = _dataManager.get(id)['attributes'];

    // Back to first page
    if (_dataManager.get(id)['currentPage'] > 0)
      _dataManager.set(id, 'currentPage', 0);
    _displayNavigation(selector);

    if (attributes['onOpen'] != null)
      attributes['onOpen']();
    $('#customDialog' + id).addClass('customDialogEnabled');

    // Adapt the position
    $('#customDialog' + id + ' .customDialogWindow').css('top', (($('#customDialog' + id + ' .customDialogShadow').height() - $('#customDialog' + id + ' .customDialogWindow').height()) * 0.3) + 'px');

    // Blur the previous dialog if not already done    
    if ('customDialog' + id != knownDialogId) {
      if (_openIds.length > 0) {
        $('#customDialog' + _openIds[_openIds.length - 1]).css('filter', 'blur(3px)');
      }
      else {
        // Blur behind the first dialog
        $('.pulse-header').css('filter', 'blur(2px)');
        $('#pulse-inner').css('filter', 'blur(2px)');
      }
      _openIds[_openIds.length] = id;
    }
  };

  /*
  * Open an info dialog.
  * It could be $.prompt BUT this one use Pomamo design.
  * message: message inside the window
  * title: title of the window
  * onClose: callback when the window is closed (ok or cancel)
  */
  var openInfo = function (message, title, onClose) {
    var id = _createDialog({
      title: (title == null ? 'Information' : title),
      cancelButton: 'hidden',
      previousButton: 'hidden',
      autoClose: true,
      autoDelete: true,
      onClose: onClose
    });
    _addCommonPage(id, message, 'Information');
    open('#customDialog' + id);

    return 'customDialog' + id;
  };

  /*
  * Open a warning dialog
  * message: message inside the window
  * title: title of the window
  * onClose: callback when the window is closed (ok or cancel)
  */
  var openWarning = function (message, title, onClose) {
    var id = _createDialog({
      title: (title == null ? 'Warning' : title),
      cancelButton: 'hidden',
      previousButton: 'hidden',
      autoClose: true,
      autoDelete: true,
      onClose: onClose
    });
    _addCommonPage(id, message, 'Warning');
    open('#customDialog' + id);
  };

  /*
  * Open an error dialog
  * message: message inside the window
  * title: title of the window
  * onClose: callback when the window is closed (ok or cancel)
  */
  var openError = function (message, title, onClose) {
    var id = _createDialog({
      title: (title == null ? 'Error' : title),
      cancelButton: 'hidden',
      previousButton: 'hidden',
      autoClose: true,
      autoDelete: true,
      onClose: onClose
    });
    _addCommonPage(id, message, 'Error');
    open('#customDialog' + id);
  };

  /*
  * Open a confirm dialog
  * message: message inside the window
  * title: title of the window
  * onOk: callback when "ok" is clicked
  * onCancel: callback when "cancel" is clicked
  */
  var openConfirm = function (message, title, onOk, onCancel) {
    var id = _createDialog({
      title: (title == null ? 'Confirmation' : title),
      autoClose: true,
      autoDelete: true,
      onOk: onOk,
      onCancel: onCancel
    });
    _addCommonPage(id, message, 'Question');
    open('#customDialog' + id);
  };

  /*
  * Open a loader
  * abortFunction: if set, the user can abort and this function is executed
  */
  var openLoader = function (abortFunction) {
    // Loader already open?
    var id; // To define id only once
    try {
      id = _dataManager.getId('#customDialogLoader');
      var dialogId = 'customDialog' + id;

      // Already open, just change the abort function
      var attributes = _dataManager.get(id)['attributes'];
      attributes['onCancel'] = abortFunction;
      attributes['cancelButton'] = (abortFunction == null ? 'hidden' : '');
      _dataManager.set(id, 'attributes', attributes);
      _displayNavigation('#' + dialogId);
      return;
    }
    catch (e) {
      //
    }

    // Create a new dialog with possibly a cancel button
    id = (abortFunction == null) ?
      _createDialog({
        title: 'Please wait...',
        cancelButton: 'hidden',
        previousButton: 'hidden',
        okButton: 'hidden',
        nextButton: 'hidden',
        closeButton: 'hidden',
        autoClose: true,
        autoDelete: true
      }) : _createDialog({
        title: 'Please wait...',
        previousButton: 'hidden',
        okButton: 'hidden',
        nextButton: 'hidden',
        closeButton: 'hidden',
        onCancel: abortFunction,
        autoClose: true,
        autoDelete: true
      });

    // Add a special class to this dialog
    $('#customDialog' + id).addClass('customDialogButtonRight');

    // Add content
    $('body').append(
      "<div id='customDialogLoader'>" +
      "<div class='customProgress' style='margin: 20px 10px'>" +
      "<div data-effect='slide-left' class='customProgressBar' role='progressbar' aria-valuenow='100' aria-valuemin='0' aria-valuemax='100' style='width: 100%; transition: all 0.7s ease-in-out 0s;'></div>" +
      '</div>' +
      '</div>');
    addPage('#customDialog' + id, '#customDialogLoader');

    // Open it
    open('#customDialog' + id);
  };

  /*
  * Close the loader
  */
  var closeLoader = function () {
    if ($('#customDialogLoader').length)
      close('#customDialogLoader');
  };

  /*
  * Close all dialogs
  */
  var closeAll = function () {
    $('.customDialog').each(function () { close('#' + this.id); });
  };

  /*
  * Close the last dialog
  */
  var closeLast = function () {
    if (_openIds.length > 0)
      cancel('#customDialog' + _openIds[_openIds.length - 1]);
  };

  // Connect the key "escape"
  $(document).keyup(function (e) {
    if (e.keyCode == 27)
      closeLast();
  });

  // List of exported functions
  return {
    cancel: cancel,
    close: close,
    ok: ok,
    previous: previous,
    next: next,
    goToPage: goToPage,
    addPage: addPage,
    initialize: initialize,
    setAttribute: setAttribute,
    open: open,
    openInfo: openInfo,
    openWarning: openWarning,
    openError: openError,
    openConfirm: openConfirm,
    openLoader: openLoader,
    closeLoader: closeLoader,
    closeAll: closeAll,
    closeLast: closeLast
  }
};

// Singleton: define global.singletonPulseCustomDialog if not set and return it in the exports
global.singletonPulseCustomDialog = global.singletonPulseCustomDialog || pulseCustomDialog();
module.exports = global.singletonPulseCustomDialog;
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"pulseSvg":"pulseSvg","pulseUtility":"pulseUtility"}],"pulseLogin":[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @file access login features.
 */

/**
* @module pulseLogin
* @requires pulseUtility
* NEVER ADD : pulseConfig here. pulseConfig can use pulseLogin.
*/
var pulseUtility = require('pulseUtility');
var eventBus = require('eventBus');

////////// ////////// ////////// //////////
// is login page = see in pulseConfig    //
////////// ////////// ////////// //////////

////////// ////////// //////////
// Access = get               //
////////// ////////// //////////

//var getLogin = 
exports.getLogin = function () {
  let login = pulseUtility.readCookie('PulseLogin');
  // Normal
  /*let name = 'PulseLogin=';
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }*/
  if (login == null)
    return '';
  else
    return login;
}

exports.getLoginDisplay = function () {
  let login = pulseUtility.readCookie('PulseUserDisplay');
  if (login == null)
    return '';
  else
    return login;
}

exports.getLoginForWebService = function () {
  let login = pulseUtility.readCookie('PulseLogin');
  if ((login == null)
    || (login == 'dev') || (login == 'support')
    || (login == 'Dev') || (login == 'Support'))
    return '';
  else
    return login;
}

//var getRole = 
exports.getRole = function () {
  // Find role in URL-> REMOVED !!!
  let role = pulseUtility.readCookie('PulseRole');
  if (role == null)
    return '';
  else
    return role;
}

exports.getAccessToken = function () {
  let token = pulseUtility.readCookie('PulseAccessToken');
  if (token == null)
    return '';
  else
    return token;
}
exports.getAccessTokenExpiration = function () {
  let token = pulseUtility.readCookie('PulseAccessTokenExpiredAt');
  if (token == null)
    return '';
  else
    return token;
}
exports.getRefreshToken = function () {
  let token = pulseUtility.readCookie('PulseRefreshToken');
  if (token == null)
    return '';
  else
    return token;
}
exports.getRefreshTokenExpiration = function () {
  let token = pulseUtility.readCookie('PulseRefreshTokenExpiredAt');
  if (token == null)
    return '';
  else
    return token;
}

////////// ////////// //////////
// Storage                    //
////////// ////////// //////////

var setAccessToken = exports.setAccessToken = function (access_token, expiredat) {
  if (access_token != null && access_token != '') {
    pulseUtility.createCookie('PulseAccessToken', access_token, 1);
    pulseUtility.createCookie('PulseAccessTokenExpiredAt', expiredat, 1);

    let target = {
      //url: url,
      //source: this.element.tagName,
      kind: 'AccessToken'
    };
    eventBus.EventBus.dispatchToAll('TokenHasChangedEvent', target);
  }
  else {
    pulseUtility.eraseCookie('PulseAccessToken');
    pulseUtility.eraseCookie('PulseAccessTokenExpiredAt');

    // No dispatch here, because goToPageLogin is always called just after
  }
}

var setRefreshToken = exports.setRefreshToken = function (refresh_token, expiredat) {
  if (refresh_token != null && refresh_token != '') {
    pulseUtility.createCookie('PulseRefreshToken', refresh_token, 1);
    pulseUtility.createCookie('PulseRefreshTokenExpiredAt', expiredat, 1);

    let target = {
      //url: url,
      //source: this.element.tagName,
      kind: 'RefreshToken'
    };
    eventBus.EventBus.dispatchToAll('TokenHasChangedEvent', target);
  }
  else {
    pulseUtility.eraseCookie('PulseRefreshToken');
    pulseUtility.eraseCookie('PulseRefreshTokenExpiredAt');

    // No dispatch here, because goToPageLogin is always called just after
  }
}

exports.storeRole = function (role) {
  pulseUtility.createCookie('PulseRole', role, 90);
  //document.cookie = 'PulseRole=' + role + ';path=/';
}

var storeLoginRole =
  exports.storeLoginRole = function (login, role, display, access_token, refresh_token,
    access_token_expiredat, refresh_token_expiredat, sessionOnly) {
    pulseUtility.createCookie('PulseLogin', login, sessionOnly?0:1);
    pulseUtility.createCookie('PulseRole', role, sessionOnly?0:1);
    //document.cookie = 'PulseLogin=' + login + ';path=/';
    //document.cookie = 'PulseRole=' + role + ';path=/'; // == storeRole(role);
    pulseUtility.createCookie('PulseUserDisplay', display, sessionOnly?0:1);

    setAccessToken(access_token, access_token_expiredat);
    setRefreshToken(refresh_token, refresh_token_expiredat);
  }

exports.storeLoginRoleFromRefreshDTO = function (data, sessionOnly) {
  let login = data.Login;
  let role = data.Role;
  role = role.toLowerCase();
  let display = data.UserDisplay; // from v 12
  if ( pulseUtility.isNotDefined(display) ) {
    display = data.UserName;
  }
  let access_token = data.AccessToken;
  // data.CompanyId
  let access_token_expiredat = data.ExpiresAt;
  let refresh_token = data.RefreshToken;
  let refresh_token_expiredat = data.RefreshTokenExpiresAt;

  storeLoginRole(login, role, display, access_token, refresh_token,
    access_token_expiredat, refresh_token_expiredat, sessionOnly);
}

////////// ////////// //////////
// Clean storage              //
////////// ////////// //////////

// goToPageLogin is always called just after
exports.cleanLoginRole = function () {
  pulseUtility.eraseCookie('PulseLogin');
  pulseUtility.eraseCookie('PulseRole');
  //document.cookie = 'PulseLogin=' + ';path=/';
  //document.cookie = 'PulseRole=' + ';path=/';
  pulseUtility.eraseCookie('PulseUserDisplay');
  setAccessToken('');
  setRefreshToken('');
}

////////// ////////// //////////
// Expiration                 //
////////// ////////// //////////

exports.isTokenExpired = function () {
  let refresh_token_expiration = pulseUtility.readCookie('PulseAccessTokenExpiredAt');
  if (refresh_token_expiration == null) {
    return true;
  }
  else {
    let m_expir = moment(refresh_token_expiration);
    let now = moment();
    if (now.isAfter(m_expir)) {
      return true;
    }
    else {
      return false;
    }
  }
}

/* Nearly expired */
var tokenNeedRefresh = exports.tokenNeedRefresh = function () {
  let refresh_token_expiration = pulseUtility.readCookie('PulseAccessTokenExpiredAt');
  if (refresh_token_expiration == null) {
    return false;
  }
  else {
    let m_expir = moment(refresh_token_expiration);
    let inXmin = moment().add(5, 'minutes');

    if (inXmin.isAfter(m_expir)) {
      return true;
    }
    else {
      return false;
    }
  }
}

////////// ////////// //////////
// Renew token = refresh      //
////////// ////////// //////////

var refreshToken = exports.refreshToken = function () {
  let target = {
    //url: url,
    //source: this.element.tagName,
    message: 'Authentication Error. Please retry'
  };
  eventBus.EventBus.dispatchToAll('AuthorizationErrorEvent', target);
}

exports.refreshTokenIfNeeded = function () {
  if (tokenNeedRefresh()) {
    refreshToken();
  }
}

////////// ////////// //////////
// Authentication / Validate  //
////////// ////////// //////////

exports.cleanAuthentication = function () {
  pulseUtility.eraseCookie('AuthenticationKind');
  pulseUtility.eraseCookie('AuthenticationName');
  pulseUtility.eraseCookie('AuthenticationLogin');
  pulseUtility.eraseCookie('AuthenticationState');
}

exports.storeAuthentication = function (AuthenticationKind,
  AuthenticationName, StateRequired, login) {
  pulseUtility.createCookie('AuthenticationKind', AuthenticationKind, 1);
  pulseUtility.createCookie('AuthenticationName', AuthenticationName, 1);
  pulseUtility.createCookie('AuthenticationLogin', login, 1);
  if ("true" == StateRequired) {
    let max = 4000000000; // max integer
    let state = Math.floor(Math.random() * max);
    pulseUtility.createCookie('AuthenticationState', state, 1);
  }
  else {
    pulseUtility.createCookie('AuthenticationState', '', 1);
  }
}

exports.getAuthenticationKind = function () {
  let auth = pulseUtility.readCookie('AuthenticationKind');
  if (auth == null)
    return '';
  else
    return auth;
}

exports.getAuthenticationName = function () {
  let auth = pulseUtility.readCookie('AuthenticationName');
  if (auth == null)
    return '';
  else
    return auth;
}

exports.getAuthenticationLogin = function () {
  let auth = pulseUtility.readCookie('AuthenticationLogin');
  if (auth == null)
    return '';
  else
    return auth;
}

exports.getAuthenticationState = function () {
  let auth = pulseUtility.readCookie('AuthenticationState');
  if (auth == null)
    return '';
  else
    return auth;
}

////////// ////////// //////////
// END                        //
////////// ////////// //////////


},{"eventBus":"eventBus","pulseUtility":"pulseUtility"}],"pulseRange":[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @file Module to manipulate ranges
 * @module pulseRange
 **/

/* FOR better understanding : Separate comment - hope it is not parsed
 * 
 * // Between x-tag == attribute + event + sent to web services
 * rangeString = '[isostring, isostring)'
 * 
 * // Tmp for compatibility
 * stringRange.lower = isostring 
 * stringRange.upper = isostring 
 * 
 * // Intern use only
 * dateRange.lower = Date()
 * dateRange.upper = Date()
 * 
 * // Conversion / Creation
 * pulseRange.createDateRangeFromString
 * pulseRange.createStringRangeFromString
 * pulseUtility.createSingleRangeForWebService
 * 
 * // Use :
 * pulseUtility.convertDateRangeForWebService
 * 
 */

/**
 * Generic class range
 *
 * @class
 */
class Range {
  /**
   * Constructor: create an empty range
   */
  constructor() {
    this._lower = null;
    this._lowerInclusive = false;
    this._upper = null;
    this._upperInclusive = false;
    this._empty = true;
  }

  /**
   * Lower value of the range
   * 
   * If the range is empty, an exception 'empty range' is raised
   */
  get lower () {
    if (this._empty) {
      console.error('Range.lower: empty range');
      throw 'empty range';
    }
    return this._lower;
  }
  set lower (l) {
    this._lower = l;
    if (this._lower == null) {
      this._lowerInclusive = false;
    }
    this._empty = false;
  }

  /** 
   * Is the lower value inclusive ?
   * 
   * If the range is empty, false is returned
   */
  get lowerInclusive () {
    return !this._empty && (this._lower != null) && this._lowerInclusive;
  }
  set lowerInclusive (li) {
    this._lowerInclusive = li;
  }

  /**
   * Upper value of the range
   * 
   * If the range is empty, an exception 'empty range' is raised
   */
  get upper () {
    if (this._empty) {
      console.error('Range.upper: empty range');
      throw 'empty range';
    }
    return this._upper;
  }
  set upper (u) {
    this._upper = u;
    if (this._upper == null) {
      this._upperInclusive = false;
    }
    this._empty = false;
  }

  /** 
   * Is the upper value inclusive ?
   * 
   * If the range is empty, false is returned
   */
  get upperInclusive () {
    return !this._empty && (this._upper != null) && this._upperInclusive;
  }
  set upperInclusive (ui) {
    this._upperInclusive = ui;
  }

  /** Inclusivity: [] or () or [) or (]
   * 
   * @return {string}
   */
  get inclusivity () {
    let s;
    if (this.lowerInclusive) {
      s = '[';
    }
    else {
      s = '(';
    }
    if (this.upperInclusive) {
      s += ']';
    }
    else {
      s += ')';
    }
    return s;
  }

  /** Set the inclusivity parsing a string: '(' and ')' is for exclusive, '[' and ']' is for inclusive
   * @param {string} inclusivity - Inclusivity string to parse: [] or [) or (] or ()
   */
  parseInclusivity (inclusivity) {
    if (inclusivity.length != 2) {
      console.error(`parseInclusivity: invalid inclusivity ${inclusivity}`);
      throw 'Invalid inclusivity'
    }
    switch (inclusivity.charAt(0)) {
      case '[':
        this._lowerInclusive = true;
        break;
      case '(':
        this._lowerInclusive = false;
        break;
      default:
        console.error(`parseInclusivity: invalid lower inclusivity in ${inclusivity}`);
        throw 'Invalid inclusivity';
    }
    switch (inclusivity.charAt(1)) {
      case ']':
        this._upperInclusive = true;
        break;
      case ')':
        this._upperInclusive = false;
        break;
      default:
        console.error(`parseInclusivity: invalid upper inclusivity in ${inclusivity}`);
        throw 'Invalid inclusivity';
    }
  }

  /** Is the range empty
   * @return {boolean} The range is empty
   */
  isEmpty () {
    if (this._empty) {
      return true;
    }
    else if (this._upper != null && this._lower != null) {
      if (this._upper < this._lower) {
        return true;
      }
      else if (this._upper == this._lower && (!this._upperInclusive || !this._lowerInclusive)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Callback to convert an object to a string
   * 
   * @callback toStringCallback
   * @param {Object} - Object to convert
   * @return {string} Result
   */

  /** To string conversion
   * @param {toStringCallback} boundToString - method to call to convert the lower or upper value to a string
   * @return {string}
   */
  toString (boundToString) {
    if (this.isEmpty()) {
      return 'empty';
    }
    else {
      return `${this.lowerInclusive ? '[' : '('}${(this.lower != null) ? boundToString(this.lower) : ''},${(this.upper != null) ? boundToString(this.upper) : ''}${!this.upperInclusive ? ')' : ']'}`;
    }
  }
}

/** Create an empty range
 * 
 * @memberof module:pulseRange
 * @function createEmpty
 * 
 * @return {Range} empty range
 */
var createEmpty = exports.createEmpty = function () {
  return new Range();
}

/** Create a range with the default inclusivity [)
 * 
 * @memberof module:pulseRange
 * @function createDefaultInclusivity
 * 
 * @param {*} lower - Lower value
 * @param {*} upper - Upper value
 * @return {Range} Range
 */
var createDefaultInclusivity = exports.createDefaultInclusivity = function (lower, upper) {
  let r = new Range();
  r.lower = lower;
  r.upper = upper;
  r.lowerInclusive = true;
  r.upperInclusive = false;
  return r;
}

/** Create a range
 * 
 * @memberof module:pulseRange
 * @function create
 * 
 * @param {*} lower - Lower value
 * @param {*} upper - Upper value
 * @param {string} inclusivity - Inclusivity: () or [] or [) or (]
 * @return {Range} Range
 */
var create = exports.create = function (lower, upper, inclusivity) {
  let r = new Range();
  r.lower = lower;
  r.upper = upper;
  r.parseInclusivity(inclusivity);
  return r;
}

/** Callback to parse a string
 * 
 * @callback parseCallback
 * @param {string} - string to parse
 * @return {Object} new object
 */

/** Extended method to parse a bound, considering null values
 * 
 * @param {string} arg - string to parse
 * @param {parseCallback} parseBound - Function to call to parse not empty lower and upper values
 * @return {Object} object returned by parseBound
 */
var parseBoundExt = function (arg, parseBound) {
  let s = arg.trim();
  if ((s.length == 0) || (s == '-oo') || (s == '+oo')) {
    return null;
  }
  else {
    return parseBound(s);
  }
}

/** Create a range from a string (parse it)
 * 
 * @memberof module:pulseRange
 * @function _createFromString
 * 
 * @param {string} arg - string to parse
 * @param {parseCallback} parseBound - Function to call to parse the lower and the upper values
 * @return {Range} Range
 */
var _createFromString =
  //exports.createFromString = 
  function (arg, parseBound) {
    let s = arg.trim();

    if (s == '' || s == 'empty') {
      return createEmpty();
    }

    if (s.length < 3) {
      console.error(`createFromString: ${s} is too short`);
      throw 'Invalid string length';
    }

    let pos = s.indexOf(',');
    if (pos == -1) {
      pos = s.indexOf(';');
    }
    if (pos == -1) {
      console.error('no separator');
      throw 'Invalid range, no separator';
    }
    else { // pos != -1
      let r = new Range();
      let lowerLimitChars = ['[', '('];
      let firstChar = s.charAt(0);
      if (lowerLimitChars.indexOf(firstChar) != -1) { // char found
        r.lowerInclusive = (firstChar == '[');
        let lower = s.substr(1, pos - 1);
        r.lower = parseBoundExt(lower, parseBound);
      }
      else {
        console.warn('Invalid lower limit in ' + arg);
        r.lowerInclusive = true;
        let lower = s.substr(0, pos).trim();
        r.lower = parseBoundExt(lower, parseBound);
      }
      let upperLimitChars = [']', ')'];
      let lastChar = s.charAt(s.length - 1);
      if (upperLimitChars.indexOf(lastChar) != -1) { // char found
        r.upperInclusive = (lastChar == ']');
        let upper = s.substr(pos + 1, s.length - 1 - (pos + 1));
        r.upper = parseBoundExt(upper, parseBound);
      }
      else {
        console.warn('Invalid upper limit in ' + arg);
        r.upperInclusive = false;
        let upper = s.substr(pos + 1, s.length - (pos + 1));
        r.upper = parseBoundExt(upper, parseBound);
      }
      return r;
    }
  }

/** Range where the bounds are native Javascript dates
 * 
 * @extends Range
 */
class DateRange extends Range {
  /** Constructor: create a DateRange from a string Range or a Date range
   * 
   * @override
   * 
   * @param {Range} r - Range to convert to a DateRange
   */
  constructor(r) {
    super();
    if (!r.isEmpty()) {
      let l;
      if (typeof r.lower == 'undefined') {
        l = null;
      }
      else if (typeof r.lower == 'string') {
        let trimmed = r.lower.trim();
        if ((trimmed == '') || (trimmed == '-oo')) {
          l = null;
        }
        else {
          l = new Date(r.lower);
        }
      }
      else {
        l = r.lower;
      }
      let u;
      if (typeof r.upper == 'undefined') {
        u = null;
      }
      else if (typeof r.upper == 'string') {
        let trimmed = r.upper.trim();
        if ((trimmed == '') || (trimmed == '+oo')) {
          u = null;
        }
        else {
          u = new Date(r.upper);
        }
      }
      else {
        u = r.upper;
      }
      super.lower = l;
      super.upper = u;
      super.lowerInclusive = r.lowerInclusive;
      super.upperInclusive = r.upperInclusive;
    }
  }
}

/** Create a native Javascript Date range from a string (calling new Date ())
 * 
 * @memberof module:pulseRange
 * @function createDateRangeFromString
 * 
 * @param {string} arg - String to parse
 * @return {DateRange} Range
 */
var createDateRangeFromString = exports.createDateRangeFromString = function (arg) {
  return new DateRange(_createFromString(arg, s => new Date(s)));
}

/** Create a native Javascript Date range with the default inclusivity
 * [) in case lower and upper are different and [] in case lower and upper are the same
 * 
 * In case lower or upper is a string, they are automatically converted to a Date
 * 
 * @memberof module:pulseRange
 * @function createDateRangeDefaultInclusivity
 * 
 * @param {string|Date} lower - Lower value
 * @param {string|Date} upper - Upper value
 * @return {DateRange} Range
 */
exports.createDateRangeDefaultInclusivity = function (lower, upper) {
  let l;
  if ((typeof lower == 'undefined') || (lower == 'null')) {
    l = null;
  }
  else if (typeof lower == 'string') {
    let trimmed = lower.trim();
    if ((trimmed == '') || (trimmed == '-oo')) {
      l = null;
    }
    else {
      l = new Date(lower);
    }
  }
  else {
    l = lower;
  }
  let u;
  if ((typeof upper == 'undefined') || (upper == 'null')) {
    u = null;
  }
  else if (typeof upper == 'string') {
    let trimmed = upper.trim();
    if ((trimmed == '') || (trimmed == '+oo')) {
      u = null;
    }
    else {
      u = new Date(upper);
    }
  }
  else {
    u = upper;
  }
  if ((l >= u) && (l <= u)) {
    return new DateRange(create(l, u, '[]'));
  }
  else {
    return new DateRange(create(l, u, '[)'));
  }
}

/** Create a native Javascript Date range
 * 
 * In case lower or upper is a string, they are automatically converted to a Date
 * 
 * @memberof module:pulseRange
 * @function createDateRange
 * 
 * @param {string|Date} lower - Lower value
 * @param {string|Date} upper - Upper value
 * @param {string} inclusivity - Inclusivity: [] or () or [) or (]
 * @return {DateRange} Range
 */
exports.createDateRange = function (lower, upper, inclusivity) {
  return new DateRange(create(lower, upper, inclusivity));
}

/** Convert a string or Date range to a Date range
 * 
 * @memberof module:pulseRange
 * @function convertToDateRange
 * 
 * @param {Range} range - string or Date range
 * @return {DateRange} Date range
 */
exports.convertToDateRange = function (range) {
  if (typeof range == 'string')
    return createDateRangeFromString(range);
  return new DateRange(range);
}

/** Range where the bounds are strings
 * 
 * @extends Range
 */
class StringRange extends Range {
  /** Constructor: create a StringRange from a Range
   * 
   * @override
   * 
   * @param {Range} r - Range to convert to a StringRange
   */
  constructor(r) {
    super();
    if (!r.isEmpty()) {
      let l;
      if (typeof r.lower == 'undefined') {
        l = null;
      }
      else if (typeof r.lower == 'string') {
        let trimmed = r.lower.trim();
        if ((trimmed == '') || (trimmed == '-oo')) {
          l = null;
        }
        else {
          l = r.lower;
        }
      }
      else if (r.lower == null) {
        l = null;
      }
      else {
        l = r.lower.toString();
      }
      let u;
      if (typeof r.upper == 'undefined') {
        r = null;
      }
      else if (typeof r.upper == 'string') {
        let trimmed = r.upper.trim();
        if ((trimmed == '') || (trimmed == '+oo')) {
          u = null;
        }
        else {
          u = r.upper;
        }
      }
      else if (r.upper == null) {
        u = null;
      }
      else {
        u = r.upper.toString();
      }
      super.lower = l;
      super.upper = u;
      super.lowerInclusive = r.lowerInclusive;
      super.upperInclusive = r.upperInclusive;
    }
  }
}

/** Create a string range (no conversion of the lower and upper values)
 * 
 * @memberof module:pulseRange
 * @function createStringRangeFromString
 * 
 * @param {string} arg - String to parse
 * @return {StringRange} range
 */
exports.createStringRangeFromString = function (arg) {
  return new StringRange(_createFromString(arg, s => s));
}

/** Callback to compare two objects
 * 
 * @callback eqCallback
 * @param {Object} - first object
 * @param {Object} - second object
 * @return {boolean} Equality comparison between the two objects
 */

/** Check the equality between two bound objects
  * 
  * Note that the bounds must be both lower or both upper
  * 
  * @memberof module:pulseRange
  * @function boundEquals
  * 
 * @param {Object} a - First bound to compare
 * @param {Object} b - Second bound to compare
 * @param {eqCallback} eq - Method to use to compare the bounds in case they are not null
 * @return {boolean} Equality
  */
var boundEquals = exports.boundEquals = function (a, b, eq) {
  if (null == a) {
    return (null == b);
  }
  else if (null == b) {
    return false;
  }
  else { // x and y not null
    return eq(a, b);
  }
}

/** Check the equality of the range
 * 
 * @memberof module:pulseRange
 * @function equals
 * 
 * @param {Range} a - First range to compare
 * @param {Range} b - Second range to compare
 * @param {eqCallback} eq - Method to use to compare the lower and upper values (when not null)
 * @return {boolean} Equality
 */
var equals = exports.equals = function (a, b, eq) {
  if (a === b) {
    return true;
  }
  if ((null == a) && (null == b)) {
    return true;
  }
  if ((null == a) || (null == b)) {
    return false;
  }
  if (a.isEmpty() && b.isEmpty()) {
    return true;
  }
  else if (a.isEmpty() || b.isEmpty()) {
    return false;
  }
  return boundEquals(a.lower, b.lower, eq) && boundEquals(a.upper, b.upper, eq)
    && (a.lowerInclusive == b.lowerInclusive)
    && (a.upperInclusive == b.upperInclusive);
}

/** Check the equality of the range with a default value equality comparison (>= && <=)
 * 
 * @param {Range} a - First range to compare
 * @param {Range} b - Second range to compare
 * @return {boolean} Equality
 */
exports.equalsDefault = function (a, b) {
  return equals(a, b, (a, b) => (a >= b) && (b <= a)); // Because for native javascript Date, a==b does not work
}

/** Overlap operator
 * 
 * If the operator can't be applied, false is returned
 * 
 * @memberof module:pulseRange
 * @function overlaps
 * 
 * @param {Range} a - first range
 * @param {Range} b - second range
 * @return true if a and b overlap
 */
var overlaps = exports.overlaps = function (a, b) {
  if (a.isEmpty() || b.isEmpty()) {
    console.warn('overlaps: empty, return false');
    return false;
  }
  else if ((null == a.lower) && (null == a.upper)) { // (,) => true
    return true;
  }
  else if (null == a.lower) { // (,... => compare upper only
    if (null == b.lower) {
      return true;
    }
    else if ((a.upper >= b.lower) && (a.upper <= b.lower)) { // Consider inclusivity. // Note: == does not work with Date
      return b.lowerInclusive && a.upperInclusive;
    }
    else if (b.lower < a.upper) {
      return true;
    }
    else {
      return false;
    }
  }
  else if (null == a.upper) { // ...,) => compare lower only
    if (null == b.upper) {
      return true;
    }
    if (a.lower < b.upper) {
      return true;
    }
    else if ((a.lower >= b.upper) && (a.lower <= b.upper)) { // Consider inclusivity. // Note: == does not work with Date
      return b.upperInclusive && a.lowerInclusive;
    }
    else {
      return false;
    }
  }
  else { // [(...,...)]
    if ((null != b.upper) && (null != b.lower)) {
      if ((b.lower >= a.upper) && (b.lower <= a.upper)) { // Note: == does not work with Date
        return b.lowerInclusive && a.upperInclusive;
      }
      else if ((b.upper >= a.lower) && (b.upper <= a.lower)) { // Note: == does not work with Date
        return b.upperInclusive && a.lowerInclusive;
      }
      else {
        return (b.lower < a.upper) && (a.lower < b.upper);
      }
    }
    else { // Reverse it ! In b, there is -oo or +oo
      return overlaps(b, a);
    }
  }
}

/** Intersects two ranges
 * 
 * @memberof module:pulseRange
 * @function intersects
 * 
 * @param {Range} a - first range
 * @param {Range} b - second range
 * @return {Range} Intersection of the two ranges
 */
exports.intersects = function (a, b) {
  if (!overlaps(a, b)) {
    // toString(no param) == undefined -> ignore log
    return createEmpty();
  }
  else { // Overlap ok
    let lower;
    let lowerInclusive;
    if (null == a.lower) {
      lower = b.lower;
      lowerInclusive = b.lowerInclusive;
    }
    else if (null == b.lower) {
      lower = a.lower;
      lowerInclusive = a.lowerInclusive;
    }
    else if ((a.lower >= b.lower) && (a.lower <= b.lower)) { // Note: == does not work with Date
      lower = a.lower;
      lowerInclusive = a.lowerInclusive && b.lowerInclusive;
    }
    else if (a.lower < b.lower) {
      lower = b.lower;
      lowerInclusive = b.lowerInclusive;
    }
    else {
      lower = a.lower;
      lowerInclusive = a.lowerInclusive
    }

    let upper;
    let upperInclusive;
    if (null == a.upper) {
      upper = b.upper;
      upperInclusive = b.upperInclusive;
    }
    else if (null == b.upper) {
      upper = a.upper;
      upperInclusive = a.upperInclusive;
    }
    else if ((a.upper >= b.upper) && (a.upper <= b.upper)) { // Note: == does not work with Date
      upper = a.upper;
      upperInclusive = a.upperInclusive && b.upperInclusive;
    }
    else if (a.upper < b.upper) {
      upper = a.upper;
      upperInclusive = a.upperInclusive;
    }
    else {
      upper = b.upper;
      upperInclusive = b.upperInclusive;
    }

    let r = createDefaultInclusivity(lower, upper);
    r.lowerInclusive = lowerInclusive;
    r.upperInclusive = upperInclusive;
    return r;
  }
}
},{}],"pulseService":[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @file Access web/asp services
 */

/**
* @module pulseService
* @requires pulseUtility
* @requires pulseLogin
*/

var pulseLogin = require('pulseLogin');

/**
 * Method to call an Ajax request (without token)
 *
 * @memberof module:pulseService
 *
 * @function runAjaxSimple
 * 
 * == without token
 *
 * @param {string} url url used by ajax request
 * @param {function} success callback function called if the request is successful and returns a valid data
 * @param {function} error callback function called if the request is completed but an error data is returned
 * @param {function} fail callback function called in case of request failure. First argument is the URL, second argument is if it is because of a timeout, third argument is the status
 * @param {Number} timeout Timeout in ms
 */
exports.runAjaxSimple = function (url, success, error, fail, timeout) {
  if (typeof url === 'undefined') {
    console.error('runAjaxSimple: no valid url');
    if (fail) {
      fail(url, false, null);
    }
    return;
  }
  $.support.cors = true;
  if ("" != pulseLogin.getAccessToken()) {
    $.ajax(
      {
        crossDomain: true,
        cache: false, /* for IE */
        type: 'GET',
        url: url,
        timeout: ((timeout == undefined) || (timeout == null) || (!isInteger(timeout))) ? 4 * 60 * 1000 : timeout, // default timeout = 4 min
        dataType: 'json',
        headers: {
          'Authorization': 'Bearer ' + pulseLogin.getAccessToken()
        }
      }
    )
      .done(function (data, textStatus, jqXHR) {
        if (data.ErrorMessage) {
          console.error(`runAjax: error, url=${url} message=${data.ErrorMessage}`);
          if (error) {
            error(data);
          }
        }
        else {
          console.log(`runAjax: success, url=${url}`);
          if (success) {
            success(data);
          }
        }
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        console.error(`runAjax: failure, url=${url} textStatus=${textStatus}`);
        if (fail) {
          if (textStatus == 'timeout') {
            fail(url, true, jqXHR.status);
          }
          else {
            fail(url, false, jqXHR.status);
          }
        }
      });
  }
  else {
    $.ajax(
      {
        crossDomain: true,
        cache: false, /* for IE */
        type: 'GET',
        url: url,
        timeout: ((timeout == undefined) || (timeout == null) || (!isInteger(timeout))) ? 4 * 60 * 1000 : timeout, // default timeout = 4 min
        dataType: 'json'
      }
    )
      .done(function (data, textStatus, jqXHR) {
        if (data.ErrorMessage) {
          console.error(`runAjax: error, url=${url} message=${data.ErrorMessage}`);
          if (error) {
            error(data);
          }
        }
        else {
          console.log(`runAjax: success, url=${url}`);
          if (success) {
            success(data);
          }
        }
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        console.error(`runAjax: failure, url=${url} textStatus=${textStatus}`);
        if (fail) {
          if (textStatus == 'timeout') {
            fail(url, true, jqXHR.status);
          }
          else {
            fail(url, false, jqXHR.status);
          }
        }
      });
  }
} // runAjaxSimple


/**
 * Utility method to call an Ajax request
 *
 * @memberof module:pulseService
 *
 * @function runAjax
 *
 * @param {Number} token Token to check a callback corresponds to the request
 * @param {string} url url used by ajax request
 * @param {Number} timeout Timeout in ms
 * @param {function} success callback function called if the request is successful and returns a valid data
 * @param {function} error callback function called if the request is completed but an error data is returned
 * @param {function} fail callback function called in case of request failure. First argument is the URL, second argument is if it is because of a timeout, third argument is the status
 */
exports.runAjax = function (token, url, timeout, success, error, fail) {
  if (typeof url === 'undefined') {
    console.error(`runAjax(${token}): no valid url`);
    if (fail) {
      fail(token, url, false, null);
    }
    return;
  }
  $.support.cors = true;
  if ("" != pulseLogin.getAccessToken()) {
    $.ajax(
      {
        crossDomain: true,
        cache: false, /* for IE */
        type: 'GET',
        url: url,
        timeout: ((timeout == undefined) || (timeout == null) || (!isInteger(timeout))) ? 4 * 60 * 1000 : timeout, // default timeout = 4 min
        dataType: 'json',
        headers: {
          'Authorization': 'Bearer ' + pulseLogin.getAccessToken()
        }
      }
    )
      .done(function (data, textStatus, jqXHR) {
        if (data.ErrorMessage) {
          console.error(`runAjax(${token}): error, url=${url} message=${data.ErrorMessage}`);
          if (error) {
            error(token, data);
          }
        }
        else {
          console.log(`runAjax(${token}): success, url=${url}`);
          if (success) {
            success(token, data);
          }
        }
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        console.error(`runAjax(${token}): failure, url=${url} textStatus=${textStatus}`);
        if (fail) {
          if (textStatus == 'timeout') {
            fail(token, url, true, jqXHR.status);
          }
          else {
            fail(token, url, false, jqXHR.status);
          }
        }
      });
  }
  else {
    $.ajax(
      {
        crossDomain: true,
        cache: false, /* for IE */
        type: 'GET',
        url: url,
        timeout: ((timeout == undefined) || (timeout == null) || (!isInteger(timeout))) ? 4 * 60 * 1000 : timeout, // default timeout = 4 min
        dataType: 'json'
      }
    )
      .done(function (data, textStatus, jqXHR) {
        if (data.ErrorMessage) {
          console.error(`runAjax(${token}): error, url=${url} message=${data.ErrorMessage}`);
          if (error) {
            error(token, data);
          }
        }
        else {
          console.log(`runAjax(${token}): success, url=${url}`);
          if (success) {
            success(token, data);
          }
        }
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        console.error(`runAjax(${token}): failure, url=${url} textStatus=${textStatus}`);
        if (fail) {
          if (textStatus == 'timeout') {
            fail(token, url, true, jqXHR.status);
          }
          else {
            fail(token, url, false, jqXHR.status);
          }
        }
      });
  }
}

/**
 * Utility method to get Ajax message for user display
 *
 * @memberof module:pulseService
 *
 * @function getAjaxErrorMessage
 *
 * @param {Number} xhrStatus xhrStatus (cf run or post Ajax for details)
 * @return {String} message to be displayed
 */
exports.getAjaxErrorMessage = function (xhrStatus) {
  if (typeof xhrStatus === 'undefined') {
    return 'Empty XHR status';
  }
  else {
    let statusMessageMap = {
      '0': 'Not connected, check the network',
      '400': 'Bad request',
      '401': 'Unauthorised access',
      '403': 'Forbidden resource, cannot be accessed',
      '404': 'Requested page not found',
      '500': 'Internal Server Error',
      '501': 'Not implemented',
      '502': 'Bad Gateway or Proxy Error',
      '503': 'Service Unavailable',
      '504': 'Gateway Timeout',
      '520': 'Unknown Error'
    };
    let message = statusMessageMap[xhrStatus];
    if (typeof message === 'undefined') {
      message = `unknown status ${xhrStatus}`;
    }
    return message;
  }
}

/**
 * Utility method to call an Ajax request
 *
 * @memberof module:pulseService
 *
 * @function postAjax
 *
 * @param {Number} token Token to check a callback corresponds to the request
 * @param {string} url url used by ajax request
 * @param {json} jsonData jsonData to post
 * @param {Number} timeout Timeout in ms
 * @param {function} success callback function called if the request is successful and returns a valid data
 * @param {function} error callback function called if the request is completed but an error data is returned
 * @param {function} fail callback function called in case of request failure. First argument is the URL, second argument is if it is because of a timeout, third argument is the status
 */
exports.postAjax = function (token, url, jsonData, timeout, success, error, fail) {
  if (typeof url === 'undefined') {
    console.error(`postAjax(${token}): no valid url`);
    if (fail) {
      fail(token, url, false, null);
    }
    return;
  }
  $.support.cors = true;
  if ("" != pulseLogin.getAccessToken()) {
    $.ajax({
      crossDomain: true,
      cache: false, /* for IE */
      type: 'POST',
      url: url,
      timeout: ((timeout == undefined) || (timeout == null) || (!isInteger(timeout))) ? 4 * 60 * 1000 : timeout, // default timeout = 4 min
      contentType: 'text/plain', // should be 'application/json' but do not work at all
      dataType: 'json',
      data: JSON.stringify(jsonData),
      headers: {
        'Authorization': 'Bearer ' + pulseLogin.getAccessToken()
      }
    })
      .done(function (data, textStatus, jqXHR) {
        if (data.ErrorMessage) {
          console.error(`postAjax(${token}): error, url=${url} message=${data.ErrorMessage}`);
          if (error) {
            error(token, data);
          }
        }
        else {
          console.log(`postAjax(${token}): success, url=${url}`);
          if (success) {
            success(token, data);
          }
        }
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        console.error(`postAjax(${token}): failure, url=${url} textStatus=${textStatus}`);
        if (fail) {
          if (textStatus == 'timeout') {
            fail(token, url, true, jqXHR.status);
          }
          else {
            fail(token, url, false, jqXHR.status);
          }
        }
      });
  }
  else {
    $.ajax({
      crossDomain: true,
      cache: false, /* for IE */
      type: 'POST',
      url: url,
      timeout: ((timeout == undefined) || (timeout == null) || (!isInteger(timeout))) ? 4 * 60 * 1000 : timeout, // default timeout = 4 min
      contentType: 'text/plain', // should be 'application/json' but do not work at all
      dataType: 'json',
      data: JSON.stringify(jsonData)
    })
      .done(function (data, textStatus, jqXHR) {
        if (data.ErrorMessage) {
          console.error(`postAjax(${token}): error, url=${url} message=${data.ErrorMessage}`);
          if (error) {
            error(token, data);
          }
        }
        else {
          console.log(`postAjax(${token}): success, url=${url}`);
          if (success) {
            success(token, data);
          }
        }
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        console.error(`postAjax(${token}): failure, url=${url} textStatus=${textStatus}`);
        if (fail) {
          if (textStatus == 'timeout') {
            fail(token, url, true, jqXHR.status);
          }
          else {
            fail(token, url, false, jqXHR.status);
          }
        }
      });
  }
}


},{"pulseLogin":"pulseLogin"}],"pulseSvg":[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

var pulseUtility = require('pulseUtility');
var _svgNS = 'http://www.w3.org/2000/svg';

/**
 * Return _svgNS for unique global definition
 */
exports.get_svgNS = function () {
  return _svgNS;
}

/**
 * Create and return radial gradient def
 * to display stacklight
 *
 * @memberof module:pulseSvg
 * @function createRadialGradientDef
 *
 * @return pattern def
 */
exports.createRadialGradientDef = function (color, newId) {
  let def = document.createElementNS(_svgNS, 'defs');

  let stop0 = document.createElementNS(_svgNS, 'stop');
  stop0.setAttribute('offset', '0%');
  stop0.setAttribute('style', 'stop-color:#DFDFDF;stop-opacity:1');
  let stop1 = document.createElementNS(_svgNS, 'stop');
  stop1.setAttribute('offset', '100%');
  stop1.setAttribute('style', 'stop-color:' + color + ';stop-opacity:1');

  let gradient = document.createElementNS(_svgNS, 'radialGradient');
  gradient.setAttribute('id', newId);
  gradient.setAttribute('cx', '40%');
  gradient.setAttribute('cy', '40%');
  gradient.setAttribute('r', '30%'); // defaut 50 ?
  gradient.setAttribute('fx', '50%');
  gradient.setAttribute('fy', '40%'); //50
  gradient.appendChild(stop0);
  gradient.appendChild(stop1);

  def.appendChild(gradient);
  return def;
}

/**
 * Create and return pattern def
 * to display patterns for MOS and other bars
 *
 * @memberof module:pulseSvg
 * @function createPatternDef
 *
 * @return pattern def
 */
exports.createPatternDef = function (patternName, color, newName) {
  let def = document.createElementNS(_svgNS, 'defs');
  let pattern = document.createElementNS(_svgNS, 'pattern');
  pattern.setAttribute('id', newName);
  pattern.setAttribute('x', 6);
  pattern.setAttribute('y', 6);
  pattern.setAttribute('width', 10);
  pattern.setAttribute('height', 10);
  pattern.setAttribute('patternUnits', 'userSpaceOnUse');
  if (patternName.substring(0, 7) == 'circles') {
    //if ( patternName.startsWith('circles') ) { Removed because IE fails
    let size = patternName.substr(8);
    let circle = document.createElementNS(_svgNS, 'circle');
    circle.setAttribute('cx', size / 2);
    circle.setAttribute('cy', size / 2);
    circle.setAttribute('r', size / 2);
    circle.setAttribute('style', 'stroke: none; fill: ' + color);
    pattern.appendChild(circle);
  }
  if (patternName.substring(0, 4) == 'dots') {
    //if ( patternName.startsWith('dots') ) { Removed because IE fails
    let size = patternName.substr(5);
    let rect = document.createElementNS(_svgNS, 'rect');
    rect.setAttribute('x', 0);
    rect.setAttribute('y', 0);
    rect.setAttribute('width', size);
    rect.setAttribute('height', size);
    rect.setAttribute('style', 'stroke: none; fill: ' + color);
    pattern.appendChild(rect);
  }
  if (patternName.substring(0, 17) == 'horizontal-stripe') {
    //if ( patternName.startsWith('horizontal-stripe') ) { Removed because IE fails
    let size = patternName.substr(18);
    let rect = document.createElementNS(_svgNS, 'rect');
    rect.setAttribute('x', 0);
    rect.setAttribute('y', 0);
    rect.setAttribute('width', 10); // Full width
    rect.setAttribute('height', size);
    rect.setAttribute('style', 'stroke: none; fill: ' + color);
    pattern.appendChild(rect);
  }
  if (patternName.substring(0, 15) == 'vertical-stripe') {
    //if ( patternName.startsWith('vertical-stripe') ) { Removed because IE fails
    let size = patternName.substr(16);
    let rect = document.createElementNS(_svgNS, 'rect');
    rect.setAttribute('x', 0);
    rect.setAttribute('y', 0);
    rect.setAttribute('width', size);
    rect.setAttribute('height', 10); // Full width
    rect.setAttribute('style', 'stroke: none; fill: ' + color);
    pattern.appendChild(rect);
  }
  if (patternName.substring(0, 14) == 'diagonal-strip') {
    //if ( patternName.startsWith('diagonal-stripe') ) { Removed because IE fails
    let size = patternName.substr(16);
    let line = document.createElementNS(_svgNS, 'line');
    line.setAttribute('x1', 0);
    line.setAttribute('y1', 10);
    line.setAttribute('x2', 10);
    line.setAttribute('y2', 0);
    line.setAttribute('style', 'stroke:' + color + ';stroke-width:' + size);
    pattern.appendChild(line);
    let line2 = document.createElementNS(_svgNS, 'line');
    line2.setAttribute('x1', -10);
    line2.setAttribute('y1', 10);
    line2.setAttribute('x2', 10);
    line2.setAttribute('y2', -10);
    line2.setAttribute('style', 'stroke:' + color + ';stroke-width:' + size);
    pattern.appendChild(line2);
    let line3 = document.createElementNS(_svgNS, 'line');
    line3.setAttribute('x1', 0);
    line3.setAttribute('y1', 20);
    line3.setAttribute('x2', 20);
    line3.setAttribute('y2', 0);
    line3.setAttribute('style', 'stroke:' + color + ';stroke-width:' + size);
    pattern.appendChild(line3);
  }

  def.appendChild(pattern);
  return def;
}

/**
 * Create and return SVG simple rect
 *
 * @memberof module:pulseSvg
 * @function createRect
 *
 * @return SVG rect
 */
var createRect = exports.createRect = function (x, y, width, height, color, mainClass) {
  let svg = document.createElementNS(_svgNS, 'svg');
  svg.setAttribute('width', width);
  svg.setAttribute('height', height);

  // CREATE SVG rect
  let rect = document.createElementNS(_svgNS, 'rect');
  svg.appendChild(rect);
  if (x == null)
    x = 0;
  if (y == null)
    y = 0;
  rect.setAttribute('x', x);
  rect.setAttribute('y', y);
  rect.setAttribute('width', width);
  rect.setAttribute('height', height);
  if (color != null)
    rect.setAttribute('fill', color);
  if (mainClass != null)
    rect.setAttribute('class', mainClass);

  return svg;
}

/**
 * Create base SVG to insert others SVG elements
 *
 * @memberof module:pulseSvg
 *
 * @function createBase
 * 
 * @param {Integer} width  
 * @param {Integer} height  
 * @param {string} mainClass  class to set
 * @param {Integer} viewBoxWidth  optional
 * @param {Integer} viewBoxHeight  optional
 * @return {Object} SVG
 */
var createBase = exports.createBase = function (width, height, mainClass, viewBoxWidth, viewBoxHeight) {
  let svg = document.createElementNS(_svgNS, 'svg');
  svg.setAttribute('width', width);
  svg.setAttribute('height', height);
  svg.setAttribute('class', mainClass);
  if ((!pulseUtility.isNotDefined(viewBoxWidth)) &&
    (!pulseUtility.isNotDefined(viewBoxHeight))) {
    svg.setAttribute('viewBox', '0 0 '
      + viewBoxWidth + ' '
      + viewBoxHeight);
  }
  return svg;
}

/**
 *
 * Create SVG ellipse
 *
 * @memberof module:pulseSvg
 *
 * @function createEllipse
 * 
 * @param {Integer} xMiddle
 * @param {Integer} yMiddle
 * @param {Integer} xRadius
 * @param {Integer} yRadius
 * @param {String} mainClass  class to set
 
 * @returns {Object} SVG
 */
exports.createEllipse = function (xMiddle, yMiddle, xRadius, yRadius, mainClass) {
  let ellipse = document.createElementNS(_svgNS, 'ellipse');
  ellipse.setAttribute('cx', xMiddle);
  ellipse.setAttribute('cy', yMiddle);
  ellipse.setAttribute('rx', xRadius);
  ellipse.setAttribute('ry', yRadius);
  ellipse.setAttribute('class', mainClass);
  return ellipse;
}

/**
 * Create SVG circle
 *
 * @memberof module:pulseSvg
 *
 * @function createCircle
 * 
 * @param {Integer} xMiddle
 * @param {Integer} yMiddle
 * @param {Integer} radius
 * @param {string} fillColor
 * @param {string} mainClass  class to set
 * @param {string} strokeColor
 * @param {Integer} strokeWidth
 
 * @return {Object} SVG
 */
exports.createCircle = function (xMiddle, yMiddle, radius, fillColor, mainClass, strokeColor, strokeWidth) {
  let circle = document.createElementNS(_svgNS, 'circle');
  circle.setAttribute('cx', xMiddle);
  circle.setAttribute('cy', yMiddle);
  circle.setAttribute('r', radius);
  if (!pulseUtility.isNotDefined(fillColor)) {
    circle.setAttribute('fill', fillColor);
  }
  circle.setAttribute('class', mainClass);
  if (!pulseUtility.isNotDefined(strokeWidth)) {
    circle.setAttribute('stroke-width', strokeWidth);
  }
  if (!pulseUtility.isNotDefined(strokeColor)) {
    circle.setAttribute('stroke', strokeColor);
  }
  return circle;
}
/**
 * Create SVG segment on donut
 *
 * @memberof module:pulseSvg
 *
 * @function changeSegmentOnDonutEnd
 * to be called after createSegmentOnDonut to only change end position
 * 
 * @param {DOM} circleProgress
 * @param {Integer} radius
 * @param {Double} widthPercent percent for the segment length
 * @param {string} mainClass  class to set (optional)
 
 * @return {Object} SVG
 */
exports.
  changeSegmentOnDonutEnd = function (circleProgress, radius, widthPercent, mainClass) {
    let circumference = 2.0 * Math.PI * radius;
    if (widthPercent >= 0.0) { // Keep '<=' and not '<' only to allow progress
      circleProgress.setAttribute('stroke-dasharray',
        (circumference * widthPercent).toFixed(0) + ' ' +
        (circumference * (1.0 - widthPercent)).toFixed(0)); //'85 15');
    }

    if (mainClass)
      circleProgress.setAttribute('class', mainClass);

    return circleProgress;
  }

/**
 * Create SVG segment on donut
 *
 * @memberof module:pulseSvg
 *
 * @function createSegmentOnDonut
 * 
 * @param {Integer} xMiddle
 * @param {Integer} yMiddle
 * @param {Integer} radius
 * @param {string} fillColor
 * @param {string} mainClass  class to set
 * @param {string} strokeColor
 * @param {Integer} strokeWidth in %
 * @param {Double} beginPercent percent for the begin of the segment
 * @param {Double} widthPercent percent for the segment length
 
 * @return {Object} SVG
 */
exports.createSegmentOnDonut = function (xMiddle, yMiddle, radius, fillColor, mainClass,
  strokeColor, strokeWidth, beginPercent, widthPercent) {
  if (widthPercent < 0) {
    return null;
  }
  //let magicCircleRadius = 15.91549430918954;
  let circumference = 2.0 * Math.PI * radius; // == 100 if magicCircleRadius is used

  let circleProgress = document.createElementNS(_svgNS, 'circle');
  circleProgress.setAttribute('cx', xMiddle);
  circleProgress.setAttribute('cy', yMiddle);
  circleProgress.setAttribute('r', radius);
  if (!pulseUtility.isNotDefined(fillColor)) {
    circleProgress.setAttribute('fill', fillColor);
  }
  circleProgress.setAttribute('class', mainClass);
  if (!pulseUtility.isNotDefined(strokeColor)) {
    circleProgress.setAttribute('stroke', strokeColor);
  }
  circleProgress.setAttribute('stroke-width', strokeWidth);
  // 2*pi*R = 2*3.14*radius = 100
  if (widthPercent >= 0.0) { // Keep '<=' and not '<' only to allow progress
    circleProgress.setAttribute('stroke-dasharray',
      (circumference * widthPercent).toFixed(0) + ' ' +
      (circumference * (1.0 - widthPercent)).toFixed(0)); //'85 15');
    circleProgress.setAttribute('stroke-dashoffset',
      (circumference * (1.0 - beginPercent)).toFixed(0));
    // was 25 = on top (+100 to avoid <0)
    // now = 0 = on the right - need rotate (+100 to avoid <0)
  }

  return circleProgress;
}

/**
 * Create SVG line on a donut
 *
 * @memberof module:pulseSvg
 *
 * @function createLineOnDonut
 * 
 * @param {Integer} xMiddle
 * @param {Integer} yMiddle
 * @param {Integer} middleRadius
 * @param {Integer} externRadius
 * @param {Double} percentPosition
 * @param {string} color
 * @param {string} strokeWidth
 
 * @return {Object} SVG
 */
exports.createLineOnDonut = function (xMiddle, yMiddle, middleRadius, externRadius,
  percentPosition, color, width, dasharray) {
  let angle = (percentPosition - 0.25) * 2 * Math.PI;
  let aLine = document.createElementNS(_svgNS, 'line');
  aLine.setAttribute('x1', xMiddle + middleRadius * Math.cos(angle));
  aLine.setAttribute('y1', yMiddle + middleRadius * Math.sin(angle));
  aLine.setAttribute('x2', xMiddle + externRadius * Math.cos(angle));
  aLine.setAttribute('y2', yMiddle + externRadius * Math.sin(angle));
  aLine.setAttribute('stroke-width', width);
  if (!pulseUtility.isNotDefined(color)) {
    aLine.setAttribute('stroke', color);
  }
  if (!pulseUtility.isNotDefined(dasharray)) {
    aLine.setAttribute('stroke-dasharray', dasharray.toFixed(0));
  }
  return aLine;
}

/**
 * Create SVG style to rotate a dash circle.
 * Rotation from beginSeconds until 60sec (if increase) else until 0 sec
 *
 * @memberof module:pulseSvg
 *
 * @function createStyleDashCircleRotation
 * 
 * @param {jQuery} caller x-tag component
 * @param {Number} circleRadius radius
 * @param {Number} beginSeconds between 0 and 60
 */
exports.initFixedDashCircleDasharray =
  function (caller, circleRadius, beginSeconds) {
    let fullPathLength = 2 * Math.PI * circleRadius; // circumference
    caller.setAttribute('stroke-dasharray',
      (fullPathLength * beginSeconds / 60).toFixed(0) + ' '
      + (fullPathLength * (60 - beginSeconds) / 60).toFixed(0));
  }

/**
 * Create SVG style to rotate a dash circle.
 * Rotation from beginSeconds until 60sec (if increase) else until 0 sec
 *
 * @memberof module:pulseSvg
 *
 * @function createStyleDashCircleRotation
 * 
 * @param {jQuery} caller x-tag component
 * @param {string} keyFrameName
 * @param {Number} circleRadius radius
 * @param {Boolean} increase rotation direction
 * @param {Number} beginSeconds between 0 and 60
 */
exports.createStyleDashCircleRotation =
  function (caller, keyFrameName, beginSeconds, circleRadius, increase) {
    let fullPathLength = 2 * Math.PI * circleRadius; // circumference
    let style = document.createElement('style');
    style.type = 'text/css';
    /* RR - if one day we need dots to the left for negative values
    let keyFrames = '\
    @keyframes '+ keyFrameName +' {\
      from {\
        stroke-dasharray: '+fullPathLength*beginSeconds/60+' '
                           +fullPathLength*(60-beginSeconds)/60+';\
        stroke-dashoffset: '+fullPathLength*(1.25-(60-beginSeconds)/60)+';\
      }\
      to {\
        stroke-dasharray: '+fullPathLength+' 0;\
        stroke-dashoffset: '+fullPathLength*1.25+';\
      }\
    }';*/
    let keyFrames;
    if (increase) {
      keyFrames = '\
    @keyframes '+ keyFrameName + ' {\
      from {\
        stroke-dasharray: '+ (fullPathLength * beginSeconds / 60).toFixed(0) + ' '
        + (fullPathLength * (60 - beginSeconds) / 60).toFixed(0) + ';\
      }\
      to {\
        stroke-dasharray: '+ fullPathLength.toFixed(0) + ' 0;\
      }\
    }';
    }
    else {
      keyFrames = '\
    @keyframes '+ keyFrameName + ' {\
      from {\
        stroke-dasharray: '+ (fullPathLength * beginSeconds / 60).toFixed(0) + ' '
        + (fullPathLength * (60 - beginSeconds) / 60).toFixed(0) + ';\
      }\
      to {\
        stroke-dasharray: 0 ' + fullPathLength.toFixed(0) + ';\
      }\
    }';
    }
    style.innerHTML = keyFrames; //.replace(/A_DYNAMIC_VALUE/g, "180deg");
    caller.appendChild(style);
  }

/**
 * Create SVG style to animate a segment.
 * Rotation from fromWidth to toWidth
 *
 * @memberof module:pulseSvg
 *
 * @function createStyleForSegmentOnDonut
 * 
 * @param {jQuery} caller x-tag component
 * @param {string} keyFrameName
 * @param {Number} circleRadius radius in %
 * @param {Number} fromWidth segment width in %
 * @param {Number} toWidth segment width after animation
 * 
 * @return {Object} SVG style
 */
exports.createStyleForSegmentOnDonut =
  function (caller, keyFrameName, circleRadius, fromWidth, toWidth) {
    let circumference = 2 * Math.PI * circleRadius; // = full path length
    let style = document.createElement('style');
    style.type = 'text/css';

    let keyFrames = '\
  @keyframes '+ keyFrameName + ' {\
    from {\
      stroke-dasharray: '+ (circumference * fromWidth).toFixed(0) + ' '
      + (circumference * (1.0 - fromWidth)).toFixed(0) + ';\
    }\
    to {\
      stroke-dasharray: '+ (circumference * toWidth).toFixed(0) + ' '
      + (circumference * (1.0 - toWidth)).toFixed(0) + ';\
    }\
  }';
    style.innerHTML = keyFrames;
    caller.appendChild(style);

    //console.log('CycleProgressPie(' + this.element.getAttribute('machine-id')
    // + '): append style - keyFrames = ' + keyFrames);

    return style;
  }

/**
 * Create SVG style to animate a segment.
 * Rotation until to toWidth (from must be defined in main svg)
 *
 * @memberof module:pulseSvg
 *
 * @function createStyleForEndAnimationOnDonut
 * 
 * @param {jQuery} caller x-tag component
 * @param {string} keyFrameName
 * @param {Number} circleRadius radius in %
 * @param {Number} toWidth segment width after animation in %
 */
/*exports.createStyleForEndAnimationOnDonut =
function (caller, keyFrameName, circleRadius, toWidth) {
  let circumference = 2 * Math.PI * circleRadius; // = full path length
  let style = document.createElement('style');
  style.type = 'text/css';

  let keyFrames = '\
@keyframes '+ keyFrameName + ' {\
  to {\
    stroke-dasharray: '+ (circumference * toWidth).toFixed(0) + ' '
    + (circumference * (1.0 - toWidth)).toFixed(0) + ';\
  }\
}';
  style.innerHTML = keyFrames;
  caller.appendChild(style);
}*/

/**
 * Create SVG style to animate a segment.
 * Rotation of BEGIN from fromWidth to toWidth
 *
 * @memberof module:pulseSvg
 *
 * @function createStyleForSegmentOnDonutMovingBegin
 * 
 * @param {jQuery} caller x-tag component
 * @param {string} keyFrameName
 * @param {Number} circleRadius radius
 * @param {Number} fromBegin segment begin
 * @param {Number} toBegin segment begin after animation
 * @param {Number} fromWidth segment width
 * @param {Number} toWidth segment width after animation
 */
exports.createStyleForSegmentOnDonutMovingBegin =
  function (caller, keyFrameName, circleRadius, fromBegin, toBegin, fromWidth, toWidth) {
    let circumference = 2 * Math.PI * circleRadius; // = full path length
    let style = document.createElement('style');
    style.type = 'text/css';

    let keyFrames = '\
  @keyframes '+ keyFrameName + ' {\
    from {\
      stroke-dasharray: '+ (circumference * fromWidth).toFixed(0) + ' '
      + (circumference * (1.0 - fromWidth)).toFixed(0) + ';\
      stroke-dashoffset: '+ (circumference * (1.0 - fromBegin)).toFixed(0) + ';\
    }\
    to {\
      stroke-dasharray: '+ (circumference * toWidth).toFixed(0) + ' '
      + (circumference * (1.0 - toWidth)).toFixed(0) + ';\
      stroke-dashoffset: '+ (circumference * (1.0 - toBegin)).toFixed(0) + ';\
    }\
  }';
    style.innerHTML = keyFrames;
    caller.appendChild(style);
  }

/**
 * Create SVG segment on gauge
 *
 * @memberof module:pulseSvg
 *
 * @function createSegmentOnGauge
 * 
 * @param {Integer} xMiddle
 * @param {Integer} yMiddle
 * @param {Integer} radius
 * @param {string} fillColor
 * @param {string} mainClass  class to set
 * @param {string} strokeColor
 * @param {Integer} strokeWidth
 * @param {Double} beginPercent percent for the begin of the segment
 * @param {Double} widthPercent percent for the segment length
 
 * @return {Object} SVG
 */
exports.createSegmentOnGauge = function (xMiddle, yMiddle, radius, fillColor, mainClass,
  strokeColor, strokeWidth, beginPercent, widthPercent) {
  //let magicCircleRadius = 15.91549430918954;
  let circumference = 2 * Math.PI * radius; // == 100 if magicCircleRadius is used

  let circleProgress = document.createElementNS(_svgNS, 'circle');
  circleProgress.setAttribute('cx', xMiddle);
  circleProgress.setAttribute('cy', yMiddle);
  circleProgress.setAttribute('r', radius);
  if (!pulseUtility.isNotDefined(fillColor)) {
    circleProgress.setAttribute('fill', fillColor);
  }
  circleProgress.setAttribute('class', mainClass);
  if (!pulseUtility.isNotDefined(strokeColor)) {
    circleProgress.setAttribute('stroke', strokeColor);
  }
  circleProgress.setAttribute('stroke-width', strokeWidth);
  // 2*pi*R = 2*3.14*radius = 100
  $(circleProgress).css('stroke-dasharray',
    (circumference * (widthPercent / 2.0)).toFixed(0) + ' ' +
    (circumference * (1.0 - (widthPercent / 2.0))).toFixed(0)); //'85 15');
  $(circleProgress).css('stroke-dashoffset',
    (circumference * (1.25 - (beginPercent / 2.0 + 0.75))).toFixed(0));
  return circleProgress;
}

/**
 * Create SVG line on a gauge
 *
 * @memberof module:pulseSvg
 *
 * @function createLineOnGauge
 * 
 * @param {Integer} xMiddle
 * @param {Integer} yMiddle
 * @param {Integer} middleRadius
 * @param {Integer} externRadius
 * @param {Double} percentPosition
 * @param {string} strokeColor
 * @param {string} strokeWidth
 
 * @return {Object} SVG
 */
exports.createLineOnGauge = function (xMiddle, yMiddle, middleRadius, externRadius,
  percentPosition, strokeColor, width, dasharray) {
  let angle = (percentPosition / 2 + 0.5) * 2 * Math.PI;
  let aLine = document.createElementNS(_svgNS, 'line');
  aLine.setAttribute('x1', xMiddle + middleRadius * Math.cos(angle));
  aLine.setAttribute('y1', yMiddle + middleRadius * Math.sin(angle));
  aLine.setAttribute('x2', xMiddle + externRadius * Math.cos(angle));
  aLine.setAttribute('y2', yMiddle + externRadius * Math.sin(angle));
  aLine.setAttribute('stroke-width', width);
  if (!pulseUtility.isNotDefined(strokeColor)) {
    aLine.setAttribute('stroke', strokeColor);
  }
  if (!pulseUtility.isNotDefined(dasharray)) {
    aLine.setAttribute('stroke-dasharray', dasharray.toFixed(0));
  }
  return aLine;
}

/**
 * Inline the svg specified as background-image of a div
 * The original background-image is removed and the inline svg is inserted in the element
 * @param {string} selector 
 * @param {function} callbackAfterInline (can be undefined)
 */
var inlineBackgroundSvg = exports.inlineBackgroundSvg = function (selector, callbackAfterInline) {
  // Check if SVG is supported and selector is valid
  if (typeof SVGRect == 'undefined' || $(selector) == null)
    return;

  // Try to change the image as long as the css is not loaded yet
  function checkBackgroundImage (selector) {
    let backgroundImage = $(selector).css('background-image');
    if (backgroundImage == null || !backgroundImage.includes('url')) {
      window.setTimeout(checkBackgroundImage, 100, selector);
    }
    else {
      // Request the SVG file
      let src = backgroundImage.replace('url(', '').replace(')', '').replace(/\"/gi, '');

      // Append the SVG to the target
      var ajaxReq = new XMLHttpRequest();
      ajaxReq.onload = function (e, d) {
        //if (ajaxReq.statusText == 'OK') { statusText == '' using https / Ford
        if (ajaxReq.status == 200) {
          $(selector).css('background-image', 'none');
          $(selector).append(ajaxReq.responseText);

          // Callback
          if (pulseUtility.isFunction(callbackAfterInline)) {
            callbackAfterInline();
          }
        }
      };
      ajaxReq.open('GET', src, true);
      ajaxReq.send();
    }
  }
  checkBackgroundImage(selector);
};

/* Get a class to know the icon FOR machine modes
*/
exports.getMachineModeClass = function (machineModeCategory) {
  let classBegin = 'pulse-mode-category-';
  switch (machineModeCategory) {
    case 1:
      return classBegin + 'inactive';
    case 2:
      return classBegin + 'active';
    case 3:
      return classBegin + 'error';
    case 4:
      return classBegin + 'unknown';
    case 5:
      return classBegin + 'eco';
    case 6:
      return classBegin + 'stopping';
    default:
      return null;
  }
}

/* Create an icon for colored legend. 
 * The color can be defined by a color OR class.
*/
exports.createColoredLegend = function (color, mainClass) {
  return createRect(0, 0, 15, 15, color, mainClass);
}

/**
 * Display maintenance screen
 *
 * @memberof module:pulseSvg
 *
 * @function showPulseMaintenance
 * 
 */
exports.showPulseMaintenance = function () {
  // if already exists, do nothing
  {
    let pulseMaintenance = $('body').find('.pulse-maintenance');
    if (pulseMaintenance.length != 0) {
      $(pulseMaintenance[0]).show();
      return;
    }
  }

  // else CREATE
  let text = $('<div></div>').addClass('pulse-maintenance-text')
    .html('The system is currently under maintenance');
  let svg = $('<div></div>').addClass('pulse-maintenance-svg');
  let centeredDiv = $('<div></div>').addClass('pulse-maintenance-centered-div')
    .append(svg).append(text);

  let shadow = $('<div></div>').addClass('pulse-maintenance-shadow');
  let box = $('<div></div>').addClass('pulse-maintenance-display-box')
    .append(centeredDiv);

  let pulseMaintenance = $('<div></div>').addClass('pulse-maintenance')
    .append(shadow).append(box);

  //pulseSvg.
  inlineBackgroundSvg(svg);

  // Create a div Maintenance
  $('body').append(pulseMaintenance);
}
/*
.pulse-maintenance-svg{
.create_svg('pulse-maintenance', @color_text, @color_text)
}
 */
/**
 * HIDE maintenance screen
 *
 * @memberof module:pulseSvg
 *
 * @function hidePulseMaintenance
 * 
 */
exports.hidePulseMaintenance = function () {
  //$('body').find('.pulse-maintenance').remove();
  $('body').find('.pulse-maintenance').hide();
}


/**
 * remove BAR chart created using next method
 *
 * @memberof module:pulseSvg
 *
 * @function createBarChart
 * @param {DOM} parent
 * @param {string} svgClass
 */
var removeBarChart = exports.removeBarChart = function (parent, svgClass) {
  if (parent == undefined) {
    return;
  }
  // clear svg
  let svg = $(parent).find('.' + svgClass);
  d3.selectAll(svg.toArray()).remove();
  $(parent).remove('.' + svgClass);
}

/**
 * create BAR chart
 *
 * @memberof module:pulseSvg
 *
 * @function createBarChart
 * @param {DOM} parent
 * @param {string} svgClass
 * @param {Object} chartData
 * @param {Object} options
 * 
 *  chartData = [
 *    {
 *      xDisplay: 'Rust',
 *       value: 78.9 -> value to display
 *       boundedValue -> value to draw in case of fixed height
 *    },{ ...}];
 *
 *  options = { // Each can be undefined
 *    minValue : number
 *    maxValue : number
 *    mainTitle : string
 *    leftTitle : string
 *    bottomTitle : string
 *    sourceText : string
 *    drawHorizontalGrid : bool, default false
 *    drawVerticalGrid : bool, default false
 *  }
 */
exports.createBarChart = function (parent, svgClass, chartData, options) {
  if (parent == undefined) {
    return;
  }
  removeBarChart(parent, svgClass);

  let minValue = 0;
  let maxValue = 0;

  // Automatic bounds
  for (let i = 0; i < chartData.length; i++) {
    let value = chartData[i].value;
    // Min / Max
    if (minValue > value) {
      minValue = value;
    }
    if (maxValue < value) {
      maxValue = value;
    }
  }
  // Cut display if needed
  if (!pulseUtility.isNotDefined(options.minValue)
    && '' != options.minValue) {
    if (minValue < options.minValue) {
      minValue = options.minValue;
    }
  }
  if (!pulseUtility.isNotDefined(options.maxValue)
    && '' != options.maxValue) {
    if (maxValue > options.maxValue) {
      maxValue = options.maxValue;
    }
  }

  // Minimum (was Default) size
  var chartMargin = 60;
  var chartWidth = 300;  //1000;
  var chartHeight = 240; //600;

  // Adapt size to parent's
  let pWidth = parent.width();
  let pHeight = parent.height();
  if (chartWidth < pWidth) {
    chartWidth = pWidth;
  }
  if (chartHeight < pHeight) {
    chartHeight = pHeight;
  }

  // Remove margin
  chartWidth -= 2 * chartMargin;
  chartHeight -= 2 * chartMargin;

  // Create BAR chart
  let svg = d3.selectAll(parent.toArray()).append('svg')
    .attr('class', svgClass);
  svg.attr('viewBox', '0 0 '
    + (chartWidth + 2 * chartMargin) // viewBoxWidth 
    + ' '
    + (chartHeight + 2 * chartMargin)); // + viewBoxHeight

  // Move to manage margin
  let chart = svg.append('g')
    .attr('transform', `translate(${chartMargin}, ${chartMargin})`);

  // Y Scale according to displayed values (linear scale)
  // X and Y Scale - scaleBand is in d3-scale, it splits range into bands
  let xScale = d3.scaleBand()
    .range([0, chartWidth])
    .domain(chartData.map((s) => s.xDisplay))
    .padding(0.2); // or 0.4
  let yScale = d3.scaleLinear()
    .range([chartHeight, 0])
    .domain([minValue, maxValue]);

  // Draw X axis
  // Ticks at bottom
  chart.append('g')
    .attr('class', 'x-bottom-axis')
    .attr('transform', `translate(0, ${chartHeight})`)
    .call(d3.axisBottom(xScale));

  // Draw X axis // Line at 0 (can be bottom, but not always)
  svg.append('g')
    .attr('class', 'x-0-axis')
    .append('line')
    .attr('y1', chartMargin + yScale(0))
    .attr('y2', chartMargin + yScale(0))
    .attr('x1', chartMargin)
    .attr('x2', chartMargin + chartWidth);

  // Left Y axis
  chart.append('g')
    .call(d3.axisLeft(yScale));

  if (options.drawVerticalGrid) {
    // vertical grid lines
    let makeXLines = () => d3.axisBottom()
      .scale(xScale)

    // vertical grid lines
    chart.append('g')
      .attr('class', 'grid')
      .attr('transform', `translate(0, ${chartHeight})`)
      .call(makeXLines()
        .tickSize(-chartHeight, 0, 0)
        .tickFormat('')
      )
  }

  if (options.drawHorizontalGrid) {
    // Horizontal grid lines
    let makeYLines = () => d3.axisLeft()
      .scale(yScale);

    chart.append('g')
      .attr('class', 'grid')
      .call(makeYLines()
        .tickSize(-chartWidth, 0, 0)
        .tickFormat('')
      );
  }

  // Draw data
  let barGroups = chart.selectAll()
    .data(chartData)
    .enter()
    .append('g');


  // g.value replaced with boundedValue
  barGroups
    .append('rect')
    //.attr('class', 'bar')
    .attr('class', (g) => (g.boundedValue > 0) ? 'bar positive' : 'bar negative')
    .attr('x', (g) => xScale(g.xDisplay))
    // can be .attr(’x’, (actual, index, array) => xScale(actual.value))
    .attr('y', (g) => (g.boundedValue > 0) ? yScale(g.boundedValue) : yScale(0))
    .attr('height', (g) => Math.abs(yScale(g.boundedValue) - yScale(0)))
    .attr('width', xScale.bandwidth());
  /*.on('mouseenter', function (actual, i) {
})
.on('mouseleave', function () {
}) */

  // Add text with value in bar - Not ready yet - Could be added
  /*barGroups
    .append('text')
    .attr('class', 'value')
    .attr('x', (a) => xScale(a.xDisplay) + xScale.bandwidth() / 2)
    .attr('y', (a) => yScale(a.value) + 30)
    .attr('text-anchor', 'middle')
    .text((a) => `${a.value}%`);*/

  if (!pulseUtility.isNotDefined(options.leftTitle)) {
    // Add left legend
    svg
      .append('text')
      .attr('class', 'label')
      .attr('x', -(chartHeight / 2) - chartMargin)
      .attr('y', chartMargin / 2.4)
      .attr('transform', 'rotate(-90)')
      .attr('text-anchor', 'middle')
      .text('Left legend');
  }
  if (!pulseUtility.isNotDefined(options.bottomTitle)) {
    // Add bottom legend
    svg.append('text')
      .attr('class', 'label')
      .attr('x', chartWidth / 2 + chartMargin)
      .attr('y', chartHeight + chartMargin * 1.7)
      .attr('text-anchor', 'middle')
      .text('Bottom legend');
  }
  if (!pulseUtility.isNotDefined(options.mainTitle)) {
    // Add main title
    svg.append('text')
      .attr('class', 'title')
      .attr('x', chartWidth / 2 + chartMargin)
      .attr('y', 40)
      .attr('text-anchor', 'middle')
      .text('Main title');
  }
  if (!pulseUtility.isNotDefined(options.sourceText)) {
    // Add bottom source text
    svg.append('text')
      .attr('class', 'source')
      .attr('x', chartWidth - chartMargin / 2)
      .attr('y', chartHeight + chartMargin * 1.7)
      .attr('text-anchor', 'start')
      .text('Source: ' + options.sourceText);
  }
  // Make it interactive
  /*svgElement
    .on('mouseenter', function (actual, i) {
      d3.select(this).attr(‘opacity’, 0.5)
    })
    .on('mouseleave’, function (actual, i) {
    d3.select(this).attr(‘opacity’, 1)
});
d3.mouse -> to get coordinate, show tooltip ...
*/

}

/**
 * create missing data (red dot)
 *
 * @memberof module:pulseSvg
 *
 * @function createMissingdata
 * @param {DOM} parent
 */
exports.createMissingdata = function (parent) {
  // To add in version 12
  let radius = 4;

  //createBase
  let svg = document.createElementNS(_svgNS, 'svg');
  svg.setAttribute('width', 2 * radius);
  svg.setAttribute('height', 2 * radius);
  svg.setAttribute('class', 'pulse-missing-data');
  svg.setAttribute('viewBox', '0 0 ' + 2 * radius + ' ' + 2 * radius);
  // Append
  $(parent).append(svg);

  // createCircle / could be an image
  let circle = document.createElementNS(_svgNS, 'circle');

  // = function (xMiddle, yMiddle, radius, fillColor, mainClass, strokeColor, strokeWidth) {
  circle.setAttribute('cx', radius);
  circle.setAttribute('cy', radius);
  circle.setAttribute('r', radius);
  circle.setAttribute('class', 'pulse-missing-data-circle');
  //circle.setAttribute('fill', 'red');
  //circle.setAttribute('stroke-width', '1px');      
  //circle.setAttribute('stroke', strokeColor);

  svg.appendChild(circle);
}
},{"pulseUtility":"pulseUtility"}],"pulseUtility":[function(require,module,exports){
// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

/**
 * @file Various tool functions.
 */

/**
* @module pulseUtility
* @requires pulseRange
*/
var pulseRange = require('pulseRange');

/** Get integer from string
 * 
 * @memberof module:pulseUtility
 * @function string2int
 */
exports.string2int = function string2int (str) {
  return (str == 'null' || str == null || str == '') ? -1 : parseInt(str);
};

/** Get contrated color from rgb OR #hex
 * 
 * @memberof module:pulseUtility
 * @function getContrastColor
 */
exports.getContrastColor = function getContrastColor (hexcolor) {
  if (hexcolor.indexOf('rgb') >= 0) { // rgb format
    let nums = /(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(hexcolor);
    let r = parseInt(nums[2], 10).toString(16);
    let g = parseInt(nums[3], 10).toString(16);
    let b = parseInt(nums[4], 10).toString(16);

    let yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    return (yiq >= 128) ? '#121212' : '#ededed'; //'black' : 'white';
  }
  else if (hexcolor.charAt(0) == '#') {
    let r = parseInt(hexcolor.substr(1, 2), 16);
    let g = parseInt(hexcolor.substr(3, 2), 16);
    let b = parseInt(hexcolor.substr(5, 2), 16);

    let yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    return (yiq >= 128) ? '#121212' : '#ededed'; //'black' : 'white';
  }
  else {
    return '#7F7F7F'; // Grey... best than nothing
  }
}

/** Check whether given object represents decimal or float value.
 * Replace jquery obsolete method.
 *
 * @memberof module:pulseUtility
 * @function isNumeric
 * 
 * @param {Object} value  object to check
 * @return {Boolean}
 */
exports.isNumeric = function (value) {
  if ((parseFloat(value) == parseInt(value)) && !isNaN(value)) {
    return true;
  }
  else {
    return Number(value) === value && value % 1 !== 0;
  }
}

/** Check whether given object represents decimal value or not
 *
 * @memberof module:pulseUtility
 * @function isFloat
 * 
 * @param {Object} value  object to check
 * @return {Boolean}
 */
exports.isFloat = function (value) {
  return Number(value) === value && value % 1 !== 0;
}

/** Check whether given object represents integer value or not
 *
 * @memberof module:pulseUtility
 * @function isInteger
 * 
 * @param {Object} value  object to check
 * @return {Boolean}
 */
var isInteger = exports.isInteger = function (value) {
  if ((parseFloat(value) == parseInt(value)) && !isNaN(value)) {
    return true;
  }
  else {
    return false;
  }
}

/** Check whether given object represents a boolean value or not
 *
 * @memberof module:pulseUtility
 * @function isBoolean
 *
 * @param {Object} value an object
 * @return {Boolean}
 */
exports.isBoolean = function (value) {
  if (((typeof value) === 'boolean') || ((value instanceof Boolean) == true) || (value === 'true') || (value === 'false')) {
    return true;
  }
  else {
    return false;
  }
}


/** Check whether given object represents function value or not
 *
 * @memberof module:pulseUtility
 * @function isFunction
 *
 * @param {Object} value an object
 * @return {Boolean}
 */
exports.isFunction = function (value) {
  return (value !== undefined) && (value !== null) && (Object.prototype.toString.call(value) == '[object Function]');
}

/**
 * return a string with leading 0 - for date FORMAT on 2 digits
 **/
exports.leadingZero = function (value) {
  if (value < 10) {
    return '0' + value.toString();
  }
  return value.toString();
}

/**
 * return an array of string used to gradate widget with time labels
 *
 * @memberof module:pulseUtility
 *
 * @function getTimeMarkers
 *
 * @param {Number} datetime represents seconds since 1 Jan 1970 in UTC format
 * @param {string} format time format used to format label to display
 * @return {Array}
 */
exports.getTimeMarkers = function (datetime, format) {
  let utc = moment.utc(datetime);
  let m0 = utc.local();
  let m4 = m0.clone().add(1, 'd');
  let m1 = m0.clone().add(6, 'h');
  let m2 = m0.clone().add(12, 'h');
  let m3 = m0.clone().add(18, 'h');
  let array = new Array();
  array[0] = m0.format(format);
  array[1] = m1.format(format);
  array[2] = m2.format(format);
  array[3] = m3.format(format);
  array[4] = m4.format(format);
  return array;
};

/**
 * Converts integer that represents date to a moment object in local mode.
 *
 * @memberof module:pulseUtility
 *
 * @function getMomentLocalFromUtcDate
 *
 * @param {Number} datetime Integer that represents date in utc
 * @return {Moment}
 */
exports.getMomentLocalFromUtcDate = function (datetime) {
  let moment_utc = moment(datetime).utc();
  let m = moment_utc.clone();
  return m.local();
}

/** Convert a date for the REPORT
 * 
 * It just converts the date to a LOCAL string for calling reports
 * (used in toollifemachine bar)
 * 
 * If date is not defined or if it is an empty string, an empty string is returned
 * 
 * @memberof module:pulseUtility
 * @function convertDateForReport
 *
 * @param {string|Date} date - date to send to the web service
 * @return {string} Date string for any REPORT
 */
//var convertDateForReport =
exports.convertDateForReport = function (date) {
  if (isNotDefined(date)) {
    return '';
  }
  let pad2 = function (number) {
    return ('0' + number).slice(-2);
  }
  let pad3 = function (number) {
    return ('00' + number).slice(-3);
  }

  let d = new Date(date);
  let dateString =
    d.getFullYear() + '-' +
    pad2(d.getMonth()) + '-' +
    pad2(d.getDate()) + '+' +
    pad2(d.getHours()) + '%3A' +
    pad2(d.getMinutes()) + '%3A' +
    pad2(d.getSeconds()) + '.' +
    pad3(d.getMilliseconds());

  return dateString;
}

/** Convert a date for the web service
 * 
 * It just converts the date to an ISO string
 * 
 * If date is not defined or if it is an empty string, an empty string is returned
 * 
 * @memberof module:pulseUtility
 * @function convertDateForWebService
 *
 * @param {string|Date} date - date to send to the web service
 * @return {string} Date string for the web service
 */
var convertDateForWebService = exports.convertDateForWebService = function (date) {
  if (isNotDefined(date)) {
    return '';
  }

  let d;
  if (typeof date == 'string') {
    if (date.trim() == '') {
      return '';
    }
    d = new Date(date);
  }
  else {
    d = date;
  }
  return d.toISOString();
}

/** Convert a day for the web service
 * 
 * It just converts the day to an ISO string day (not date ! )
 * 
 * If day is not defined or if it is an empty string, an empty string is returned
 * 
 * @memberof module:pulseUtility
 * @function convertDateForWebService
 *
 * @param {string|Date} date - date to send to the web service ou day string
 * @return {string} Day string for the web service = YYYY-MM-DD
 */
//var convertDayForWebService = 
exports.convertDayForWebService = function (day) {
  if (isNotDefined(day)) {
    return '';
  }

  let d;
  if (typeof day == 'string') {
    if (day.trim() == '') {
      return '';
    }
    return day;
  }
  else {
    d = new Date(day);
    return d.toISOString();
  }
}

/**
 * Callback to convert an object to a string
 * 
 * @callback toStringCallback
 * @param {Object} - Object to convert
 * @return {string} Result
 */

/** Convert a range for the web service
 * 
 * @memberof module:pulseUtility
 * @function convertRangeForWebService
 *
 * @param {Range} range - Range to convert
 * @param {toStringCallback} boundToString - Callback to convert a bound to a string
 * @return {string} string for the web service
 */
var _convertRangeForWebService //= exports.convertRangeForWebService 
  = function (range, boundToString) {
    return range.toString(boundToString);
  }

/** Convert a range for the web service
 * 
 * @memberof module:pulseUtility
 * @function convertStringRangeForWebService
 *
 * @param {StringRange} stringrange - Range of strings to convert
 * @return {string} string for the web service
 */
exports.convertStringRangeForWebService = function (stringrange) {
  return _convertRangeForWebService(stringrange, a => a);
}

/** Convert a date range for the web service
 * 
 * @memberof module:pulseUtility
 * @function convertDateRangeForWebService
 *
 * @param {DateRange} daterange - Date range to convert
 * @return {string} string for the web service
 */
var convertDateRangeForWebService = exports.convertDateRangeForWebService = function (daterange) {
  return _convertRangeForWebService(daterange, a => convertDateForWebService(a));
}

/**
 * Create range for webservice containing only 1 single date
 *
 * @memberof module:pulseUtility
 * @function createSingleRangeForWebService
 *
 * @param {string|Date} datetime String that represents the datetime in ISO 8601 format or Date
 * @return {string} range String that represents the range in ISO 8601 format: [2016-05-01T00:03:00,2016-05-01T00:03:00]
 */
exports.createSingleRangeForWebService = function (datetime) {
  let r = pulseRange.createDateRange(datetime, datetime, '[]');
  return convertDateRangeForWebService(r);
}

/**
 * Create range for webservice
 * 
 * The default inclusivity for a DateRange is:
 * [) if begin and end are not the same
 * else []
 *
 * @memberof module:pulseUtility
 *
 * @function createDateRangeForWebService
 *
 * @param {string|Date} begin - Date or string that represents the range in ISO 8601 format.
 * @param {string|Date} end - Date or string that represents the range in ISO 8601 format.
 * @return {string} range String that represents the range in ISO 8601 format: [2016-05-01T00:03:00,)
 */
exports.createDateRangeForWebService = function (begin, end) {
  let r = pulseRange.createDateRangeDefaultInclusivity(begin, end);
  return convertDateRangeForWebService(r);
}

/**
 * Display a day
 *
 * @memberof module:pulseUtility
 *
 * @function getDisplayDay
 *
 * @param {string} begin String that represents the begin day in ISO 8601 format
 * @return {string} String that represents the day
 */
exports.getDisplayDay = function (day) {
  if ((!day) || (day == 'null')) {
    return '';
  }
  if (day.length > 10) { // TMP code to make getRangeAround < 2016-03-07 work    
    let _day = convertDateToMoment(day); // day + midnight
    _day = _day.add(12, 'hours'); // To be sure to display the right day
    return _day.format('ll');
  }
  else {
    let _day = moment(day, 'YYYY-MM-DD');
    return _day.format('ll');
  }
}

/** Display a single date
 * 
 * @memberof module:pulseUtility
 *
 * @function displayDate
 *
 * @param {date} date - date, with bounds of type native javascript Date or ISO 8601 format
 * @param {boolean} seconds - true == show seconds
 * @return {string} String that represents the date
 */
var displayDate = exports.displayDate = function (date, seconds) {
  let m = convertDateToMoment(date);
  if (seconds) {
    return (m.format('ll') // Month name, day of month, year, time
      + ', ' + m.format('LTS'));  // HH:MM:Sec
  }
  else {
    return m.format('lll'); // Month name, day of month, year, time
  }
}

/** Display a date range
 * 
 * @memberof module:pulseUtility
 *
 * @function displayDateRange
 *
 * @param {Range} range - date range, with bounds of type native javascript Date or ISO 8601 format
 * @param {boolean} seconds - true == show seconds
 * @return {string} String that represents the date range
 */
//var displayDateRange = 
exports.displayDateRange = function (range, seconds) {
  let r = pulseRange.convertToDateRange(range);
  if (r.isEmpty()) {
    return '';
  }
  else { // not empty
    if (r.lower == null) {
      console.warn('displayDateRange: lower is not defined');
      if (r.upper == null) {
        return '-oo - +oo';
      }
      else {
        return '-oo - ' + displayDate(r.upper, seconds);
      }
    }
    else { // range.lower not null
      if (r.upper == null) {
        let retVal = displayDate(r.lower, seconds)
          + ' - '
          + 'In progress'; // TODO: i18n
        return retVal;
      }
      else { // lower and upper are defined
        if (r.lower.getTime() == r.upper.getTime()) {
          return displayDate(r.lower, seconds);
        }
        else {
          let begin_local = convertDateToMoment(r.lower);
          let end_local = convertDateToMoment(r.upper);
          if (begin_local.isSame(end_local, 'day')) {
            let retVal = begin_local.format('ll')
              + '   '
              + (seconds ? begin_local.format('LTS') : begin_local.format('LT'))
              + ' - '
              + (seconds ? end_local.format('LTS') : end_local.format('LT'));
            return retVal;
          }
          else {
            let retVal = displayDate(r.lower, seconds)
              + ' - '
              + displayDate(r.upper, seconds);
            return retVal;
          }
        }
      }
    }
  }
}

/** Append a date range display with separated begin and end
 * 
 * @memberof module:pulseUtility
 *
 * @function  appendDateRangeDisplay
 * output classes : range-begin / range-end / range-begin-end / range-begin-end-date
 *
 * @param {DOMElement} parent - where span will be added
 * @param {Range} range - date range, with bounds of type native javascript Date or ISO 8601 format
 * @param {boolean} seconds - true == show seconds
 * @return {boolean} true in case of success
 */
//var appendDateRangeDisplay = 
exports.appendDateRangeDisplay = function (parent, range, seconds) {

  let appendRange = function (parent, beginString, endString) {
    let spanBegin = $('<span></span>').addClass('range-begin').html(beginString);
    let spanSep = $('<span></span>').addClass('range-separator').html(' - ');
    let spanEnd = $('<span></span>').addClass('range-end').html(endString);
    $(parent).append(spanBegin).append(spanSep).append(spanEnd);
  }

  let r = pulseRange.convertToDateRange(range);
  if (r.isEmpty()) {
    return false;
  }
  else { // not empty
    if (r.lower == null) {
      console.warn('displayDateRange: lower is not defined');
      if (r.upper == null) {
        appendRange(parent, '-oo', '+oo');
        return true;
      }
      else {
        appendRange(parent, '-oo', displayDate(r.upper, seconds));
        return true;
      }
    }
    else { // range.lower not null
      if (r.upper == null) {
        appendRange(parent, displayDate(r.lower, seconds), 'In progress'); // TODO: i18n
        return true;
      }
      else { // lower and upper are defined
        if (r.lower.getTime() == r.upper.getTime()) {
          // see appendRange - but unique !
          let spanRange = $('<span></span>').addClass('range-begin-end')
            .html(displayDate(r.lower, seconds));
          $(parent).append(spanRange);
          return true;
        }
        else {
          let begin_local = convertDateToMoment(r.lower);
          let end_local = convertDateToMoment(r.upper);
          if (begin_local.isSame(end_local, 'day')) {
            // see appendRange - but unique date - 2 times
            let spanDate = $('<span></span>').addClass('range-begin-end-date')
              .html(begin_local.format('ll'));
            let spanSepDT = $('<span></span>').addClass('range-separator-date-time').html(' ');
            let spanBegin = $('<span></span>').addClass('range-begin')
              .html((seconds ? begin_local.format('LTS') : begin_local.format('LT')));
            let spanSep = $('<span></span>').addClass('range-separator').html(' - ');
            let spanEnd = $('<span></span>').addClass('range-end')
              .html((seconds ? end_local.format('LTS') : end_local.format('LT')));
            $(parent).append(spanDate).append(spanSepDT)
              .append(spanBegin).append(spanSep).append(spanEnd);
            return true;
          }
          else {
            appendRange(parent, displayDate(r.lower, seconds), displayDate(r.upper, seconds));
            return true;
          }
        }
      }
    }
  }
}

/**
 * Convert a number of seconds to a string
 *
 * @memberof module:pulseUtility
 *
 * @function toHHMMSS
 *
 * @param {integer} nbSeconds number of seconds (duration)
 * @return string value
 */

exports.secondsToHHMMSS = function (nbSeconds) {
  let sec_num = parseInt(nbSeconds, 10); // don't forget the second param
  let hours = Math.floor(sec_num / 3600);
  let minutes = Math.floor((sec_num - (hours * 3600)) / 60);
  let seconds = sec_num - (hours * 3600) - (minutes * 60);

  if (hours >= 24) { hours = hours % 24; }

  if (hours < 10) { hours = '0' + hours; }
  if (minutes < 10) { minutes = '0' + minutes; }
  if (seconds < 10) { seconds = '0' + seconds; }
  return hours + ':' + minutes + ':' + seconds;
}

/**
 * Convert a duration string to a number of seconds
 *
 * @memberof module:pulseUtility
 *
 * @function HHMMSStoSeconds
 *
 * @param {string} HHHMMSS 
 * @return {integer} number of seconds (duration)
 */

exports.HHMMSStoSeconds = function (str) {
  let retVal = 0;
  let multiplier = 1;

  let splitedStr = str.split(':');
  for (let i = splitedStr.length - 1; i >= 0; i--) {
    retVal += multiplier * parseInt(splitedStr[i], 10);
    multiplier *= 60;
  }
  return retVal;
}

/**
 * search a parameter in an url and return its value
 *
 * @memberof module:pulseUtility
 *
 * @function getURLParameter
 *
 * @param {string} pageURL url address
 * @param {string} param parameter name whose name must be search in url
 * @return parameter value or null if given url do not contain this parameter name
 */
//var getURLParameter = 
exports.getURLParameter = function (pageURL, param) {
  let sQuery = pageURL.split('?')[1];
  if (sQuery) {
    let sURLVariables = sQuery.split('&');
    for (let i = 0; i < sURLVariables.length; i++) {
      let sParameterName = sURLVariables[i].split('=');
      if (sParameterName[0] == param) {
        return sParameterName[1];
      }
    }
  }
  return null;
}

/**
 * change or add a parameter in an url and return new url
 *
 * @memberof module:pulseUtility
 *
 * @function changeURLParameter
 *
 * @param {string} pageURL url address
 * @param {string} param parameter name whose name must be search in url
 * @param {string} value NEW parameter value to add in url
 * @return new URL
 */
exports.changeURLParameter = function (pageURL, param, value) {
  let sQuery = pageURL.split('?');
  if ((sQuery.length > 1) && (sQuery[1])) {
    let found = false;
    let sURLVariables = sQuery[1].split('&');
    for (let i = 0; i < sURLVariables.length; i++) {
      let sParameterName = sURLVariables[i].split('=');
      if (sParameterName[0] == param) {
        found = true;
        sParameterName[1] = value;
      }
      sURLVariables[i] = sParameterName.join('=');
    }
    if (!found) {
      sURLVariables[sURLVariables.length] = param + '=' + value;
    }
    sQuery[1] = sURLVariables.join('&');
  }
  else {
    sQuery[1] = param + '=' + value;
  }
  pageURL = sQuery.join('?');
  return pageURL;
}

/**
 * search a parameter in an url and return its values
 *
 * @memberof module:pulseUtility
 *
 * @function getURLParameterValues
 *
 * @param {string} pageURL url address
 * @param {string} param parameter name whose name must be search in url
 * @return an array with values of given parameters. if given url do not contain this parameter name, it returns an empty array 
 */
var getURLParameterValues = exports.getURLParameterValues = function (pageURL, param) {
  let splittedString = pageURL.split('?');
  let values = new Array();
  if (splittedString.length <= 1) {
    return values; // If no '?' exist
  }
  let sQuery = splittedString[1];
  if (sQuery) {
    let sURLVariables = sQuery.split('&');
    for (let i = 0; i < sURLVariables.length; i++) {
      let sParameterName = sURLVariables[i].split('=');
      if (sParameterName[0] == param) {
        values[values.length] = sParameterName[1];
      }
    }
  }
  let distinctValues = new Array();
  for (let j = 0; j < values.length; j++) {
    if (distinctValues.indexOf(values[j]) < 0) {
      distinctValues[distinctValues.length] = values[j];
    }
  }
  return distinctValues;
}

/**
 * Remove a parameter in an url and return new url
 *
 * @memberof module:pulseUtility
 *
 * @function removeURLParameter
 *
 * @param {string} pageURL url address
 * @param {string} param parameter name whose name must be search and removed in url
 * @return {string} an url
 */
//var removeURLParameter = 
exports.removeURLParameter = function (pageURL, param) {
  let splittedString = pageURL.split('?');
  if (splittedString.length == 0) {
    return '';
  }
  let newURL = splittedString[0];
  if (splittedString.length > 1) {
    let sQuery = splittedString[1];
    if (sQuery) {
      let sURLVariables = sQuery.split('&');
      for (let i = 0; i < sURLVariables.length; i++) {
        if (sURLVariables[i].length > 0) { // To avoid '?&' if any
          let sParameterName = sURLVariables[i].split('=');
          if (sParameterName[0] != param) {
            if (newURL.includes('?'))
              newURL += '&';
            else
              newURL += '?'
            newURL += sURLVariables[i];
          }
        }
      }
    }
  }
  return newURL;
}


/**
 * Remove a parameter in an url and return new url
 *
 * @memberof module:pulseUtility
 *
 * @function removeURLParameterContaining
 *
 * @param {string} pageURL url address
 * @param {string} param parameter whose name must be search and removed in url (*param*)
 * @return {string} an url
 */
//var removeURLParameterContaining = 
exports.removeURLParameterContaining = function (pageURL, param) {
  let splittedString = pageURL.split('?');
  if (splittedString.length == 0) {
    return '';
  }
  let newURL = splittedString[0];
  if (splittedString.length > 1) {
    let sQuery = splittedString[1];
    if (sQuery) {
      let sURLVariables = sQuery.split('&');
      for (let i = 0; i < sURLVariables.length; i++) {
        let sParameterName = sURLVariables[i].split('=');
        if (!sParameterName[0].includes(param)) {
          if (newURL.includes('?'))
            newURL += '&';
          else
            newURL += '?'
          newURL += sURLVariables[i];
        }
      }
    }
  }
  return newURL;
}

/**
 * search machine id parameter in an url and return its values.
 * This function look for all possible identifier of machine id parameter in url.
 *
 * @memberof module:pulseUtility
 *
 * @function getMachineIdParameterValue
 *
 * @param {string} pageURL url address
 * @return an array with values of machine id parameter values. if given url do not contain this parameter name, it returns an empty array 
 */
exports.getMachineIdParameterValue = function (pageURL) {
  let identifiers = ['machine', 'machine-ids'];
  let values = new Array();
  for (let id = 0; id < identifiers.length; id++) {
    values = getURLParameterValues(pageURL, identifiers[id]);
    if (values.length > 0) {
      return values;
    }
  }
  return values;
}

/**
 * search machine id parameter in an url and return its values.
 * This function look for all possible identifier of machine id parameter in url.
 *
 * @memberof module:pulseUtility
 *
 * @function getALLMachineIdParameterValue - TODO : REMOVE
 *
 * @param {string} pageURL url address
 * @return an array with values of machine id parameter values. if given url do not contain this parameter name, it returns an empty array 
 */
exports.getALLMachineIdParameterValue = function (pageURL) {
  let identifiers = ['machine', 'machine-ids', 'selected-machine-id', 'machinetop'];
  let values = new Array();
  for (let i = 0; i < identifiers.length; i++) {
    let tmpvalues = new Array();
    tmpvalues = getURLParameterValues(pageURL, identifiers[i]);
    values = values.concat(tmpvalues);
  }
  return values;
}

/**
 * search ALL parameters excluding machine id parameter in an url and return a string.
 *
 * @memberof module:pulseUtility
 *
 * @function getParametersExceptingMachineId
 *
 * @param {string} pageURL url address
 * @return an array with values of machine id parameter values. if given url do not contain this parameter name, it returns an empty array 
 */
exports.getParametersExceptingMachineId = function (pageURL) {
  let retString = '';
  let splittedString = pageURL.split('?');
  if (splittedString.length == 0) {
    console.log('pulseUtility.getParametersExceptingMachineId : no URL found !');
  }
  if (splittedString.length > 1) {
    let sQuery = splittedString[1];
    if (sQuery) {
      let sURLVariables = sQuery.split('&');
      for (let i = 0; i < sURLVariables.length; i++) {
        let sParameterName = sURLVariables[i].split('=');
        if ((sParameterName[0] != 'machine') &&
          (sParameterName[0] != 'machine-ids') &&
          (sParameterName[0] != 'selected-machine-id') &&
          (sParameterName[0] != 'machinetop')) {
          retString += '&' + sParameterName[0] + '=' + sParameterName[1];
        }
      }
    }
  }
  return retString;
}

/**
 * check if a value is not defined means that it is null or undefined
 *
 * @memberof module:pulseUtility
 *
 * @function isNotDefined
 *
 * @param value value to check
 * @return {Boolean}
 */
var isNotDefined = exports.isNotDefined = function (value) {
  if ((value === null) || (value == 'null') ||
    (value === undefined) || (typeof value == 'undefined')) {
    return true;
  }
  else {
    return false;
  }
}

/**
 *Get a duration in seconds and returns a text that represents
 *this duration in days, hours, minutes and seconds
 *
 * @memberof module:pulseUtility
 *
 * @function getTextDuration
 *
 * @param {Number} duration in seconds
 * @return {string}
 */
exports.getTextDuration = function (duration) {
  let seconds = parseInt(duration, 10);

  let days = Math.floor(seconds / (24 * 60 * 60));
  let hours = Math.floor((seconds - (days * 24 * 60 * 60)) / (60 * 60));
  let mins = Math.floor((seconds - (days * 24 * 60 * 60) - (hours * 60 * 60)) / 60);
  let secs = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (mins * 60);

  let text = '';

  if (days > 0) {
    text += days + ' d  ';
  }

  if (hours > 0) {
    text += hours + ' h ';
  }

  if (mins > 0) {
    text += mins + ' min ';
  }

  if ((days == 0) && (hours == 0) && (mins <= 5)) {
    if (secs > 0) {
      text += secs + ' sec ';
    }
  }
  return text;
}

/**
 * Get a duration in seconds and returns a text that represents
 *this duration in hours, minutes
 *
 * @memberof module:pulseUtility
 *
 * @function getHoursMinutesDuration
 *
 * @param {Number} duration in seconds
 * @return {string} 0:00 formatted text
 */
exports.getHoursMinutesDuration = function (duration) {
  let seconds = parseInt(duration, 10);

  let hours = Math.floor(seconds / (60 * 60));
  let mins = Math.floor((seconds - (hours * 60 * 60)) / 60);
  //let secs = seconds - (days *24 * 60 * 60) - (hours * 60 * 60) - (mins * 60);

  let text = hours + ':' + (mins > 9 ? '' + mins : '0' + mins);
  return text;
}

/**
 * Get a duration in seconds and returns remaining seconds after
 * text displayed with getHoursMinutesDuration
 *
 * @memberof module:pulseUtility
 *
 * @function getRemainingSecondsDuration
 *
 * @param {Number} duration in seconds
 * @return {Number}
 */
exports.getRemainingSecondsDuration = function (duration) {
  let seconds = parseInt(duration, 10);

  //let hours = Math.floor(seconds / (60 * 60));
  let mins = Math.floor(seconds / 60);
  let secs = seconds - (mins * 60);

  return secs;
}


/**
 * Convert datetime in iso string format to a moment object
 *
 * @memberof module:pulseUtility
 *
 * @function convertDateToMoment
 *
 * @param {string|Date} date Date or string that represends a date/time
 * @return {Moment} a moment object if parameter has right format otherwise null
 */
var convertDateToMoment = exports.convertDateToMoment = function (date) {
  let d;
  if (typeof lower == 'string') {
    d = new Date(date);
  }
  else {
    d = date;
  }
  let m = moment(d);
  if (!m.isValid()) {
    return null;
  }
  else {
    return m;
  }
}


/**
 * Convert moment object to datetime in iso string format 'YYYY-MM-DDTHH:mm:ssZ'
 * 
 *
 * @memberof module:pulseUtility
 *
 * @function convertMomentToDateTimeString
 *
 * @param {Moment} m dateTimeString representation of datetime with following format: 'YYYY-MM-DDTHH:mm:ssZ' / 'YYYY-MM-DDTHH:mm:ss.SSSZ'
 *
 * @return {string} a string object 
 */
exports.convertMomentToDateTimeString = function convertMomentToDateTimeString (m) {
  if (m.isValid()) {
    return m.toISOString();
  }
  else {
    return null;
  }
}
/** Default date format */
exports.defaultDateFormat = 'L';
/** Default time format*/
exports.defaultTimeFormat = 'LT';
/** Default time format with second*/
exports.defaultTimeFormatWithSecond = 'LTS';


/**
 * Function used to get default locate from navigator
 * 
 * @memberof module:pulseUtility
 * @function getDefaultLocale
 * 
 * @return Default locale
 */
exports.getDefaultLocale = function () {
  let locale = window.navigator.languages || [window.navigator.language || window.navigator.userLanguage];
  return locale[0];
}

/**
 * return true if time format for default locale use meridian(AM/PM)
 *  otherwise false
 * 
 * @memberof module:pulseUtility
 * @function is24HoursFormat
 *
 * @return {boolean} true if in 24 hours format
 */
exports.is24HoursFormat = function () {
  let longDateFormat = moment.localeData().longDateFormat('LTS').toUpperCase();
  if ((longDateFormat.indexOf('A') >= 0) || (longDateFormat.indexOf('P') >= 0)) {
    return false;
  }
  return true;
}


/**
 * Function used to return jQuery element with given tag name and attribute
 *
 * @memberof module:pulseUtility
 * @function createjQueryElementWithAttribute
 *
 * @param {string} tagName tag name
 *
 * @param {Object} an object in key-value form which represents attribute of element to create
 *
 * @return {DOMElement} a jQuery element 
 */
var createjQueryElementWithAttribute = exports.createjQueryElementWithAttribute = function (tagName, attributes) {
  let elt = null;

  if (window.navigator.userAgent.includes('Chrome')) {
    let str = '<' + tagName + ' ';
    for (let key in attributes) {
      let value = attributes[key];
      if (value) {
        str = str + key + "='" + value + "' ";
      }
    }
    str = str + '></' + tagName + '>';
    elt = $(str);
  }
  else {
    let domElt = document.createElement(tagName);
    for (let key in attributes) {
      let value = attributes[key];
      if (value) {
        domElt.setAttribute(key, value);
      }
    }
    elt = $(domElt);
  }

  /*else 
    let str = '<' + tagName + ' ';
    for (let key in attributes) {
      let value = attributes[key];
      if (value) {
        str = str + key + "='" + value + "' ";
      }
    }
    str = str + '></' + tagName + '>';
    elt = $(str);
  */

  /*if( !(elt.get(0) instanceof PulseComponent) ){
    console.log("Created element is not an instance of PulseComponent");
  }*/

  return elt;

  /*
  let domElt = document.createElement(tagName);
  for (let key in attributes) {
    let value = attributes[key];
    if(value){
      domElt.setAttribute(key, value);
    }
  }
  return $(domElt);*/
}

/**
 * Check if xTagName exists in body. If not, create it - useful to call addModification
 *
 * @memberof module:pulseUtility
 * @function getOrCreateSingleton
 *
 * @param {string} xTagName
 * @param {json} attributes (can be undefined)
 * @return {xTag} true searched element
 */
exports.getOrCreateSingleton = function (xTagName, attributes) {
  let attr = (null == attributes) ? {} : attributes;
  let tag = $('body').find(xTagName);
  if (tag.length == 0) {
    tag = createjQueryElementWithAttribute(xTagName, attr);
    $('body').append(tag);
  }
  if (tag.length > 0) {
    return tag[0];
  }
  return null; // Hope never !
}

/**
 * Check if DOM element has class
 *
 * @memberof module:pulseUtility
 * @function hasClass
 *
 * @param {DOMElement} element
 * @param {string} className
 * @return {Boolean} true if given element has class name, false otherwise
 */
exports.hasClass = function (element, className) {
  return element.className && new RegExp('(^|\\s)' + className + '(\\s|$)').test(element.className);
}

/** Create a cookie
 * 
 * @memberof module:pulseUtility
 * @function createCookie
 *
 */
var createCookie = exports.createCookie = function (name, value, days) {
  let expires;
  if (days && days > 0) {
    let date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    expires = '; expires=' + date.toGMTString();
  }
  else {
    expires = ''; // == Expire = end of session
  }
  document.cookie = name + '=' + value + expires + '; path=/';
  // ';path=/' == global path to share with reporting
}

/** Read a cookie
 * 
 * @memberof module:pulseUtility
 * @function readCookie
 */
var readCookie =
  exports.readCookie = function (name) {
    let nameEQ = name + '=';
    let ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }

var eraseCookie =
  exports.eraseCookie = function (name) {
    // erase cookie is done in x-checkcurrenttime.js
    createCookie(name, '', -1);
  }

/** change page in url
 * 
 * @memberof module:pulseUtility
 * @function changePageName
 */
exports.changePageName = function (href, newPageName) {
  //let href = window.location.href; // ".../pagename.html?xxx"
  let splitUrl = href.split('?');
  if (splitUrl.length < 1) {
    return href; // No change
  }
  let posPt = splitUrl[0].lastIndexOf('.');
  let posSlash = splitUrl[0].lastIndexOf('/');
  if ((posPt != -1) && (posSlash != -1)) { // Found both
    let crtPage = (splitUrl[0].slice(posSlash + 1, posPt));
    splitUrl[0] = splitUrl[0].replace(crtPage, newPageName);

    return splitUrl.join('?');
  }
  return href;
}

/** get current page
 * 
 * @memberof module:pulseUtility
 * @function getCurrentPageName
 */
exports.getCurrentPageName = function () {
  let href = window.location.href; // ".../pagename.html?xxx"
  let splitUrl = href.split('?');
  if (splitUrl.length < 1) {
    return '';
  }
  let posPt = splitUrl[0].lastIndexOf('.');
  let posSlash = splitUrl[0].lastIndexOf('/');
  if ((posPt != -1) && (posSlash != -1)) { // Found both
    return (splitUrl[0].slice(posSlash + 1, posPt));
  }
  return '';
}

/**
 * Create a convenient object that can store and retrieve data attached to divisions having specific ids
 * Used (at least) by customdialog and machine selection
 */
exports.createDataManager = function (idName) {
  return {
    _idName: idName,
    _id: 0,
    _data: [],
    createNewId: function () {
      this._data[this._id] = {};
      return this._id++;
    },
    initializeIdAttribute: function (selector, id) {
      $(selector).attr(this._idName, id);
    },
    getId: function (selector) {
      if ($(selector).length) {
        let attribute = $(selector).attr(this._idName);
        if (attribute == undefined || attribute === false) {
          // Search in parents
          let parent = $(selector)[0].closest('[' + this._idName + ']');
          if ($(parent).length > 0) {
            attribute = $(parent).attr(this._idName);
          }
          if (attribute == undefined || attribute === false) {
            throw "Selector '" + selector + "' has no attribute '" + this._idName + "'";
          }
        }
        let id = parseInt(attribute);
        if (id < 0 || id >= this._id) {
          throw 'Bad ' + this._idName + " '" + id + "' for selector '" + selector + "'";
        }
        return id;
      }
      else {
        throw "Selector '" + selector + "'doesn't exist";
      }
    },
    get: function (id) {
      return this._data[id];
    },
    set: function (id, field, data) {
      this._data[id][field] = data;
    },
    reset: function (id) {
      this._data[id] = null;
    }
  };
}

exports.addToolTip = function (element, text) {
  // Set the tooltip text
  // Replace $(element).attr('title', text); EVEN in a part of svg

  $(element).attr('tooltip', text);

  // Trigger the display
  $(element).hover(function () {
    // Hover over code
    let tooltip = $(this).attr('tooltip');
    if (tooltip != null && tooltip.length > 0) {
      $(this).removeAttr('title'); // In case it is defined by error to avoid 2 tooltips
      if ($('.mastertooltip').length == 0 && !$(this).hasClass('tooltip_disabled')) {
        $('<p class="mastertooltip"></p>')
          .text(tooltip)
          .appendTo('body')
          .fadeIn(400);
      }
    }
  }, function () {
    // Hover out code
    $('.mastertooltip').remove();
  }).mousemove(function (e) {
    // X
    if (e.pageX <= $(window).width() / 2) {
      let mousex = e.pageX + 20; // Get X coordinates
      $('.mastertooltip').css({ left: mousex });
    }
    else {
      let mousex = e.pageX - 20
        - $('.mastertooltip').width(); // Get X coordinates
      $('.mastertooltip').css({ left: mousex });
    }

    // Y
    if (e.pageY + $('.mastertooltip').height() + 10
      <= $(window).height()) {
      let mousey = e.pageY + 10; // Get Y coordinates
      $('.mastertooltip').css({ top: mousey });
    }
    else {
      // To be tested !!!
      let mousey = e.pageY - 10 - $('.mastertooltip').height(); // Get Y coordinates
      $('.mastertooltip').css({ top: mousey });
    }
  });
}

exports.removeToolTip = function (element) {
  $(element).removeAttr('title');
  $('.mastertooltip').remove();
}

exports.cloneWithNewMachineId = function (boxtocloneid, newMachineid) {
  // Copy
  let copy = $('#' + boxtocloneid).clone(true);
  // remove boxtocloneid
  $(copy).removeAttr('id');
  // Remove all classes linked to cloned component is done in clearDynamicStateContent
  // == (init state)

  // Set machineid (after all 'remove' to be ready to display)
  $(copy).attr('machine-id', newMachineid);
  $(copy).find('*').attr('machine-id', newMachineid);

  return copy;
}

exports.cloneWithNewGroupId = function (boxtocloneid, newGroupid, isMachine) {
  // Copy
  let copy = $('#' + boxtocloneid).clone(true);
  // remove boxtocloneid
  $(copy).removeAttr('id');
  // Remove all classes linked to cloned component is done in clearDynamicStateContent
  // == (init state)

  // Set group-id (after all 'remove' to be ready to display)
  $(copy).attr('group', newGroupid); // not group-id to be able to use getConfigOrAttribute
  $(copy).find('*').attr('group', newGroupid);
  if (isMachine == true) {
    $(copy).find('*').attr('machine-id', newGroupid);
  }
  return copy;
}

exports.getTextChangeContext = function (self) {
  let textchangecontext = '';
  if (self.element.hasAttribute('textchange-context')) {
    textchangecontext = self.element.getAttribute('textchange-context');
    if (textchangecontext.search('machine-id') != -1) {
      textchangecontext += '_' + self.element.getAttribute('machine-id');
    }
    if (textchangecontext.search('group') != -1) {
      textchangecontext += '_' + self.element.getAttribute('group');
    }
  }
  return textchangecontext;
}

},{"pulseRange":"pulseRange"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
